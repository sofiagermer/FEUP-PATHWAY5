This is relnotes.info, produced by makeinfo version 6.5 from
relnotes.texi.

INFO-DIR-SECTION SICStus Prolog
START-INFO-DIR-ENTRY
* SICStus Prolog Release Notes: (relnotes).		SICStus Prolog Release Notes.
END-INFO-DIR-ENTRY

Generated July 7, 2021.


File: relnotes.info,  Node: Top,  Next: Overview,  Prev: (dir),  Up: (dir)

SICStus Prolog Release Notes
****************************

Release notes for SICStus Prolog 4.7.0, July 2021.  Copyright (C)
1995-2021 RISE Research Institutes of Sweden AB

   Permission is granted to make and distribute verbatim copies of these
notes provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
these notes under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of these
notes into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by SICS.

* Menu:

* Overview:: Overview
* Platforms:: Platforms
* Release Notes and Installation Guide for UNIX:: Release Notes and Installation Guide for UNIX
* Release Notes and Installation Guide for Windows:: Release Notes and Installation Guide for Windows
* Special Releases:: Special Releases
* REX:: Managing Extended Runtime License Information
* Tcl/Tk Notes:: Tcl/Tk Notes
* Jasper Notes:: Jasper Notes
* PrologBeans .NET Notes:: PrologBeans .NET Notes
* Berkeley DB Notes:: Berkeley DB Notes
* ODBC Notes:: ODBC Notes
* The SICStus Prolog IDE:: The SICStus Prolog IDE (SPIDER)
* The Emacs Interface:: The Emacs Interface
* Revision History:: Revision History
* Generic Limitations:: Generic Limitations
* Contact Information:: Contact Information


File: relnotes.info,  Node: Overview,  Next: Platforms,  Up: Top

1 Overview
**********

These notes summarize the changes in release 4 wrt. previous SICStus
Prolog releases as well as changes introduced by minor releases and
their patch releases.  Platform specific information pertaining to
certain parts of the system are also documented herein.


File: relnotes.info,  Node: Platforms,  Next: Release Notes and Installation Guide for UNIX,  Prev: Overview,  Up: Top

2 Platforms
***********

Binary distributions of Release 4.7 are available for many platforms;
see <https://sicstus.sics.se/> for an up-to-date list.

   SICStus has, at one time or another, been ported to many platforms,
ranging from mobile phones to mainframes.  If your platform is not
currently listed on the download page, then please let us know
(<sicstus-request@ri.se>).


File: relnotes.info,  Node: Release Notes and Installation Guide for UNIX,  Next: Release Notes and Installation Guide for Windows,  Prev: Platforms,  Up: Top

3 Release Notes and Installation Guide for UNIX
***********************************************

This chapter assumes that the environment variable 'PATH' includes
'<prefix>/bin', where '<prefix>' points to the SICStus installation
directory.  The installation directory is specified during installation;
*note UNIX installation::.  For example:

     csh,tcsh> setenv PATH "/usr/local/sicstus4.7.0/bin:$PATH"
     sh,bash,ksh> export PATH="/usr/local/sicstus4.7.0/bin:$PATH"

* Menu:

* UNIX installation::             Installation
* Platform specific UNIX notes::  Platform Specific Notes


File: relnotes.info,  Node: UNIX installation,  Next: Platform specific UNIX notes,  Up: Release Notes and Installation Guide for UNIX

3.1 Installation
================

Installation of SICStus under UNIX is performed by an installation
(Shell) script 'InstallSICStus', which interacts with the user to obtain
options such as where to install SICStus.

* Menu:

* UNIX Installation Prerequisites::  Prerequisites
* The Installation Script:: The Installation Script
* The Uninstallation Script:: The Uninstallation Script


File: relnotes.info,  Node: UNIX Installation Prerequisites,  Next: The Installation Script,  Up: UNIX installation

3.1.1 Prerequisites
-------------------

* Menu:

* C Compiler and Linker:: C Compiler and Linker


File: relnotes.info,  Node: C Compiler and Linker,  Up: UNIX Installation Prerequisites

3.1.1.1 C Compiler and Linker
.............................

A full SICStus installation requires a C compiler and a linker to
perform final link steps on the installation machine.

   For Solaris you can download the Oracle Developer Studio C compiler
from <https://www.oracle.com/>.  For Mac OS X you can download Xcode,
which contains a C compiler, from the App Store.  Linux distributions
typically has a C compiler installed or installable through the system
software update utility.

   If a C compiler is not available, then it is possible to use a
"prebuilt installation" on some platforms.

   If it is not enabled by default, then prebuilt installation is only
recommended as a last resort; it is available by invoking
'InstallSICStus' with the '--prebuilt' argument.

   A disadvantage with the prebuilt installation is that SICStus
libraries that interface to third-party products (Tcl/Tk, Berkeley DB,
Java, ...) may not work, or may require environment variables such as
'LD_LIBRARY_PATH' to be set.  Another disadvantage is that 'spld' and
'splfr' may not work unless you manually adjust the 'spld' configure
file.  Of course, neither 'spld' nor 'splfr' will work anyway if you do
not have a C compiler.


File: relnotes.info,  Node: The Installation Script,  Next: The Uninstallation Script,  Prev: UNIX Installation Prerequisites,  Up: UNIX installation

3.1.2 The Installation Script
-----------------------------

Most users will install SICStus from a binary distribution.  These are
available for all supported platforms.  Information on how to download
and unpack the binary distribution is sent by email when ordering
SICStus.

   Binary distributions are installed by executing an interactive
installation script called 'InstallSICStus'.  Type:

     % ./InstallSICStus

and follow the instructions on the screen.

   During installation, you will be required to enter your site-name and
license code.  These are included in the download instructions.

   The installation program does not only copy files to their
destination, it also performs final link steps for some of the
executables and for the library modules requiring third-party software
support, e.g. 'library(bdb)' and 'library(tcltk)'.  This is done in
order to adapt to local variations in installation paths and versions.

   Invoke 'InstallSICStus' with the '--help' argument to get a list of
options.


File: relnotes.info,  Node: The Uninstallation Script,  Prev: The Installation Script,  Up: UNIX installation

3.1.3 The Uninstallation Script
-------------------------------

To uninstall SICStus the script 'UnInstallSICStus' can be run.  It is
created during installation in the same directory as 'InstallSICStus'.


File: relnotes.info,  Node: Platform specific UNIX notes,  Prev: UNIX installation,  Up: Release Notes and Installation Guide for UNIX

3.2 Platform Specific Notes
===========================

This section contains some installation notes that are platform specific
under UNIX.

*Solaris Intel 64-bit, SPARC 64-bit*

     The following libraries are not supported: 'library(bdb)',
     'library(tcltk)'.

*Mac OS X*

     An executable built with 'spld' will only work if there is a
     properly configured subdirectory 'sp-4.7.0' in the same directory
     as the executable; see *note Runtime Systems on UNIX Target
     Machines: (sicstus)Runtime Systems on UNIX Target Machines.

     Alternatively, the option '--wrapper' can be passed to 'spld'.  In
     this case a wrapper script is created that will set up various
     environment variables and invoke the real executable.

     When using third-party products like BDB, you may need to set up
     'DYLD_LIBRARY_PATH' so that the Mac OS X dynamic linker can find
     them.  When using the SICStus development executable ('sicstus'),
     this should happen automatically, if the third-party products have
     been installed in the standard locations; see *note Berkeley DB on
     Mac OS X::.

     Sometimes, the default limit on the process's data-segment is
     unreasonably small, which may lead to unexpected memory allocation
     failures.  To check this limit, do:
          bash$ ulimit -d
          6144
     This indicates that the maximum size of the data-segment is only 6
     Mb.  To remove the limit, do:
          bash$ ulimit -d unlimited
          bash$ ulimit -d
          unlimited

          *Please note*: 'ulimit' is a shell built-in in 'bash'.  It may
          have a different name in other shells.

     SICStus will set the data segment size of itself according to the
     value of the system property (or environment variable)
     'SP_ULIMIT_DATA_SEGMENT_SIZE'.  If you set this variable in the
     initialization file for your shell, then you do not have to use the
     'ulimit' command when SICStus is started from the shell.  *Note
     System Properties and Environment Variables: (sicstus)System
     Properties and Environment Variables.  for more information about
     'SP_ULIMIT_DATA_SEGMENT_SIZE'.  This system property is set
     automatically when SICStus is invoked from the SICStus Prolog IDE
     (SPIDER), from Emacs (via 'M-x run-prolog'), or from the launcher
     script 'SICStus Prolog 4.7.0.term' installed in 'Applications'.

     File names are encoded in UTF-8 under Mac OS X. This is handled
     correctly by SICStus.

     If SICStus encounters a file name that is not encoded in UTF-8,
     then it will silently ignore the file or directory.  This can
     happen on file systems where files have been created by some other
     OS than Mac OS X, e.g. on network file servers accessed by other
     UNIX flavors or Windows.

     The default character encoding for the SICStus standard streams is
     based on the current locale.  On some older versions of OS X, the
     default locale is POSIX/C, i.e. US ASCII.

     This will come in conflict with the default character encoding for
     the Terminal application which is UTF-8.  A clickable launcher for
     SICStus is optionally installed in the Applications folder.  This
     launcher will set the character encoding of the standard streams to
     UTF-8 for both the Terminal and SICStus.  The character encoding is
     set automatically when SICStus is invoked from the SICStus Prolog
     IDE (SPIDER), or from Emacs (via 'M-x run-prolog')


File: relnotes.info,  Node: Release Notes and Installation Guide for Windows,  Next: Special Releases,  Prev: Release Notes and Installation Guide for UNIX,  Up: Top

4 Release Notes and Installation Guide for Windows
**************************************************

This chapter assumes that the environment variable 'PATH' includes
'%SP_PATH%\bin', where 'SP_PATH' points to the SICStus installation
directory (typically 'C:\Program Files\SICStus Prolog 4.7.0\').  Here,
'%SP_PATH%' is just a place-holder; you usually do not need to set the
environment variable 'SP_PATH', but see *note CPL Notes: (sicstus)CPL
Notes.  For example:

     C:\> set PATH=C:\Program Files\SICStus Prolog 4.7.0\bin;%PATH%

   To use 'splfr' and 'spld', you must also set up the appropriate
Microsoft Visual Studio tools; see *note Setting up the C compiler on
Windows: (sicstus)Setting up the C compiler on Windows. for details.

   To use the respective library modules, you must also include the
paths to Tcl/Tk (*note Tcl/Tk Notes::) and Berkeley DB (*note Berkeley
DB Notes::) onto the 'PATH' environment variable if the installer for
Berkeley DB and Tcl/Tk have not done so already.

* Menu:

* Windows Requirements::        Requirements
* Windows Installation::        Installation
* Windows Notes:: Windows Notes
* Command Line Editing:: Command Line Editing
* The Console Window:: The Console Window
* Windows Limitations:: Windows Limitations


File: relnotes.info,  Node: Windows Requirements,  Next: Windows Installation,  Up: Release Notes and Installation Guide for Windows

4.1 Requirements
================

   * Operating environment: Microsoft Windows 7/8/10 (both 32-bit and
     64-bit).
   * For interfacing with C or C++, or for using 'spld' or 'splfr': C
     compiler and related tools from Microsoft Visual Studio.  The
     version of Visual Studio should match the version used when
     building SICStus Prolog.  For this reason a number of variants of
     SICStus Prolog is released, each built with a separate version of
     Visual Studio.

     Microsoft offers free editions of Visual Studio and its C
     compilers.  It is probably possible to make these work as well but
     they may require other tools or downloads.

   * For distributing products incorporating SICStus Prolog runtime
     systems: SICStus Prolog depends on the C runtime library
     corresponding to the C compiler used when building SICStus Prolog.

     There are several alternative ways to have your installer install
     the Microsoft C libraries.  See the Microsoft documentation for
     details, or contact SICStus Support.

     Building installers for Windows (or for any platform) is complex.
     There are several tools available, some of them free, that can help
     with the task.  The SICStus Prolog installer is built using the
     free WiX toolset from Microsoft.


File: relnotes.info,  Node: Windows Installation,  Next: Windows Notes,  Prev: Windows Requirements,  Up: Release Notes and Installation Guide for Windows

4.2 Installation
================

The development system comes in two flavors:

  1. A console-based executable suitable to run from a DOS-prompt, from
     batch files, or under SPIDER or Emacs.

  2. A windowed executable providing command line editing and menus.
     *Note Command Line Editing::.  Except for very simple interactions
     it is preferable to use the SPIDER IDE *note SICStus Prolog IDE:
     (sicstus)SPIDER. or the Emacs mode *note The Emacs Interface:: when
     interacting with SICStus Prolog.

   The distribution consists of a single, self-installing executable
('InstallSICStus.exe') containing development system, runtime support
files, library sources, and manuals.

   SICStus Prolog requires a license code to run.  You should have
received from SICS your site name, the expiration date and the code.
This information is normally entered during installation:

     Expiration date: EXPIRATIONDATE
     Site: SITE
     License Code: CODE

but it can also be entered by starting SICStus *with Administrative
rights* from the Start menu ('spwin.exe') and selecting 'Enter License'
from the 'Settings' menu.  Entering the license requires Administrative
rights.  Running SICStus should be possible from a limited account.


File: relnotes.info,  Node: Windows Notes,  Next: Command Line Editing,  Prev: Windows Installation,  Up: Release Notes and Installation Guide for Windows

4.3 Windows Notes
=================

   * The file name arguments to 'splfr' and 'spld' should not have
     embedded spaces.  For file names with spaces, you can use the
     corresponding short file name.

   * In 'spwin', selecting the 'Manual' or 'Release Notes' item in the
     'Help' menu may give an error message similar to '...
     \!Help\100#!Manual.lnk could not be found'.  This happens when
     Adobe Acrobat Reader is not installed or if it has not been
     installed for the current user.  Open 'C:\Program Files\SICStus
     Prolog 4.7.0\doc\pdf\' in the explorer and try opening
     'relnotes.pdf'.  If this brings up a configuration dialog for Adobe
     Acrobat, then configure Acrobat and try the 'Help' menu again.
     Alternatively, you may have to obtain Adobe Acrobat.  It is
     available for free from <https://www.adobe.com/>.

   * We recommend that SICStus be installed by a user with
     administrative privileges and that the installation is made 'For
     All Users'.

     If SICStus is installed for a single user, then SICStus will not
     find the license information when started by another user.  In this
     case, the windowed version of SICStus ('spwin') will put up a
     dialog where a license can be entered.


File: relnotes.info,  Node: Command Line Editing,  Next: The Console Window,  Prev: Windows Notes,  Up: Release Notes and Installation Guide for Windows

4.4 Command Line Editing
========================

Command line editing supporting Emacs-like commands and IBM PC arrow
keys is provided in the windowed executable ('spwin.exe').  The
following commands are available:

'^h'
     erase previous char

'^d'
     erase next char

'^u'
     kill line

'^f'
     forward char

'^b'
     backward char

'^a'
     begin of line

'^e'
     end of line

'^p'
     previous line

'^n'
     next line

'^i'
     insert space

'^s'
     forward search

'^r'
     reverse search

'^v'
     view history

'^q'
     input next char blindly

'^k'
     kill to end of line

   Options may be specified in the file '~/spcmd4.ini' as:

     OPTION VALUE

on separate lines.  Recognized options are:

'lines'
     VALUE is the number of lines in the history buffer.  1-100 is
     accepted; the default is 25.

'save'
     VALUE is either 0 (do not save or restore history buffer) or 1
     (save history buffer in '~/spcmd4.hst' on exit, restore history
     from the same file on start-up).


File: relnotes.info,  Node: The Console Window,  Next: Windows Limitations,  Prev: Command Line Editing,  Up: Release Notes and Installation Guide for Windows

4.5 The Console Window
======================

The console window used for the windowed executable is based on code
written by Jan Wielemaker '<jan at swi.psy.uva.nl>'.

   The console comes with a menu access to common Prolog flags and file
operations.  Most of these should be self explanatory.  The 'Reconsult'
item in the 'File' menu reconsults the last file consulted with use of
the 'File' menu.  Eventually The SICStus Prolog IDE (*note The SICStus
Prolog IDE::) will replace the console.

   Note that the menus work by simulating user input to the Prolog top
level or debugger.  For this reason, it is recommended that the menus
only be used when SICStus is waiting for a goal at the top level (or in
a break level) or when the debugger is waiting for a command.

* Menu:

* Console Preferences:: Console Preferences


File: relnotes.info,  Node: Console Preferences,  Up: The Console Window

4.5.1 Console Preferences
-------------------------

The stream-based console window is a completely separate library, using
its own configuration info.  It will look at the environment variable
'CONSOLE', which should contain a string of the form
NAME:VALUE{,NAME:VALUE} where NAME is one of the following:

'sl'
     The number of lines you can scroll back.  There is no limit, but
     the more you specify the more memory will be used.  Memory is
     allocated when data becomes available.  The default is 200.

'rows'
     The initial number of lines.  The default is 24.

'cols'
     The initial number of columns.  The default is 80.

'x'
     The X coordinate of the top-left corner.  The default is determined
     by the system.

'y'
     The Y coordinate of the top-left corner.  The default is determined
     by the system.

   Many of these settings are also accessible from the menu 'Settings'
of the console.


File: relnotes.info,  Node: Windows Limitations,  Prev: The Console Window,  Up: Release Notes and Installation Guide for Windows

4.6 Windows Limitations
=======================

   * File paths with both '/' and '\' as separator are accepted.
     SICStus returns paths using '/'.  Note that '\', since it is escape
     character, must be given as '\\'.

   * All file names and paths are normalized when expanded by
     'absolute_file_name/3'.  This is to simulate the case insensitivity
     used by Windows file systems.  However, built-ins that create
     files, e.g. 'open/4', will create files using the same character
     case as specified in the file argument.

   * Emacs Issues: Running under Emacs has been tried with recent
     versions of GNU Emacs.  *Note The Emacs Interface::.

        - Choosing 'Send EOF' from the menu, i.e. 'comint-send-eof'),
          closes the connection to the SICStus process.  This will cause
          SICStus to exit.  This problem cannot be fixed in SICStus; it
          is a limitation of current versions of GNU Emacs (at least up
          to GNU Emacs 20.7).

          Instead of sending and end of file, you can enter the atom
          'end_of_file' followed by a period.

   * Under Windows, 'statistics(runtime, ...)' measures user time of the
     thread running SICStus (the main thread) instead of process user
     time.  This makes 'statistics(runtime, ...)' meaningful also in a
     multi-threaded program.


File: relnotes.info,  Node: Special Releases,  Next: REX,  Prev: Release Notes and Installation Guide for Windows,  Up: Top

5 Special Releases
******************

Sometimes SICStus Prolog is built for special purposes or special
platforms.  These releases may have restrictions in functionality,
licensing etc.  The most common case is when a beta version of SICStus
Prolog is released.

* Menu:

* Beta Releases::         Beta Releases


File: relnotes.info,  Node: Beta Releases,  Up: Special Releases

5.1 Beta Releases
=================

Note: this information only applies to beta releases.  Most users never
encounter a beta release and can safely ignore this section.

   A beta release should not be used for critical work.  In most cases
it has not been extensively tested and may have known problems.

   Do not assume that the performance of a beta release will correspond
to the performance of the final versions.  Most beta releases contain
runtime tests that will make the beta slower, sometimes much slower,
than the final version.  Please report if any such test triggers.

   Beta releases may also contain experimental performance improvements
that could make the beta faster, sometimes much faster, than the final
version.

   Most beta releases are time limited and will cease to function about
three month from release.  This is also true of any runtime systems
built with the beta.


File: relnotes.info,  Node: REX,  Next: Tcl/Tk Notes,  Prev: Special Releases,  Up: Top

6 Managing Extended Runtime License Information
***********************************************

Extended runtime systems need to have a license available at runtime.
This license can be embedded in the extended runtime executable or
located in a separate file.  The following describes the steps needed in
order to enter the license information.  The example assumes that you
are familiar with the procedure for building runtime systems.  *Note The
Application Builder: (sicstus)The Application Builder.  for details.

   Suppose that you have been provided with the following license
information:

     Dear SICStus Prolog customer,

     Your extended runtime license information for platform 'PLATFORM' is as follows:

     Site name:          MySite
     License code:       a111-b222-c333-d444-e444
     Expiration date:    permanent

     Corresponding to a file 'extended_license.pl' with the following contents:
     %% LICENSE BEGIN
     site('MySite').
     product('extended_runtime_sicstusMAJOR.MINOR_PLATFORM',
            'permanent',
            'a111-b222-c333-d444-e444').
     %% LICENSE END

   *Please note*: The license information differs between SICStus
versions and platforms.  The PLATORM is one of 'win32' (for Microsoft
Windows), 'linux', 'darwin' (for Apple macOS), or 'solaris'.  The
MAJOR'.'MINOR is the major and minor version of SICStus, currently
'4.7'.

   Following is a list of common tasks.

   * Making the license available to the development system.

     Create a file 'extended_license.pl' with the contents specified in
     the email, that is:

          %% LICENSE BEGIN
          site('MySite').
          product('extended_runtime_sicstusMAJOR.MINOR_PLATFORM',
                 'permanent',
                 'a111-b222-c333-d444-e444').
          %% LICENSE END

     This file can be located anywhere, e.g. in the folder containing
     your source code.

   * Building an Extended Runtime System using 'spld' which embeds
     license information from the above file:

          % spld -E --license-file ./extended_license.pl [...]

     This will read the license information and embed the information in
     the created executable.  No separate license file will be needed at
     runtime.  This is the preferred method.  This method can be used
     also to create an all-in-one executable; *note All-in-one
     Executables: (sicstus)All-in-one Executables.

     On UNIX platforms, it is possible to install the license
     information using the 'splm' tool so that you do not need create
     the file 'extended_license.pl' and pass it to 'spld'.  However, a
     separate license file may be needed anyway if the license cannot be
     embedded; see below.

   * Building an Extended Runtime System which does not embed license
     information.

     The resulting runtime system will need a way to find the license
     file at runtime.  This variant is useful when the executable is not
     built with 'spld', e.g. when building a DLL (Windows) or DSO
     (UNIX):

          % spld -E --no-embed-license [...]

     The resulting executable will produce output similar to the
     following if it cannot find the license file:

          License error:
          License file not found! [...]

   * Ensuring that the license information is available at runtime.

     If the license information has been embedded, then no special steps
     are needed.  Otherwise, you need to distribute the license file
     along with the runtime system.  To make the license file available
     it should be located in the 'library' folder and named
     'license.pl'.  That is, copy 'extended_license.pl' as created above
     into the file 'library/license.pl' in the folder tree available at
     runtime.  *Note Runtime Systems on Target Machines:
     (sicstus)Runtime Systems on Target Machines.  for details.  Also
     see *note Locating the License Information: (sicstus)Locating the
     License Information. for additional ways of making the license
     information available.

   * Understanding steps performed by 'spld'.  As usual, you can use:

          % spld --verbose --keep [...]

     in order to see exactly what steps are performed by 'spld'.  This
     is useful if you want to embed the license but need to build the
     executable manually, instead of using 'spld'.


File: relnotes.info,  Node: Tcl/Tk Notes,  Next: Jasper Notes,  Prev: REX,  Up: Top

7 Tcl/Tk Notes
**************

'library(tcltk)' is built on top of Tcl/Tk.  It is an optional component
of SICStus and you can safely ignore this section if you do not intend
to use 'library(tcltk)'.

   Tcl/Tk itself is not included in the SICStus distribution.  It must
be installed in order to use the interface.  Many operating systems have
build-in support for Tcl/Tk, either preinstalled or available via some
software update utility.  If a default version is not available, then
Tcl/Tk can be downloaded from the Tcl/Tk primary website:

     <https://www.tcl.tk/>

   A better alternative may be to use one of the free installers
available from:

     <https://www.activestate.com>

   SICStus for Mac OS X uses the Tcl/Tk that comes with Mac OS X. Some
versions of Tcl/Tk provided by Apple have bugs that may cause SICStus
Prolog to crash when using 'library(tcltk)'.  If this happens, then you
can try to update to a newer version of Tcl/Tk, e.g. by using the
installers from <https://www.activestate.com/>.  Tcl/Tk is also easy to
build from source.

   Starting with release 4.7, 'library(tcltk)' is built in a way that
does not depend on the version of Tcl/Tk that will be available at
runtime.  As an example, even though 'library(tcltk)' on macOS is built
with the Apple default version of Tcl/TK (8.5), it will automatically
start using a newer version, e.g Tcl/Tk 8.6, if the new version is
installed in one of the default locations.

     *Please note*: On Windows, you need to have the Tcl/Tk binaries
     accessible from your 'PATH' environment variable, e.g.
     'C:\Program Files\Tcl\bin'.

   The GUI version of SICStus, 'spwin', like all Windows non-console
applications, lacks the C standard streams ('stdin', 'stdout', 'stderr')
and the Tcl command 'puts' and others that use these streams will
therefore give errors.  The solution is to use 'sicstus' instead of
'spwin' if the standard streams are required.

* Menu:

* The Tcl/Tk Terminal::         The Tcl/Tk Terminal Window


File: relnotes.info,  Node: The Tcl/Tk Terminal,  Up: Tcl/Tk Notes

7.1 The Tcl/Tk Terminal Window
==============================

The Tcl/Tk interface includes an experimental and unsupported terminal
window based on Tcl/Tk.  It is opened by using the (undocumented)
predicate:

'tk_terminal(Interp, TextWidget, InStream, OutStream, ErrStream)'
     Given a TextWidget, e.g. '.top.myterm', this predicate opens three
     Prolog streams for which the text widget acts as a terminal.

   There is also a 'library(tkconsol)' that makes use of
'tk_terminal/5'.  It provides a predicate 'tk_console/0' that switches
the Prolog top level to a Tk window.


File: relnotes.info,  Node: Jasper Notes,  Next: PrologBeans .NET Notes,  Prev: Tcl/Tk Notes,  Up: Top

8 Jasper Notes
**************

'library(jasper)' is built on top of Java.  It is an optional component
of SICStus.  You can safely ignore this section if you do not intend to
use Java with SICStus.

* Menu:

* Supported Java Versions:: Supported Java Versions
* Getting Started:: Getting Started
* Jasper Package Options:: Jasper Package Options
* Multi Threading:: Multi Threading
* Changes in Jasper from SICStus 3:: Changes in Jasper from SICStus 3
* Known Bugs and Limitations:: Known Bugs and Limitations
* Java Examples Directory:: Java Examples Directory


File: relnotes.info,  Node: Supported Java Versions,  Next: Getting Started,  Up: Jasper Notes

8.1 Supported Java Versions
===========================

Jasper should work with all current versions of Java.  Except under
Windows the full development kit, not just the JRE, is needed.

   Jasper is built using a particular version of Java, as appropriate
for each platform, but it is possible to recompile it to work with older
versions as well.  The version may differ between platform, see
<https://sicstus.sics.se/> for details.

   For some platforms, Jasper is _only_ supported under the following
conditions:

*Mac OS X*
     Using Jasper from Java may require that 'DYLD_LIBRARY_PATH' be set
     up so that Java can find the SICStus runtime library.  That is, you
     may need to set 'DYLD_LIBRARY_PATH' to the location of the SICStus
     runtime 'libsprt4-7-0.dylib'.

     On macOS, embedding Java in SICStus, e.g. by using
     'library(jasper)', may fail, possibly with a dialog about the need
     for a Java SE 6 runtime.  This is caused by missing information in
     the section 'JVMCapabilities' of the file 'Info.plist' in the Java
     installation.  As of March 2020 this seems to be true for most Java
     distributions but several suggested workarounds can be found on the
     net.


File: relnotes.info,  Node: Getting Started,  Next: Jasper Package Options,  Prev: Supported Java Versions,  Up: Jasper Notes

8.2 Getting Started
===================

This section describes some tips and hints on how to get the interface
started.  This is actually where most problems occur.

* Menu:

* Windows:: Windows.
* UNIX:: UNIX.
* Running Java from SICStus:: Running Java from SICStus.
* Running SICStus from Java:: Running SICStus from Java.


File: relnotes.info,  Node: Windows,  Next: UNIX,  Up: Getting Started

8.2.1 Windows
-------------

Under Windows, you should ensure that SICStus Prolog's and Java's DLL
directories are on your '%PATH%'.  This will enable Windows library
search method to locate all relevant DLLs.  For SICStus, this is the
same as where 'sicstus.exe' is located, something like
'C:\Program Files\SICStus Prolog 4.7.0\bin'.  For Java it must include
the folder where 'jvm.dll' is located.

   For example:

     C:\> set PATH="C:\Program Files\Java\jdk-9.0.4\bin\server;%PATH%"
     C:\> set PATH="C:\Program Files\SICStus Prolog 4.7.0\bin;%PATH%"

   To make this change permanent you would use the 'Advanced' tab in the
'System' Control Panel.  Consult your OS documentation for details.


File: relnotes.info,  Node: UNIX,  Next: Running Java from SICStus,  Prev: Windows,  Up: Getting Started

8.2.2 UNIX
----------

When 'library(jasper)' is used to embed Java in a SICStus development
system or runtime system, the runtime linker needs to be told where to
find the Java libraries (e.g. 'libjvm.so').  During installation,
'InstallSICStus' will build either the 'sicstus' executable or the
'jasper' foreign resource so that it contains the necessary information;
the details are platform dependent.

   If you use 'spld' to relink SICStus or to build a runtime system,
then you can use the command line option '--resource=-jasper' (note the
minus sign).  This tells 'spld' to include the search path (_rpath_) in
the executable needed to ensure that 'library(jasper)' can find the Java
libraries.

   If you want to run 'sicstus' with another Java than what was
specified during installation, then you can use 'spld' without the
'--resources' option to get a SICStus executable without any embedded
Java paths.  In this case, you need to set the environment variable
'LD_LIBRARY_PATH' (or similar) appropriately.


File: relnotes.info,  Node: Running Java from SICStus,  Next: Running SICStus from Java,  Prev: UNIX,  Up: Getting Started

8.2.3 Running Java from SICStus
-------------------------------

If SICStus is used as parent application, then things are usually really
simple.  Just execute the query:

     | ?- use_module(library(jasper)).
   After that, it is possible to perform meta-calls as described in
*note Jasper Library Predicates: (sicstus)Jasper Library Predicates.

   When Jasper is used in runtime systems, additional constraints apply
as described in *note Runtime Systems on Target Machines:
(sicstus)Runtime Systems on Target Machines.  The Java to SICStus
interface relies on dynamically loading the SICStus runtime system.  For
this reason, it is not possible to use 'library(jasper)' from an
executable that links statically with the SICStus runtime.


File: relnotes.info,  Node: Running SICStus from Java,  Prev: Running Java from SICStus,  Up: Getting Started

8.2.4 Running SICStus from Java
-------------------------------

If Java is used as parent application, then things are a little more
complicated.  There are a couple of things that need to be taken care
of.  The first is to specify the correct class path so that Java can
find the Jasper classes ('SICStus', 'SPTerm', and so on).  This is done
by specifying the pathname of the file 'jasper.jar':

     % java -classpath $SP_PATH/bin/jasper.jar ...

   'SP_PATH' does not need to be set; it is only used here as a
placeholder (*note CPL Notes: (sicstus)CPL Notes.).  See the
documentation of the Java implementation for more info on how to set
classpaths.

   The second is to specify where Java should find the Jasper native
library ('libspnative.so' or 'spnative.dll'), which the 'SICStus' class
loads into the JVM by invoking the method
'System.loadLibrary("spnative")'.  Under UNIX, Jasper can usually figure
this out by itself, but in the event that Jasper is used in a
non-standard installation, this will most likely fail.  A typical
example of such a failure looks like:

     % java -classpath [...]/jasper.jar se.sics.jasper.SICStus
     Trying to load SICStus.
     Exception in thread "main" java.lang.UnsatisfiedLinkError: no spnative
     in java.library.path
     	at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1133)
     	at java.lang.Runtime.loadLibrary0(Runtime.java:470)
     	at java.lang.System.loadLibrary(System.java:745)
     	at se.sics.jasper.SICStus.loadNativeCode(SICStus.java:37)
     	at se.sics.jasper.SICStus.initSICStus(SICStus.java:80)
     	at se.sics.jasper.SICStus.<init>(SICStus.java:111)
     	at se.sics.jasper.SICStus.main(SICStus.java:25)

   Under UNIX, this can be fixed by explicitly setting the Java property
'java.library.path' to the location of 'libspnative.so', like this:

     % java -Djava.library.path=/usr/local/sicstus4.7.0/lib [...]

   Under Windows, Java must be able to find 'spnative.dll' through the
'PATH' environment variable (*note Windows::).  Setting
'-Djava.library.path' under Windows can lead to problems if multiple
versions of SICStus have been installed.

   If this works properly, then SICStus should have been loaded into the
JVM address space.

   If everything is set up correctly, then you should be able to call
'main' (which contains a short piece of test-code) in the SICStus root
class, something like this:

     % java -Djava.library.path="/usr/local/sicstus4.7.0/lib" \
            -classpath "/usr/local/sicstus4.7.0/lib/sicstus-4.7.0/bin/jasper.jar" \
             se.sics.jasper.SICStus
     Trying to load SICStus.
     If you see this message, then you have successfully
     initialized the SICStus Prolog engine.

   Under Windows, it would look something like this, depending on the
shell used:

     % java -classpath "C:/Program Files/SICStus Prolog 4.7.0/bin/jasper.jar" se.sics.jasper.SICStus
     Trying to load SICStus.
     If you see this message, then you have successfully
     initialized the SICStus Prolog engine.

   If more than one 'se.sics.jasper.SICStus' instance will be created,
then the SICStus runtimes named e.g. 'sprt4-7-0_instance_01_.dll' need
to be available as well.  *Note Runtime Systems on Target Machines:
(sicstus)Runtime Systems on Target Machines.


File: relnotes.info,  Node: Jasper Package Options,  Next: Multi Threading,  Prev: Getting Started,  Up: Jasper Notes

8.3 Jasper Package Options
==========================

The following Java system properties can be set to control some features
of the Jasper package:

'se.sics.jasper.SICStus.debugLevel'
     *This flag is unsupported*.

     You probably should not use it in production code.  It may be
     removed or change meaning in future releases.

     An integer, zero by default.  If larger than zero, then some debug
     info is output to 'System.out'.  Larger values produce more info.
     The value of this flag can be set and read with
     'SICStus.setDebugLevel()' and 'SICStus.debugLevel()':

          % java -Dse.sics.jasper.SICStus.debugLevel=1 ...
     or, from Prolog:
          jasper_initialize(
             ['-Dse.sics.jasper.SICStus.debugLevel=1'],
             JVM)


File: relnotes.info,  Node: Multi Threading,  Next: Changes in Jasper from SICStus 3,  Prev: Jasper Package Options,  Up: Jasper Notes

8.4 Multi Threading
===================

Some exceptions thrown in multi threaded mode may be removed in the
future.  The user should never catch specific exceptions, but instead
catch instances of 'PrologException'.

   *Note Known Bugs and Limitations:: for details on the limitations of
multi threaded Jasper.


File: relnotes.info,  Node: Changes in Jasper from SICStus 3,  Next: Known Bugs and Limitations,  Prev: Multi Threading,  Up: Jasper Notes

8.5 Changes in Jasper from SICStus 3
====================================

   * The (deprecated) predicates 'jasper_call_static/6' and
     'jasper_call_instance/6' have been removed.

   * SICStus 4 uses ISO syntax.  This may affect Java code that handles
     Prolog terms.


File: relnotes.info,  Node: Known Bugs and Limitations,  Next: Java Examples Directory,  Prev: Changes in Jasper from SICStus 3,  Up: Jasper Notes

8.6 Known Bugs and Limitations
==============================

   * Jasper cannot be used from within applets, since Jasper relies on
     calling methods declared as 'native'.  This is due to a
     security-restriction enforced on applets by Java; they are not
     allowed to call native code.

   * Some uses of 'SPTerm' will leak memory on the Prolog side.  This is
     not really a bug but may come as a surprise to the unwary.  *Note
     SPTerm and Memory: (sicstus)SPTerm and Memory.

   * Loading multiple SICStus runtimes has not been very well tested
     with multi threaded Jasper.


File: relnotes.info,  Node: Java Examples Directory,  Prev: Known Bugs and Limitations,  Up: Jasper Notes

8.7 Java Examples Directory
===========================

There is an examples directory available in
'$SP_PATH/library/jasper/examples'.  See the file 'README' for more
info.


File: relnotes.info,  Node: PrologBeans .NET Notes,  Next: Berkeley DB Notes,  Prev: Jasper Notes,  Up: Top

9 PrologBeans .NET Notes
************************

'library(prologbeans)' is an optional component of SICStus and you can
safely ignore this section if you do not intend to use
'library(prologbeans)'.

   PrologBeans .NET is a library for connecting .NET code, e.g. C#, to a
SICStus process running 'library(prologbeans)'.

   In SICStus Prolog 4.3.2, the .NET code was ported to C#, and can be
used on both Windows platforms (using Microsoft .NET 4.0 or later) and,
using Mono, on non-Windows platforms.  See below for migration
information.

   The C# version is quite similar to the corresponding Java code
(PrologBeans) and we refer to the library documentation (*note
PrologBeans Interface: (sicstus)lib-prologbeans.), the JavaDoc
documentation for the corresponding Java classes, and the C# source code
in 'library/prologbeans.NET/*.cs' for details.

* Menu:

* PrologBeans J-sharp:: Migrating from the older, J#, PrologBeans


File: relnotes.info,  Node: PrologBeans J-sharp,  Up: PrologBeans .NET Notes

9.1 Migrating from the older, J#, PrologBeans
=============================================

Prior to SICStus Prolog 4.3.2, the PrologBeans .NET library depended on
J# in order to compile and run the Java version as .NET code.  This
meant that you needed to link with the Microsoft J# support library,
which has been discontinued by Microsoft.

   The new C# version is expected to be, mostly, binary compatible with
code that use the old J# version.  This means that you should be able to
use your .NET code with the latest 'prologbeans.dll' even without
recompiling your code.  You should remove the use of the Microsoft J#
library, but that should not be strictly necessary.

   *Please note:* The J# version of PrologBeans was deprecated in
SICStus Prolog 4.3.2, and was removed in SICStus Prolog 4.3.3.  Contact
SICStus Support if you need the old J# version.


File: relnotes.info,  Node: Berkeley DB Notes,  Next: ODBC Notes,  Prev: PrologBeans .NET Notes,  Up: Top

10 Berkeley DB Notes
********************

*Please note:* 'library(bdb)' has been deprecated.  See 'library(lmdb)'
for a replacement with similar feature set.

   'library(bdb)' is built on top of Berkeley DB. It is an optional
component of SICStus and nothing, except 'library(bdb)', will be
affected if Berkeley DB is not installed on the machine.  You can safely
ignore this section if you do not intend to use 'library(bdb)'.

   Berkeley DB can be downloaded from:

     <https://www.oracle.com/database/berkeley-db/>

   'library(bdb)' is built using a particular version of Berkeley DB but
it is possible to recompile it to work with other versions as well.  The
version differs between platform, see <https://sicstus.sics.se/> for
details.

* Menu:

* Berkeley DB on MS Windows:: Berkeley DB on MS Windows
* Berkeley DB on Mac OS X:: Berkeley DB on Mac OS X


File: relnotes.info,  Node: Berkeley DB on MS Windows,  Next: Berkeley DB on Mac OS X,  Up: Berkeley DB Notes

10.1 Berkeley DB on MS Windows
==============================

When installing Berkeley DB on Windows you should use the binary
installer available from Oracle.  There are installers available for
both 64-bit and 32-bit versions of Berkeley DB, you need the 64-bit
installer for 64-bit version of SICStus, and vice versa.

   When using Berkeley DB under Windows, you should set the 'PATH'
environment variable to contain the path to 'libdb53.dll'.  Consult the
Berkeley DB documentation for further info.


File: relnotes.info,  Node: Berkeley DB on Mac OS X,  Prev: Berkeley DB on MS Windows,  Up: Berkeley DB Notes

10.2 Berkeley DB on Mac OS X
============================

The prebuilt installation of SICStus for Mac OS X assumes that Berkeley
DB is installed in the default location '/usr/local/BerkeleyDB.VERSION/'
(where "VERSION" can be, e.g. "6.2".

   There is no binary installer available for installing Berkeley DB on
Mac OS X. Instead you need to build it yourself.  To do this you need to
download and install the Apple C compiler (Xcode) and then download,
build and install the Berkeley DB library, using something like the
following in the 'Terminal' program:

  1. Some tools do not understand the way macOS specifies the language.
     Therefore, set a sensible default language during the build.

     'export LC_ALL=en_US.UTF-8'

  2. Unpack the downloaded source code archive.  At the time of writing,
     6.2.32 is the latest version of Berkeley DB 6.2.

     'tar xzf db-6.2.32.tar.gz'

  3. Move into the source code folder tree

     'cd db-6.2.32/build_unix/'

  4. Configure Berkeley DB for (64-bit only)

     '../dist/configure'

  5. Build

     'make'

  6. Install in the standard location

     'sudo make install'

     The installation step requires that you are running as an
     administrator and the 'sudo' command will require that you provide
     the password.

  7. Verify that Berkeley DB was installed

     '/usr/local/BerkeleyDB.6.2/bin/db_archive -V'

     This should print some version information, e.g. 'Berkeley DB
     6.2.32: (April 5, 2017)'.


File: relnotes.info,  Node: ODBC Notes,  Next: The SICStus Prolog IDE,  Prev: Berkeley DB Notes,  Up: Top

11 ODBC Notes
*************

'library(odbc)' is an optional component of SICStus and you can safely
ignore this section if you do not intend to use 'library(odbc)'.

   ODBC (Open Database Connectivity) is a standard API for using a DBMS
(DataBase Management System).  By using ODBC you can access data from a
multitude of DBMSs without having to know the details of each DBMS.

   'library(odbc)' appeared in release 4.1.0 and we expect it to evolve
and improve as we receive feedback from users.  While we generally
strive for backward compatibility we may have to make incompatible
changes to 'library(odbc)' in order to accommodate necessary
improvements.

   'library(odbc)' is currently supported on MS Windows, Mac OS X and
Linux.

* Menu:

* ODBC on MS Windows:: ODBC on MS Windows
* ODBC on Mac OS X:: ODBC on Mac OS X
* ODBC on Linux:: ODBC on Linux


File: relnotes.info,  Node: ODBC on MS Windows,  Next: ODBC on Mac OS X,  Up: ODBC Notes

11.1 ODBC on MS Windows
=======================

ODBC is a standard component of MS Windows.  You only need to install
the DBMS specific ODBC drivers.  Please refer to the ODBC documentation
for MS Windows, and the ODBC documentation of your DBMS vendor.


File: relnotes.info,  Node: ODBC on Mac OS X,  Next: ODBC on Linux,  Prev: ODBC on MS Windows,  Up: ODBC Notes

11.2 ODBC on Mac OS X
=====================

Parts of ODBC are a standard component of Mac OS X. In current versions
of Mac OS X you also need to install additional iODBC components, from
<http://www.iodbc.org/>, see <https://sicstus.sics.se/> for details.

   You also need to install the DBMS specific ODBC drivers.  Please
refer to the ODBC documentation for Mac OS X, and the ODBC documentation
of your DBMS vendor.


File: relnotes.info,  Node: ODBC on Linux,  Prev: ODBC on Mac OS X,  Up: ODBC Notes

11.3 ODBC on Linux
==================

On Linux, 'library(odbc)' is built with unixODBC. unixODBC is an
installable package on many Linux distributions, and can also be
downloaded from <http://www.unixodbc.org>.  The version differs between
platform, see <https://sicstus.sics.se/> for details.

   You will also need to install the DBMS specific ODBC drivers.


File: relnotes.info,  Node: The SICStus Prolog IDE,  Next: The Emacs Interface,  Prev: ODBC Notes,  Up: Top

12 The SICStus Prolog IDE (SPIDER)
**********************************

SICStus Prolog IDE, also known as SPIDER, is an Eclipse-based
development environment for SICStus with many powerful features.  SPIDER
is meant to eventually replace the Emacs interface and the Windows
'spwin.exe' program as the main development environment for SICStus
Prolog.  SPIDER was initially made available with release 4.1.0.  *Note
SICStus Prolog IDE: (sicstus)SPIDER. for more information and links.


File: relnotes.info,  Node: The Emacs Interface,  Next: Revision History,  Prev: The SICStus Prolog IDE,  Up: Top

13 The Emacs Interface
**********************

The Emacs Interface was originally developed for GNU Emacs 19.34 and is
presently being maintained using GNU Emacs.  For best performance and
compatibility and to enable all features we recommend that the latest
versions of GNU Emacs be used.  For information on obtaining GNU Emacs;
see <https://www.gnu.org/software/emacs/>.

   *Please note:* The SPIDER IDE (*note The SICStus Prolog IDE::) is
much more powerful than the Emacs Interface.

* Menu:

* Emacs Installation:: Emacs Installation


File: relnotes.info,  Node: Emacs Installation,  Up: The Emacs Interface

13.1 Installation
=================

The Emacs interface is distributed with SICStus and installed by
default.  The default installation location for the Emacs files is
'<prefix>/lib/sicstus-4.7.0/emacs/' on UNIX platforms and
'C:\Program Files\SICStus Prolog 4.7.0\emacs\' under Windows.

   For maximum performance the Emacs Lisp files (extension '.el') should
be compiled.  This, completely optional step, can be done from within
Emacs with the command 'M-x byte-compile-file'.  *Note Installation:
(sicstus)Installation.:

   The easiest way to configure the Emacs interface is to load the file
'sicstus_emacs_init.el' from your '.emacs' file.  It will find the
SICStus executable and do all initialization needed to use the SICStus
Emacs interface.

* Menu:

* Installing On-Line Documentation:: Installing On-Line Documentation


File: relnotes.info,  Node: Installing On-Line Documentation,  Up: Emacs Installation

13.1.1 Installing On-Line Documentation
---------------------------------------

It is possible to look up the documentation for any built-in or library
predicate from within Emacs (using 'C-c ?' or the menu).  For this to
work, Emacs must be told about the location of the 'info'-files that
make up the documentation.

   If you load the file 'sicstus_emacs_init.el' from your '.emacs' file,
then Emacs should be able to find the SICStus documentation
automatically; *note Installation: (sicstus)Installation.:


File: relnotes.info,  Node: Revision History,  Next: Generic Limitations,  Prev: The Emacs Interface,  Up: Top

14 Revision History
*******************

This chapter summarizes the changes in release 4 wrt. previous SICStus
Prolog releases as well as changes introduced by patch releases.

* Menu:

* What Is New In Release 4::                What Is New In Release 4
* Guide to Porting Code from Release 3::    Guide to Porting Code from Release 3
* Limitations in the Current Release::      Limitations in the Current Release
* 4.0.1 Changes::                           Changes Introduced in Version 4.0.1
* 4.0.2 Changes::                           Changes Introduced in Version 4.0.2
* 4.0.3 Changes::                           Changes Introduced in Version 4.0.3
* 4.0.4 Changes::                           Changes Introduced in Version 4.0.4
* 4.0.5 Changes::                           Changes Introduced in Version 4.0.5
* 4.0.6 Changes::                           Changes Introduced in Version 4.0.6
* 4.0.7 Changes::                           Changes Introduced in Version 4.0.7
* 4.0.8 Changes::                           Changes Introduced in Version 4.0.8
* 4.1.0 Changes::                           Changes Introduced in Version 4.1.0
* 4.1.1 Changes::                           Changes Introduced in Version 4.1.1
* 4.1.2 Changes::                           Changes Introduced in Version 4.1.2
* 4.1.3 Changes::                           Changes Introduced in Version 4.1.3
* 4.2.0 Changes::                           Changes Introduced in Version 4.2.0
* 4.2.1 Changes::                           Changes Introduced in Version 4.2.1
* 4.2.2 Changes::                           Changes Introduced in Version 4.2.2
* 4.2.3 Changes::                           Changes Introduced in Version 4.2.3
* 4.3.0 Changes::                           Changes Introduced in Version 4.3.0
* 4.3.1 Changes::                           Changes Introduced in Version 4.3.1
* 4.3.2 Changes::                           Changes Introduced in Version 4.3.2
* 4.3.3 Changes::                           Changes Introduced in Version 4.3.3
* 4.3.4 Changes::                           Withdrawn Version 4.3.4
* 4.3.5 Changes::                           Changes Introduced in Version 4.3.5
* 4.4.0 Changes::                           Changes Introduced in Version 4.4.0
* 4.4.1 Changes::                           Changes Introduced in Version 4.4.1
* 4.5.0 Changes::                           Changes Introduced in Version 4.5.0
* 4.5.1 Changes::                           Changes Introduced in Version 4.5.1
* 4.6.0 Changes::                           Changes Introduced in Version 4.6.0
* 4.7.0 Changes::                           Changes Introduced in Version 4.7.0


File: relnotes.info,  Node: What Is New In Release 4,  Next: Guide to Porting Code from Release 3,  Up: Revision History

14.1 What Is New In Release 4
=============================

* Menu:

* Virtual Machine:: Virtual Machine
* Prolog Language:: Prolog Language
* Library Modules:: Library Modules
* Input-Output System:: Input-Output System
* Foreign Language APIs:: Foreign Language APIs


File: relnotes.info,  Node: Virtual Machine,  Next: Prolog Language,  Up: What Is New In Release 4

14.1.1 Virtual Machine
----------------------

   * The internal representation of Prolog terms and code has been
     redesigned, resulting in code that runs up to twice as fast as in
     release 3.
   * Certain memory limitations that existed in release 3 have been
     dropped.  All available virtual memory can be used without any
     limitations imposed by SICStus Prolog.
   * The limitations on "temporary" and "permanent" variables for
     compiled clauses have been dropped.  There is no size limit on
     compiled clauses.
   * The number of available atoms is four times larger than in release
     3 (1M atoms are available on 32-bit platforms).
   * The range of small integers is eight times larger than in release
     3.  Although the size of integers is unbounded, small integers are
     handled more efficiently than other numbers.
   * Multifile predicates are compiled by default; in release 3, they
     could not be compiled.
   * Native code compilation has been dropped.  *Update:* JIT, a
     different variant of native code compilation, was added in release
     4.3.0.
   * Execution profiling is available for compiled as well as
     interpreted code.  The profiling data accessible by
     'profile_data/1' and 'library(gauge)' is more precise.  Some of the
     choices of release 3 have been dropped.
   * Execution profiling has been generalized to support coverage
     analysis for compiled as well as interpreted code.


File: relnotes.info,  Node: Prolog Language,  Next: Library Modules,  Prev: Virtual Machine,  Up: What Is New In Release 4

14.1.2 Prolog Language
----------------------

14.1.2.1 Single Language Mode
.............................

Release 3 had the notion of multiple language modes: 'iso' and
'sicstus'.  Release 4 does not have this notion.  The syntax and
semantics of the Prolog language correspond to the previous 'iso'
language mode.

14.1.2.2 DCG Notation
.....................

The exact rules for translating DCG rules to plain Prolog clauses have
not been laid down in a standard, but there is a broad consensus in the
Prolog community about what they should mean.  One of the guiding
principles is that the translation should be steadfast, in particular
that the translated code should always treat its last argument as an
output argument and not use it "too early".  In some cases, a
non-steadfast translation was produced in release 3.  This has been
corrected in release 4.

14.1.2.3 Asserting Terms with Attributed Variables
..................................................

In release 3, terms containing attributed variables and blocked goals
could be asserted, copied, gathered as solutions to 'findall/3' and
friends, and raised as exceptions.  The copy would contain new
attributed variables with the attributes copied.  This operation could
be very expensive, could yield unexpected results and was not always
safe e.g. in the context of CLPFD constraints.  In release 4, the
semantics of this operation has changed: in the copy, an attributed
variable is simply replaced by a plain, brand new variable.  Of course,
if the same attributed variable occurs more than once, the same plain
variable will occur in the corresponding places in the copy.  If the
attributes are relevant, then the program can obtain them by using the
new built-in predicate 'copy_term/3' described below.

14.1.2.4 Arithmetic
...................

The infix operator '#' (bitwise exclusive or) has been renamed to '\'.

14.1.2.5 Syntax
...............

Atoms can now contain the <NUL> character, i.e. character code zero.  It
is classified as whitespace and must therefore be entered using escapes.
As an example ''a\0\a'' is a three character atom containing two 'a's
separated by a <NUL>.

   Internally, atom names and other encoded strings, use the
non-shortest form '0xC0 0x80' to encode <NUL>.  This is similar to how
<NUL> is handled by Tcl/Tk and Java.

14.1.2.6 Prolog Flags
.....................

The 'language' and 'wcx' Prolog flag have been dropped.  The
'profiledcode' value of the 'compiling' Prolog flag has been dropped.
Several new Prolog flags have been added.  *Note Prolog Flags:
(sicstus)ref-lps-flg.

14.1.2.7 Stream Properties
..........................

The 'wcx' property has been dropped.  Several new stream properties have
been added.  *Note 'stream_property/2':
(sicstus)mpg-ref-stream_property.

14.1.2.8 Statistics Keywords
............................

Several new statistics keywords have been added.  *Note
'statistics/[0,1]': (sicstus)mpg-ref-statistics.

14.1.2.9 Built-In Predicates
............................

The set of built-in predicates has changed slightly.  The following
predicates have been removed:

''C'/3'
     This was used in the Prolog translation of DCG rules.  It could
     trivially be replaced by unifications and served no other
     reasonable purpose.

'get0/[1,2]'
'put/[1,2]'
     These used to have an overloaded semantics meaning one thing on
     binary streams and another thing on text streams.  They have been
     subsumed by their ISO counterparts.

'get/[1,2]'
'tab/[1,2]'
'skip/[1,2]'
     Although these do not have ISO counterparts, they have been removed
     for being in the spirit of 'get0/[1,2]' and 'put/[1,2]'.  We have
     provided 'skip_char/[1,2]', 'skip_code/[1,2]', and
     'skip_byte/[1,2]' as an ISO style replacement for 'skip/[1,2]'.

'ttyget0/1'
'ttyget/1'
'ttynl/0'
'ttyput/1'
'ttyskip/1'
'ttytab/1'
'ttyflush/0'
     These used to exist as shorthands for the respective predicate with
     an additional 'user' argument.  In most cases, the "respective
     predicate" is one of the non-ISO style predicate mentioned above,
     so there was no point in keeping the shorthand.

'fileerrors/0'
'nofileerrors/0'
     These used to exist as shorthands for 'set_prolog_flag/2' with
     specific arguments, and so can be trivially replaced.

'call_residue/2'
     Dropped because it was not possible to ensure the correct behavior
     in all circumstances, it relied heavily on copying terms with
     attributed variables, and it was not needed by any library module.
     It has been replaced by a similar predicate, 'call_residue_vars/2',
     which should suffice in most cases where 'call_residue/2' was used;
     see below.

'undo/1'
     Dropped because it was not possible to ensure the correct behavior
     in all circumstances.  Users that know what they are doing can
     still call the unsupported predicate 'prolog:undo/1'.  The argument
     should have a module prefix.

'help/0'
'version/0'
'version/1'
     These predicates, managing and displaying messages, can be easily
     emulated by feaures of the message system.

'fcompile/1'
'load/1'
     These predicates used to compile Prolog source code into '.ql'
     files, and load such files.  '.ql' files serve a purpose when
     boot-strapping the Prolog system, but offer no advantages over
     '.po' files, the Prolog object code format used by other built-in
     predicates.

'load_foreign_files/2'
     This predicate provided a shorthand for building and loading a
     temporary foreign resource.  Working with foreign resources is
     straightforward, and so the shorthand was dropped.

'require/1'
     This predicate provided a shorthand for locating and loading
     library predicates.  This was originally introduced for a
     compatibility reason that is now obsolete.  It is straightforward
     to provide the necessary ':- use_module/2' directives, and so the
     shorthand was dropped.

'profile_data/4'
'profile_reset/1'
     As of release 4.2, the execution profiling technology has been
     re-engineered, eliminating the need to specially instrument code
     before it could be profiled.  The new scheme also keeps track of
     the number of calls per caller-callee pair.  Execution profiling is
     available for compiled as well as interpreted code.  These two
     predicates have been replaced by a small number of new ones.

   The following predicates have been added:

'call/N'
     Generalizes 'call/1'.  For example, 'call(p(1,2), a, b)' is
     equivalent to 'call(p(1,2, a, b))'.

'skip_char/[1,2]'
'skip_code/[1,2]'
'skip_byte/[1,2]'
     ISO style replacements for the non-ISO style 'skip/[1,2]'.

'call_residue_vars/2'
     Called as follows:

          call_residue_vars(:GOAL, -VARS)

     Executes the procedure call GOAL, unifying VARS with the list of
     residual variables that have blocked goals or attributes attached
     to them.  *Please note:* behaves differently from 'call_residue/2'
     of release 3.

'copy_term/3'
     Called as follows:

          copy_term(+TERM, -COPY, -BODY)

     Unifies COPY with a copy of TERM in which all variables have been
     replaced by brand new variables, and all mutables by brand new
     mutables.  If TERM contains variables with goals blocked on them,
     or variables with attributes that can be interpreted as a goal
     (*note 'library(atts)': (sicstus)lib-atts.), then BODY is unified
     with the conjunction of such goals.  If no such goals are present,
     then BODY is unified with the atom 'true'.  The idea is that
     executing BODY will reinstate blocked goals and attributes on the
     variables in COPY equivalent to those on the variables in TERM.

'profile_reset/0'
'profile_data/1'
'print_profile/[0,1]'
'coverage_data/1'
'print_coverage/[0,1]'
     As of release 4.2, the execution profiling technology has been
     re-engineered, eliminating the need to specially instrument code
     before it could be profiled.  Execution profiling is available for
     compiled as well as interpreted code.  It has been generalized to
     support coverage analysis for compiled as well as interpreted code.
     The new scheme also keeps track of the number of calls per
     caller-callee pair.  These are the relevant new built-in
     predicates.

   Some predicates have been changed slightly; in most cases, this
affects predicates that take a list of options:

'[F1,F2,...]'

     This is now a short-hand for 'load_files([F1,F2,...])'.

'is_mutable/1'

     The predicate 'is_mutable/1' has been renamed to 'mutable/1', in
     analogy with 'integer/1', 'atom/1' etc.

'module/1'

     The predicate 'module/1' has been renamed to 'set_module/1', to
     avoid possible confusion with the 'module/2' declaration.

'format/[2,3]'

     For the predicate 'format/[2,3]', the semantics of the '~@' spec
     has changed slightly: the goal ARG is called as if by '\+ \+ ARG',
     i.e. any bindings made by the goal are lost.

'close/2'

     Takes new options:

     'direction/1'
          Specifies which directions to close.

'open/4'

     The 'wcx/1' option has been dropped.  Takes several new options.
     *Note 'open/4': (sicstus)mpg-ref-open.

'absolute_file_name/[2,3]'

     The 'ignore_underscores/1' option has been dropped.  The
     'file_type/1' option value 'ql' has been dropped, whereas the
     option value 'executable' is new.  The 'access/1' option values
     'execute', 'executable' and 'search' are new.  The 'glob/1' option
     is new, allowing to match file names against a pattern.  If
     available, then the load context directory
     ('prolog_load_context/2') will be used as default directory.

'load_files/2'

     The 'load_type/1' option value 'ql' has been dropped.
     'encoding_signature/1', 'encoding/1', subsuming the 'wcx/1' option
     of release 3, and 'eol/1', are new options, corresponding to the
     respective stream properties.

'write_term/3'

     The 'quoted_charset/1' option is new, reflecting the value of the
     Prolog flag with the same name.

'halt/1'

     The predicate 'halt/1' now raises an internal exception like
     'halt/0'.  This gives surrounding Prolog and C code an opportunity
     to perform cleanup.

'append/3'
'member/2'
'memberchk/2'
     These are now built-in, they used to reside in 'library(lists)'.

14.1.2.10 Hook Predicates
.........................

The hook 'user:term_expansion/[2,4]' is replaced by the hook:

     user:term_expansion(Term1, Layout1, Tokens,
                         Term2, Layout2, [Token|Tokens]).

   The purpose of the new argument TOKENS is to support multiple,
independent expansion rules.  The purpose of the arguments LAYOUT1 and
LAYOUT2 is to support source-linked debugging of term-expanded code.
Each expansion rule should have its unique identifying token TOKEN.

   The hook 'user:goal_expansion/3' is replaced by the following
per-module hook:

     M:goal_expansion(Term1, Layout1,
                      Module, Term2, Layout2).

   Typically, MODULE has imported the predicate TERM1 from module M.
The purpose of the arguments LAYOUT1 and LAYOUT2 is to support
source-linked debugging of goal-expanded code.


File: relnotes.info,  Node: Library Modules,  Next: Input-Output System,  Prev: Prolog Language,  Up: What Is New In Release 4

14.1.3 Library Modules
----------------------

There is no consensus for a core library, portable across Prolog
systems, let alone a standard for such a library.  Since release 3, SICS
has acquired Quintus Prolog, which has a rather rich library.  For
release 4, we have decided to make this asset be available to the
SICStus community by providing a library that is a merger of the
previous SICStus and Quintus libraries, which already overlap
significantly.

   The User's Manual documents the library of release 4.  For the
purposes of aiding code transition to release 4, the following is a list
of the release 3 library modules, and their fate in release 4.  See also
*note Guide to Porting Code from Release 3::.

'atts'
'comclient'
'fdbg'
'gauge'
'heaps'
'linda/client'
'linda/server'
'pillow'
'prologbeans'
'tcltk'
'timeout'
'trees'
'wgraphs'
'xml'
     As in release 3.

'arrays'
     The native release 4 counterpart is called 'library(logarr)'.  Also
     available is a deprecated compatibility module 'library(arrays3)'.

'assoc'
     The native release 4 counterpart is called 'library(avl)',
     reflecting the abstract data type, AVL trees, and with a modified,
     richer API. Also available is a deprecated compatibility module
     'library(assoc3)'.

'bdb'
     As in release 3, but uses the default Berkeley DB hash function, so
     all of the standard Berkeley DB utilities should now work.

'charsio'
     Called 'library(codesio)' in release 4.  Likewise, the syllable
     'chars' has been renamed to 'codes' in predicate names.

'clpb'
'clpq'
'clpr'
     As in release 3, unsupported.

'clpfd'
     As in release 3, plus the following additions and changes:

     'automaton/8'
          is a new constraint capturing any constraint whose checker of
          ground instances can be expressed as a finite automaton.
     'minimum/2'
     'maximum/2'
          are new constraints, constraining a value to be the minimum
          (maximum) of a list of values.
     'nvalue/2'
          is a new constraint, constraining the number of distinct
          values taken by a list of values.
     'cumulative/[1,2]'
          provides a unified interface, subsuming 'serialized/[2,3]' and
          'cumulative/[4,5]'.
     'table/[2,3]'
          defines an n-ary constraint by extension, subsuming
          'relation/3'.
     'all_different/[1,2]'
     'all_distinct/[1,2]'
          Arguments can have unbounded domains.
     'scalar_product/[4,5]'
          can optionally be told to maintain arc-consistency.  This
          functionality subsumes 'knapsack/3'.
     'global_cardinality/[2,3]'
          can optionally be told to use a simple algorithm.  This
          functionality subsumes 'count/4'.
     'fd_copy_term/3'
          is gone.  Subsumed by built-in 'copy_term/3'.

'jasper'
     The Jasper module is available in the current release.  An
     alternative for Java users is PrologBeans.  The latter is the
     recommended method for interfacing Java with SICStus.  Jasper
     should only be used when PrologBeans is insufficient.

'lists'
     The native release 4 counterpart has a modified, richer API. Also
     available is a deprecated compatibility module 'library(lists3)'.

'ordsets'
     As in release 3, plus several new predicates.

'queues'
     The native release 4 counterpart has a modified, richer API. Also
     available is a deprecated compatibility module 'library(queues3)'.

'random'
     The native release 4 counterpart has a modified, richer API. Also
     available is a deprecated compatibility module 'library(random3)'.
     *Please note:* The random number generator state is slightly
     different from the one in release 3.

'sockets'
     The new predicate 'socket_client_open/3' subsumes 'socket/2' and
     'socket_connect/3'.

     'socket_server_open/[2,3]' subsumes 'socket/2', 'socket_bind/2' and
     'socket_listen/2'.

     'socket_select/7' can wait for any kind of stream, not just socket
     streams.  'socket_select/7' waits until one _unit_ (character for
     text streams, byte for binary streams) can be transferred.

     'socket_select/7' can wait for streams ready to write.

     'socket_select/7' does not create streams, you need to explicitly
     use 'socket_server_accept/4'.

     Socket streams are binary by default.

     Blocking socket operations can be interrupted on both UNIX and
     Windows.

     'library(sockets)' should work with IPv6 (in addition to IPv4 and
     'AF_UNIX').

'system'
     Operations on files and directories have been moved to its own
     module, 'library(file_systems)'.  Process primitives have been
     redesigned and moved to a new module, 'library(process)'.  The
     predicates for creating temporary files, 'mktemp/2' and 'tmpnam/1',
     have been removed.  They used C library functionality that is
     broken by design and insecure.  Instead, to create and open a
     temporary file use something like 'open(temp('foo'), write, S,
     [if_exists(generate_unique_name)])', possibly together with
     'stream_property(S, file_name(Path))' if you need to know the path
     to the generated file name.

     The (little) remaining functionality is largely as in release 3.
     Also available is a deprecated compatibility module
     'library(system3)'.

'terms'
     As in release 3, plus several new predicates.  'term_hash/2' is not
     guaranteed to compute the same hash values as in release 3.

'ugraphs'
     As in release 3, plus a couple of deletions.

'objects'
     Replaced by the Quintus Prolog flavor of 'library(objects)'.

'chr'
     A re-implementation of 'library(chr)', based on the Leuven
     implementation.

'flinkage'
'spaceout'
     Not present in release 4.

'vbsp'
     Not available in the current release. Visual Basic .NET and other
     .NET languages can use PrologBeans .NET.

   The following is a list of library modules that are new in release 4.

'aggregate'
     provides an aggregation operator for data-base-style queries.

'assoc'
     uses unbalanced binary trees to implement "association lists", i.e.
     extendable finite mappings from terms to terms.

'bags'
     defines operations on bags, or multisets

'between'
     provides some means of generating integers.

'file_systems'
     accesses files and directories.

'objects'
     provides a package for object-oriented programming, and can be
     regarded as a high-level alternative to 'library(structs)'.

'plunit'
     Unit test harness.

'process'
     Creating, killing, releasing, and waiting on processes.

'rem'
     provides Rem's algorithm for maintaining equivalence classes.

'samsort'
     provides generic sorting.

'sets'
     defines operations on sets represented as lists with the elements
     unordered.

'structs'
     provides access to C data structures, and can be regarded as a
     low-level alternative to 'library(objects)'.

'types'
     Provides type checking.

'varnumbers'
     An inverse of 'numbervars/3'.


File: relnotes.info,  Node: Input-Output System,  Next: Foreign Language APIs,  Prev: Library Modules,  Up: What Is New In Release 4

14.1.4 Input-Output System
--------------------------

The internals of the I/O subsystem have been completely redesigned.  The
new version should be faster while at the same time providing more
functionality and more consistent behavior between operating systems and
between stream types.

   The semantics of character codes has been fixed as (a superset of)
Unicode.  Redefining the meaning of character codes is no longer
supported.

   New features and changes to the SICStus streams ('SP_stream')
include:

   * Streams are binary or text also at the lowest level, e.g. in the C
     API, and there are separate operations for performing I/O of bytes
     and characters.

   * Streams have a layered design.  This makes it possible to add
     character set translation and other transformations (compression,
     encryption, automatic character set detection, ...) to any stream.

   * All streams provide non-blocking operations and are interruptible,
     e.g. with '^C' ('SIGINT').  This is also true for file streams and
     under Windows.

   * Subject to OS limitations, file names can use Unicode and be of
     arbitrary length.  In particular, under Windows, the Unicode API is
     used for all operations.

   * Limits on file size, file time stamps etc have been removed.

   * Error handling has been simplified and made more consistent.  In
     the C API all I/O operations return an error code from a rich set
     of error codes.  Errors during write and close operations are no
     longer ignored.

   * It is possible to wait for I/O ready (both for read and write) on
     any type of stream.  This works for all platforms, including
     Windows.  Select operations wait for the appropriate item type,
     e.g. until a whole (possibly multi-byte) character can be
     transferred on a text stream.

   Other minor changes:

   * Now 'byte_count/2' can be called only on binary streams.
   * 'at_end_of_stream/[0,1]' never blocks.  Instead it will fail, i.e.
     behave as if the stream is not at its end, if the operation would
     otherwise block.  *Note 'at_end_of_stream/[0,1]':
     (sicstus)mpg-ref-at_end_of_stream.


File: relnotes.info,  Node: Foreign Language APIs,  Prev: Input-Output System,  Up: What Is New In Release 4

14.1.5 Foreign Language APIs
----------------------------

14.1.5.1 Foreign Language Interface
...................................

The conversion specifier (in 'foreign/[2,3]' facts) 'string(N)' has been
dropped.

   The conversion specifier 'chars' has been renamed to 'codes', in
analogy with the built-in predicate 'atom_codes/2', the second argument
of which is a list of character codes.

   The C header generated by 'splfr' from the 'foreign/[2,3]' facts now
uses the 'const' attribute where appropriate.

   Foreign resources are no longer unloaded by 'save_program/[1,2]'.
For this reason, the deinit function of a foreign resource is no longer
called when saving a program so 'SP_WHEN_SAVE' has been removed.

14.1.5.2 C API Functions
........................

Many functions in the C API has been changed or removed, especially
those related to OS and I/O operations.  There are also a number of new
C API functions.

*Old API*                            *Replaced by*
                                     
'SP_make_stream',                    'SP_create_stream'
'SP_make_stream_context'             
'SP_set_tty'                         'SP_CREATE_STREAM_OPTION_INTERACTIVE'
                                     
'SP_fgetc'                           'SP_get_byte', 'SP_get_code'
                                     
'SP_fputc'                           'SP_put_byte', 'SP_put_code'
                                     
'SP_fputs'                           'SP_put_codes',
                                     'SP_put_encoded_string'
                                     
'SP_fflush'                          'SP_flush_output'
                                     
'SP_chdir'                           'SP_set_current_dir'
                                     
'SP_getcwd'                          'SP_get_current_dir'
                                     
'SP_set_wcx_hooks'                   Gone
                                     
'SP_wcx_getc', 'SP_wcx_putc'         Gone
                                     
'SP_to_os', 'SP_from_os'             Gone
                                     
'SP_put_number_chars'                'SP_put_number_codes'
                                     
'SP_get_number_chars'                'SP_get_number_codes'
                                     

   Other new functions include:

'SP_get_stream_user_data'
'SP_get_stream_counts'
'SP_put_bytes'
'SP_fopen'
'SP_unget_code'
'SP_unget_byte'

   Also, many functions take new or changed parameters.

14.1.5.3 Java API
.................

   * The PrologBeans API has been extensively revised.  See the
     PrologBeans HTML (javadoc) documentation.

   * In the initial SICStus 4 release, PrologBeans was built with Java
     1.5.


File: relnotes.info,  Node: Guide to Porting Code from Release 3,  Next: Limitations in the Current Release,  Prev: What Is New In Release 4,  Up: Revision History

14.2 Guide to Porting Code from Release 3
=========================================

Release 4 does not provide a mode in which it is 100% compatible with
earlier releases.  However, in addition to what is said in *note What Is
New In Release 4:: (read that first!), this section provides further
guidelines for migrating Prolog code from release 3 to release 4.

  1. First of all, make sure that your code runs in ISO execution mode.
     In release 3, the command line option '--iso' can be used.

  2. A number of built-in predicates have been dropped.  They are listed
     in the table below, along with their approximate substitutes.
     Refer to the documentation for each case.

     *Dropped built-in*                   *Replaced by*
                                          
     'get0/[1,2]', 'get/[1,2]'            'get_code/[1,2]', 'get_byte/[1,2]'
                                          
     'ttyget0/1', 'ttyget/1'              'get_code/2', 'get_byte/2'
                                          
     'put/[1,2]', 'tab/[1,2]'             'put_code/[1,2]', 'put_byte/[1,2]'
                                          
     'ttyput/1', 'ttytab/1'               'put_code/2', 'put_byte/2'
                                          
     'skip/[1,2]'                         'skip_code/[1,2]',
                                          'skip_byte/[1,2]'
                                          
     'ttyskip/1'                          'skip_code/2', 'skip_byte/2'
                                          
     'ttynl/0'                            'nl/1'
                                          
     'ttyflush/0'                         'flush_output/1'
                                          
     'fileerrors/0', 'nofileerrors/0'     'set_prolog_flag/2'
                                          
     ''C'/3'                              unification
                                          
     'call_residue/2'                     'call_residue_vars/2'
                                          
     'undo/1'                             'prolog:undo/1'
                                          
     'help/0'                             the message system
                                          
     'version/0'                          the message system
                                          
     'version/1'                          the message system
                                          
     'fcompile/1'                         'save_files/2'
                                          
     'load/1'                             'load_files/2'
                                          
     'load_foreign_files/2'               'splfr' +
                                          'load_foreign_resource/1'
                                          
     'require/1'                          'use_module/2'
                                          
     'is_mutable/1'                       'mutable/1'
                                          
     'module/1'                           'set_module/1'

  3. The hook predicates 'user:term_expansion/[2,4]' and
     'user:term_expansion/3' are now called 'user:term_expansion/6' and
     'MODULE:term_expansion/5' and have a modified API; see *note Term
     and Goal Expansion: (sicstus)ref-lod-exp.

  4. The set of library modules has been enriched by incorporating a
     subset of the Quintus Prolog library modules that we have deemed
     useful.

     'library(clpb)', 'library(clpq)' and 'library(clpr)' are provided
     but not supported.  'library(flinkage)' and 'library(spaceout)' are
     not included in release 4.  'library(objects)' has been replaced by
     its Quintus counterpart, with a completely different API.

     The following table lists the affected SICStus 3 library modules.

     *Affected module*             *Closest equivalent*          *Comment*
                                                                 
     'arrays'                      'arrays3'                     a
                                                                 
     'assoc'                       'assoc3'                      b
                                                                 
     'charsio'                     'codesio'                     c
                                                                 
     'clpfd'                       'clpfd'                       d
                                                                 
     'lists'                       'lists3'                      e
                                                                 
     'queues'                      'queues3'                     f
                                                                 
     'random'                      'random3'                     g
                                                                 
     'sockets'                     'sockets'                     d
                                                                 
     'system'                      'system3'                     h
                                                                 
     'terms'                       'terms'                       d
                                                                 

     Comments to the table:

       a. 'library(arrays3)' is a code migration library module; the
          long-term solution is to use 'library(logarr)' instead.

       b. 'library(assoc3)' is a code migration library module; the
          long-term solution is to use 'library(avl)' instead.

       c. The syllable 'chars' has been changed to 'codes' throughout.

       d. Several API changes; see the documentation.

       e. 'library(lists3)' is a code migration library module; the
          long-term solution is to use 'library(lists)' instead.

       f. 'library(queues3)' is a code migration library module; the
          long-term solution is to use 'library(queues)' instead.

       g. 'library(random3)' is a code migration library module; the
          long-term solution is to use 'library(random)' instead.

       h. 'library(system3)' is a code migration library module; the
          long-term solution is to use 'library(system)',
          'library(file_systems)' and 'library(process)' instead.

          One difference between 'library(system3)' and the original
          release 3 version is that 'exec/3' returns a process
          reference, a compound term, instead of an integer process
          identifier.


File: relnotes.info,  Node: Limitations in the Current Release,  Next: 4.0.1 Changes,  Prev: Guide to Porting Code from Release 3,  Up: Revision History

14.3 Limitations in the Current Release
=======================================

This section lists features that are missing or incompletely implemented
in the current release of SICStus Prolog (SICStus Prolog 4.7.0) but that
may appear in future releases.  Please let us know what features are
important to you!

   'library(tcltk)': There is no way to pass non-Latin 1 characters from
Tcl/Tk to Prolog.  The Tcl/Tk Terminal is not supported.

   'library(spaceout)': not supported; see *note Library Modules::.

   The Visual Basic 6 module ('vbsp') is not supported; see *note
Library Modules::.

   The Windows GUI 'spwin.exe' does not support full Unicode.  The
console version 'sicstus.exe' fully supports Unicode when run from a
console window or from within SPIDER or Emacs.

   The Emacs mode may not work reliably when passing Prolog code between
Emacs and SICStus if the code is not written using Latin 1.


File: relnotes.info,  Node: 4.0.1 Changes,  Next: 4.0.2 Changes,  Prev: Limitations in the Current Release,  Up: Revision History

14.4 Changes Introduced in Version 4.0.1
========================================

* Menu:

* 4.0.1 New Features::         New Features
* 4.0.1 Bugs Fixed::           Bugs Fixed
* 4.0.1 Other Changes::        Other Changes
* 4.0.1 Known Issues::         Known Issues


File: relnotes.info,  Node: 4.0.1 New Features,  Next: 4.0.1 Bugs Fixed,  Up: 4.0.1 Changes

14.4.1 New Features
-------------------


File: relnotes.info,  Node: 4.0.1 Bugs Fixed,  Next: 4.0.1 Other Changes,  Prev: 4.0.1 New Features,  Up: 4.0.1 Changes

14.4.2 Bugs Fixed
-----------------

   * Spurious 'SPIO_E_ERROR' exceptions when interrupting Prolog.  Most
     often seen when using 'library(timeout)' or when using '^C' at the
     top-level prompt.
   * Inconsistent error messages if the license information was missing
     or incomplete.
   * 'library(fdbg)': inconsistent trace messages for labeling steps.
   * 'library(clpfd)': error handling for user-defined global constraint
     actions.
   * Source info of interpreted clauses.
   * Memory management issue with garbage collection + pending unblocked
     goals
   * CHR debugging and tracing did not work.


File: relnotes.info,  Node: 4.0.1 Other Changes,  Next: 4.0.1 Known Issues,  Prev: 4.0.1 Bugs Fixed,  Up: 4.0.1 Changes

14.4.3 Other Changes
--------------------

   * *Compatibility issue*: The two Latin 1 character codes '0x00AA'
     ('FEMININE ORDINAL INDICATOR') and '0x00BA' ('MASCULINE ORDINAL
     INDICATOR') are now classified as lower case letters by the Prolog
     parser.  They used to be (incorrectly) classified as symbol chars.
     This may affect code that used any of these characters in unquoted
     atoms or functors.

     This change was made to align their classification with the Unicode
     standard.

   * Quoted atoms and strings can now contain any character sequence
     from Unicode 5.0 when reading, with some restrictions; see *note
     Syntax of Tokens as Character Strings: (sicstus)ref-syn-syn-tok.

   * Quoted atoms and strings are now by default written using a larger
     subset of Unicode than before.  See the documentation for the
     Prolog flag 'quoted_charset' (*note Prolog Flags:
     (sicstus)ref-lps-flg.).

   * Windows: All code is built with the security options '/GS',
     '/SAFESEH', '/NXCOMPAT'.

   * Corrected the documentation for 'SP_put_list_n_codes()'.

   * Now UTF-8 is used when communicating with the SICStus Prolog
     sub-process in versions of Emacs and XEmacs that supports it.


File: relnotes.info,  Node: 4.0.1 Known Issues,  Prev: 4.0.1 Other Changes,  Up: 4.0.1 Changes

14.4.4 Known Issues
-------------------

The following are known issues with this release of SICStus.  *Note
Limitations in the Current Release:: for more information about missing
or incomplete features in this release.

   * SICStus Prolog does not verify that Prolog text is in Unicode NFC
     format.

     When reading terms, SICStus Prolog currently does not verify that
     the input text contains valid Unicode 5.0 characters in Normal Form
     C. *Note Syntax of Tokens as Character Strings:
     (sicstus)ref-syn-syn-tok.

     This is not a problem as long as the input is in the proper format
     but it will allow some input that may be rejected or interpreted
     differently in a future version of SICStus Prolog.


File: relnotes.info,  Node: 4.0.2 Changes,  Next: 4.0.3 Changes,  Prev: 4.0.1 Changes,  Up: Revision History

14.5 Changes Introduced in Version 4.0.2
========================================

* Menu:

* 4.0.2 New Features::         New Features
* 4.0.2 Bugs Fixed::           Bugs Fixed
* 4.0.2 Other Changes::        Other Changes
* 4.0.2 Known Issues::         Known Issues


File: relnotes.info,  Node: 4.0.2 New Features,  Next: 4.0.2 Bugs Fixed,  Up: 4.0.2 Changes

14.5.1 New Features
-------------------

   * Added support for ISO-8859-2, a.k.a. Latin 2.

   * 'absolute_file_name/3': new option 'file_type(executable)' expands
     to 'extensions(['', '.exe'])' on Windows and to 'extensions([''])'
     on other systems.


File: relnotes.info,  Node: 4.0.2 Bugs Fixed,  Next: 4.0.2 Other Changes,  Prev: 4.0.2 New Features,  Up: 4.0.2 Changes

14.5.2 Bugs Fixed
-----------------

   * Memory manager: efficiency bug.
   * 'library(structs)': unsigned types, 64-bit issues.
   * PrologBeans: Lists of integers with element values above 255 broke
     the communication between Java and SICStus.
   * Closing a stream would sometimes hang due to a race condition on
     UNIX-like platforms.  This was most likely to happen on MacOS X.
   * 'set_stream_position/2' and 'seek/4' did not work on output
     streams.
   * Multiple issues with 'absolute_file_name/3'.

        - Option 'file_errors(fail)' would sometimes report permission
          errors ('SPIO_E_PERMISSION_ERROR') instead of silently
          failing.

        - Option 'file_errors(fail)' now fails instead of raising an
          exception for file name domain errors like malformed file
          names and too many symbolic links ('SPIO_E_INVALID_NAME').

        - Options 'access(execute)' and 'access(search)' now imply
          'access(exist)'.  This is similar to how 'access(read)' works.

        - The undocumented internal option 'access(directory)' was
          allowed.  Use 'file_type(directory)' instead.

   * 'library(process)': 'process_create/[2,3]' now skips non-executable
     file and non-files if the FILE-argument can expand to more than one
     file.  This is especially useful when using the symbolic name
     'path/1' to specify a file.
   * 'library(avl)': Bug in 'avl_delete/4'.
   * 'library(random)': Document and check validity of the random number
     generator state.  Bug in 'random_numlist/4'.
   * 'get_atts/2': Could fail incorrectly.
   * 'library(clpfd)': A memory management problem.  An integer overflow
     problem.  Propagation bug in 'case/[3,4]', affecting 'automaton/8'
     too.
   * A problem with shared subterms in copying, asserting, collecting
     and throwing terms.
   * The Prolog flag 'title' was truncated by 'spwin.exe' under Windows.

   * The 'spdet' utility did not automatically add '.pl' and '.pro'
     extensions to file name arguments.


File: relnotes.info,  Node: 4.0.2 Other Changes,  Next: 4.0.2 Known Issues,  Prev: 4.0.2 Bugs Fixed,  Up: 4.0.2 Changes

14.5.3 Other Changes
--------------------

   * 'library(clpfd)': minor efficiency issues.
   * The 'user_error' stream is always unbuffered, even when not
     attached to a terminal.
   * Improved detection of the 'executable' file property under Windows,
     e.g. in 'absolute_file_name/3' and 'process_create/[2,3]'.
   * The Prolog flag 'title' is now saved by 'set_prolog_flag(title,
     ...)' on all platforms.  It used to be ignored except under
     Windows.


File: relnotes.info,  Node: 4.0.2 Known Issues,  Prev: 4.0.2 Other Changes,  Up: 4.0.2 Changes

14.5.4 Known Issues
-------------------

The following are known issues with this release of SICStus.  *Note
Limitations in the Current Release:: for more information about missing
or incomplete features in this release.

   * SICStus Prolog does not verify that Prolog text is in Unicode NFC
     format.

     When reading terms, SICStus Prolog currently does not verify that
     the input text contains valid Unicode 5.0 characters in Normal Form
     C. *Note Syntax of Tokens as Character Strings:
     (sicstus)ref-syn-syn-tok.

     This is not a problem as long as the input is in the proper format
     but it will allow some input that may be rejected or interpreted
     differently in a future version of SICStus Prolog.


File: relnotes.info,  Node: 4.0.3 Changes,  Next: 4.0.4 Changes,  Prev: 4.0.2 Changes,  Up: Revision History

14.6 Changes Introduced in Version 4.0.3
========================================

* Menu:

* 4.0.3 New Features::         New Features
* 4.0.3 Bugs Fixed::           Bugs Fixed
* 4.0.3 Other Changes::        Other Changes
* 4.0.3 Known Issues::         Known Issues


File: relnotes.info,  Node: 4.0.3 New Features,  Next: 4.0.3 Bugs Fixed,  Up: 4.0.3 Changes

14.6.1 New Features
-------------------

   * The new Prolog flag 'legacy_char_classification' makes it possible
     to use full Unicode, e.g. Chinese characters, in unquoted atoms and
     variable names.  *Note Prolog Flags: (sicstus)ref-lps-flg.

   * The Prolog flag 'redefine_warnings' can take new values, and is no
     longer ignored in runtime systems.  *Note Prolog Flags:
     (sicstus)ref-lps-flg.

   * 'SP_load_sicstus_run_time()', and related functionality for loading
     multiple SICStus runtimes into a process, is now available.

   * Jasper Java interface ('library(jasper)') is now available.  Jasper
     is mainly for legacy code; PrologBeans is still the preferred
     method of calling Prolog from Java.

   * 'library(sockets)' now supports UNIX domain ('AF_UNIX') sockets on
     UNIX-like platforms.  The new predicate 'socket_server_open/3'
     allows some options when opening a server socket.

   * 'SP_set_argv()', a new C API function for setting the values
     returned by the 'argv' Prolog flag.  Similar to the 'argv' argument
     to 'SP_initialize()', but can report failure and can use locale
     information.

   * 'spld' and 'splfr': new command line options.  The new (POSIX)
     option '--' is treated the same as the older '-LD'.  New option
     '--conf VAR=VAL' to override variable VAR in the configuration
     file.  Option processing has been rewritten to be more robust and
     consistent.  *Note The Application Builder: (sicstus)The
     Application Builder.  and *note The Foreign Resource Linker:
     (sicstus)The Foreign Resource Linker.

   * 'sicstus' The new (POSIX) option '--' is a synonym for the old
     '-a'.


File: relnotes.info,  Node: 4.0.3 Bugs Fixed,  Next: 4.0.3 Other Changes,  Prev: 4.0.3 New Features,  Up: 4.0.3 Changes

14.6.2 Bugs Fixed
-----------------

   * 'trimcore/0' could lead to memory corruption.

   * 'append/3' "optimization" could cause garbage collector crash.

   * 'spld' and 'splfr': multiple '--cflag' options accumulate, as
     documented.

   * 'sockets:current_host/1' would fail on Windows 2000 with some
     network configurations.

   * 'process:process_release/1' did not work.

   * All process creation routines in 'library(system3)' now work when
     there are command line options in the command argument, as was
     intended.

   * 'file_systems:current_directory/2' was sensitive to load context
     when passed a relative path as its second argument.

   * The Windows GUI 'spwin.exe' command 'Save Transcript' now works and
     uses UTF-16 with BOM which can be read by most Windows programs and
     by recent Emacs and XEmacs.

   * The menu commands of the Windows GUI 'spwin.exe' no longer load
     foreign resources.  This prevents extra foreign resources from
     being recorded by 'save_program/[1,2]'.

   * 'library(chr)'
        - Multiple occurrences of the same answer constraint are no
          longer suppressed.
        - Error in compile-time error message.

   * 'library(clpfd)'
        - 'element/3' and 'cumulatives/[2,3]' could crash.
        - Bug in 'dom(X)+dom(Y)' in indexicals.
        - Structure sharing issues with 'fd_set/2' and 'in_set/2' in the
          global constraint API.
        - 'mod' and 'rem' are now available with the intended semantics.
        - Incorrect reification of arithmetic relations involving
          division, 'mod' and 'rem'.

   * Variables not transferred correctly in the PrologBeans process
     communication protocol.


File: relnotes.info,  Node: 4.0.3 Other Changes,  Next: 4.0.3 Known Issues,  Prev: 4.0.3 Bugs Fixed,  Up: 4.0.3 Changes

14.6.3 Other Changes
--------------------

   * Output to different interactive output streams, like 'user_output'
     and 'user_error', are now properly ordered.

   * If the standard OS streams cannot be used, then the SICStus runtime
     will use null streams instead of failing initialization.  Happened
     when started from recent Linux 'nohup' command.

   * Under UNIX, 'sicstus' now interprets command line arguments using
     locale information (the Windows version already did this).

   * saved states invoked as shell scripts will now use a version
     specific name for the sicstus executable, e.g., 'exec sicstus-4.0.3
     ...' instead of 'exec sicstus ...'.

   * The 'spld' tool now ignores the '--more-memory' option and no
     longer attempts to use a modified linker script on x86 Linux.

   * The 'splfr' tool no longer uses a fixed name for some temporary
     files, which prevented parallel make.


File: relnotes.info,  Node: 4.0.3 Known Issues,  Prev: 4.0.3 Other Changes,  Up: 4.0.3 Changes

14.6.4 Known Issues
-------------------

The following are known issues with this release of SICStus.  *Note
Limitations in the Current Release:: for more information about missing
or incomplete features in this release.

   * SICStus Prolog does not verify that Prolog text is in Unicode NFC
     format.

     When reading terms, SICStus Prolog currently does not verify that
     the input text contains valid Unicode 5.0 characters in Normal Form
     C. *Note Syntax of Tokens as Character Strings:
     (sicstus)ref-syn-syn-tok.

     This is not a problem as long as the input is in the proper format
     but it will allow some input that may be rejected or interpreted
     differently in a future version of SICStus Prolog.


File: relnotes.info,  Node: 4.0.4 Changes,  Next: 4.0.5 Changes,  Prev: 4.0.3 Changes,  Up: Revision History

14.7 Changes Introduced in Version 4.0.4
========================================

* Menu:

* 4.0.4 New Features::         New Features
* 4.0.4 Bugs Fixed::           Bugs Fixed
* 4.0.4 Other Changes::        Other Changes
* 4.0.4 Known Issues::         Known Issues


File: relnotes.info,  Node: 4.0.4 New Features,  Next: 4.0.4 Bugs Fixed,  Up: 4.0.4 Changes

14.7.1 New Features
-------------------


File: relnotes.info,  Node: 4.0.4 Bugs Fixed,  Next: 4.0.4 Other Changes,  Prev: 4.0.4 New Features,  Up: 4.0.4 Changes

14.7.2 Bugs Fixed
-----------------

   * On Windows the result of 'absolute_file_name/[2,3]' would contain
     backslash instead of forward slash if the absolute file name
     contained certain non-ASCII characters.  This bug also broke all
     directory listing functions in 'library(file_systems)', e.g.
     'file_systems:file_member_of_directory/[2,3,4]'.

   * A change in 4.0.3 caused 'system3:popen/3', 'system3:shell/[1,2]'
     and 'system3:system/[1,2]' to no longer work when the command
     string contains redirection and other special constructs.  These
     predicates now always invoke the system shell.

   * A change in 4.0.3 caused 'library(sockets)' to not accept a lone
     port number as an address.  A port number 'PORT' is now treated the
     same as 'inet('', PORT)', as in earlier releases.  This also broke
     'prologbeans:start/[0,1]' when no port was specified.

   * A few operators had non-ISO mode operator declarations.  This has
     been corrected to match the documentation, the ISO Prolog standard
     and the ISO language mode in SICStus Prolog 3.  *Note Built-in
     Operators: (sicstus)ref-syn-ops-bop.

     *Please note*: This is an incompatible change that may cause a
     Prolog program or data to be parsed differently (or not at all).
     However, in practice we expect this to affect little or no code.
     Data written using 'write_canonical/[1,2]' or similar will not be
     affected and will be read back correctly regardless of operator
     declarations.

     To preserve the old, incorrect, operator declarations, insert the
     following at the top of your Prolog files:

          :- op( 500,  fx,[+,-]).
          :- op( 300, xfx,[mod,rem]).

     To ensure that the new, correct, operator declarations are in
     effect also in releases predating 4.0.4, insert the following at
     the top of your Prolog files (*please note*: this documentation was
     updated after 4.0.4 to correct the associativity of '+', '-'):

          :- op( 200,  fy,[+,-]).
          :- op( 400, yfx,[mod,rem]).


File: relnotes.info,  Node: 4.0.4 Other Changes,  Next: 4.0.4 Known Issues,  Prev: 4.0.4 Bugs Fixed,  Up: 4.0.4 Changes

14.7.3 Other Changes
--------------------


File: relnotes.info,  Node: 4.0.4 Known Issues,  Prev: 4.0.4 Other Changes,  Up: 4.0.4 Changes

14.7.4 Known Issues
-------------------

The following are known issues with this release of SICStus.  *Note
Limitations in the Current Release:: for more information about missing
or incomplete features in this release.

   * SICStus Prolog does not verify that Prolog text is in Unicode NFC
     format.

     When reading terms, SICStus Prolog currently does not verify that
     the input text contains valid Unicode 5.0 characters in Normal Form
     C. *Note Syntax of Tokens as Character Strings:
     (sicstus)ref-syn-syn-tok.

     This is not a problem as long as the input is in the proper format
     but it will allow some input that may be rejected or interpreted
     differently in a future version of SICStus Prolog.


File: relnotes.info,  Node: 4.0.5 Changes,  Next: 4.0.6 Changes,  Prev: 4.0.4 Changes,  Up: Revision History

14.8 Changes Introduced in Version 4.0.5
========================================

* Menu:

* 4.0.5 New Features::         New Features
* 4.0.5 Bugs Fixed::           Bugs Fixed
* 4.0.5 Other Changes::        Other Changes
* 4.0.5 Known Issues::         Known Issues


File: relnotes.info,  Node: 4.0.5 New Features,  Next: 4.0.5 Bugs Fixed,  Up: 4.0.5 Changes

14.8.1 New Features
-------------------

   * 'library(zinc)': Interpreters for the MiniZinc and FlatZinc
     combinatorial problem modeling languages being developed in the G12
     project; see <http://www.minizinc.org>.
   * 'library(clpfd)': Revived deprecated constraints 'count/4' and
     'relation/3'.


File: relnotes.info,  Node: 4.0.5 Bugs Fixed,  Next: 4.0.5 Other Changes,  Prev: 4.0.5 New Features,  Up: 4.0.5 Changes

14.8.2 Bugs Fixed
-----------------

   * 'open/[3,4]' error handling.

   * Critical virtual machine bugs in floating point arithmetic.

   * Garbage collection now runs in constant space.

   * Opening a UNIX fifo, or other non-seekable file, in text mode would
     not terminate until the other end closed the connection and then it
     would report a seek error.  The problem was with the read-ahead
     needed to detect character encoding.  Non-seekable files are now
     opened as if 'encoding_signature(false)' were passed to 'open/4'.

   * Runtime systems generated by 'spld' did not propagate exit code
     from 'halt/1'.

   * 'statistics/0' would sometimes report incorrect, including
     negative, "program space breakdown" for the "miscellaneous" and
     "interpreted code" categories.

   * 'SP_event()' handlers are no longer allowed to run during
     'SP_exception_term()' or 'SP_deinitialize()'.

     'SP_exception_term()' calls Prolog code which could allow
     'SP_event()' handlers to run, e.g. for 'library(timeout)'.  In this
     case exceptions and failures from an 'SP_event()' handler would be
     ignored and possibly confuse 'SP_exception_term()'.

     'SP_deinitialize()' does some cleanup by calling Prolog code.  This
     can no longer cause 'SP_event()' handlers to run.

   * Fixed a memory corruption issue that happened during exception
     handling.

   * Prologbeans:
        - Lists of one character atoms were incorrectly transferred from
          Java to SICStus.

        - The example 'sessionsum' was missing the line:

               pSession.connect();

          after the declaration of 'pSession'.

        - Session listeners were not notified when a client closed the
          stream.

   * Jasper: A memory leak in multithread mode.

   * Debugger:
          A 'file/[1,2]' breakpoint test or action would raise an
          exception when used with uninstantiated first (file name)
          argument.

        - Some conditional breakpoints could not be handled by
          'SU_messages' message processing.  This sometimes caused a raw
          message term to be presented in the debugger.

        - Sometimes breakpoint tests were evaluated with the wrong value
          for the 'bid/1' breakpoint condition.  The 'bid/1' breakpoint
          condition was not always reset to 'bid(off)' when no
          breakpoint was selected.  The documentation was updated to
          correctly say 'bid(off)' instead of 'bid(none)'.

   * Sometimes, SICStus would enter an infinite loop if the error stream
     was closed in the other read-end.  This could happen, e.g. when
     SICStus was invoked as a subprocess and the parent process exited
     ungracefully.

   * Some Prolog code would not compile in 'profiledcode' mode.

   * Spurious type errors in several library modules.

   * 'library(objects)', 'library(structs)': fixed a 64-bit issue, and
     putting integers now checks for overflows.

   * 'library(avl)': bug in 'avl_max/3'.

   * 'library(clpfd)': bug fixes for 'circuit/1', 'table/[2,3]',
     'lex_chain/[1,2]', '#\='.

   * 'library(bdb)':
        - 'db_open/5' could crash if the option 'cache_size/1' was
          passed.
        - Very long filenames could cause crashes.
        - Did not work reliably with non-ASCII file names.
        - 'db_enumerate/3', 'db_sync/1', 'db_make_iterator/2',
          'db_iterator_next/3' and 'db_iterator_done/1' crashed if
          called after the database had been closed.


File: relnotes.info,  Node: 4.0.5 Other Changes,  Next: 4.0.5 Known Issues,  Prev: 4.0.5 Bugs Fixed,  Up: 4.0.5 Changes

14.8.3 Other Changes
--------------------

   * The windowed executable ('spwin.exe') on Windows now saves and
     reads the command history (*note Command Line Editing::).

   * 'write/[1,2]' is now much faster when writing atomic terms.

   * 'assertz/1' and friends are now faster when asserting facts, i.e.
     clauses without bodies.

   * 'library(terms)': the new predicate 'term_hash/3' allows more
     control over the hashing behavior and hash algorithm used.

     Notable new features: a new, better, default hash algorithm and
     several other algorithms, including the 4.0.4 version, are
     available; it is possible to obtain a full 32-bit hash value; it is
     possible to get an instantiation error or hash value when the term
     being hashed is nonground.

     'term_hash/[2,4]' has been changed to use a better hash function by
     default.  The new hash function gives fewer collisions in general,
     and gives the same value on all platforms.

     *Please note*: The change of hash function is an incompatible
     change that may affect programs or data that depend on the old hash
     algorithm.  The old behavior can be obtained as follows:

          %% Pre 4.0.5 version
          term_hash_4_0_4(Term, Hash) :-
             term_hash(Term, [algorithm('sicstus-4.0.4')], Hash).

          term_hash_4_0_4(Term, Depth, Range, Value) :-
             term_hash(Term, [algorithm('sicstus-4.0.4'), depth(Depth), range(Range)], Hash).

   * 'library(debugger_examples)' updated.

   * Extended Runtime systems (a separate product, adding the compiler
     to runtime systems) now require a license at runtime.  By default
     'spld' will embed the license into the executable.

   * The hook 'user:error_exception/1' is now called with the exception
     term specified by ISO Prolog, i.e. the same term that is seen by
     'catch/3' and 'on_exception/3'.  It used to be called with an
     internal representation of the exception.  This affects error
     exceptions, i.e. those with functor 'error/2'.  The old (pre 4.0.5)
     value passed to 'user:error_exception/1' is the second argument of
     the 'error/2' structure.

     *Please note*: This is an incompatible change.  Old code that uses
     'user:error_exception/1' may need to be updated.  If the old code
     looked like:
          %% Pre 4.0.5 version
          user:error_exception(Old) :- do_something(Old).

     then it can be rewritten as follows (which will also work in older
     versions of SICStus Prolog):
          %% >= 4.0.5 version
          user:error_exception(New) :-
             ( New = error(_, Old) -> true; Old = New),
             do_something(Old).

   * 'trimcore/0' is now more thorough when releasing memory back to the
     operating system.  This also affects the 'trimcore'-variant used by
     the top level.

   * It is now possible to tell SICStus to use 'malloc()' et al. as
     memory manager instead of the default custom allocator.

     'malloc()' is selected when starting 'sicstus' with the new option
     '-m'; when initializing the SICStus runtime with the environment
     variable 'SP_USE_MALLOC' set to 'yes'; for SICStus runtimes built
     with the new 'spld' option '--memhook=malloc'; and when calling
     'SP_set_memalloc_hooks()' with the new option
     'SP_SET_MEMALLOC_HOOKS_HINT_USE_MALLOC'.  *Note
     SP_set_memalloc_hooks: (sicstus)cpg-ref-SP_set_memalloc_hooks.

   * 'library(clpfd)': unification with domain variables as well as
     propositional combinations of arithmetic constraints have been
     accelerated.


File: relnotes.info,  Node: 4.0.5 Known Issues,  Prev: 4.0.5 Other Changes,  Up: 4.0.5 Changes

14.8.4 Known Issues
-------------------

The following are known issues with this release of SICStus.  *Note
Limitations in the Current Release:: for more information about missing
or incomplete features in this release.

   * Exceptions in interpreted code will not get accurate source info in
     the source linked debugger.

   * saved states and '.po' files are not portable across architectures
     that have the same word size, which they should be.  This will be
     fixed in release 4.1.0.

   * SICStus Prolog does not verify that Prolog text is in Unicode NFC
     format.

     When reading terms, SICStus Prolog currently does not verify that
     the input text contains valid Unicode 5.0 characters in Normal Form
     C. *Note Syntax of Tokens as Character Strings:
     (sicstus)ref-syn-syn-tok.

     This is not a problem as long as the input is in the proper format
     but it will accept some input that may be rejected or interpreted
     differently in a future version of SICStus Prolog.


File: relnotes.info,  Node: 4.0.6 Changes,  Next: 4.0.7 Changes,  Prev: 4.0.5 Changes,  Up: Revision History

14.9 Changes Introduced in Version 4.0.6
========================================

This section is intentionally left empty.  Version 4.0.6 was skipped in
the release series.


File: relnotes.info,  Node: 4.0.7 Changes,  Next: 4.0.8 Changes,  Prev: 4.0.6 Changes,  Up: Revision History

14.10 Changes Introduced in Version 4.0.7
=========================================

* Menu:

* 4.0.7 New Features::         New Features
* 4.0.7 Bugs Fixed::           Bugs Fixed
* 4.0.7 Other Changes::        Other Changes
* 4.0.7 Known Issues::         Known Issues


File: relnotes.info,  Node: 4.0.7 New Features,  Next: 4.0.7 Bugs Fixed,  Up: 4.0.7 Changes

14.10.1 New Features
--------------------

   * Most text streams can now be opened with 'reposition(true)',
     allowing 'set_stream_position/2' and 'seek/4'.  This works for
     fixed-width, single-byte encodings.  This includes Latin 1 and
     similar encodings provided 'LFD' is used for end-of-line.  *Note
     open: (sicstus)mpg-ref-open.
   * 'library(clpb)' is revived from SICStus 3, unsupported.


File: relnotes.info,  Node: 4.0.7 Bugs Fixed,  Next: 4.0.7 Other Changes,  Prev: 4.0.7 New Features,  Up: 4.0.7 Changes

14.10.2 Bugs Fixed
------------------

   * 'SP_event()' handlers are no longer allowed to run during
     'SP_fclose()', which sometimes needs to perform some cleanup by
     calling Prolog code.  This can no longer cause 'SP_event()'
     handlers to run.
   * Exceptions during exception handling would cause the top level to
     exit.
   * 'SP_event()' handlers were not always called during event handling.
     One symptom was that, at least on Windows, 'timeout:time_out/3'
     could not always interrupt a goal called from an event handler.
   * Bug in redefining multifile predicates.
   * 'sockets:socket_select/7' leaked memory on Windows.
   * 'library(queues)': bug in 'portray_queue/1'.
   * 'library(clpfd)': Incorrect reification and efficiency bugs in
     arithmetic relations involving division, 'mod' and 'rem'; incorrect
     handling of 'inf' and 'sup' in 'table/[2,3]'.


File: relnotes.info,  Node: 4.0.7 Other Changes,  Next: 4.0.7 Known Issues,  Prev: 4.0.7 Bugs Fixed,  Up: 4.0.7 Changes

14.10.3 Other Changes
---------------------

   * Foreign resources compiled with releases predating 4.0.5 will not
     load into newer releases.  This change was already in release 4.0.5
     but was not documented in the release notes.
   * The 'eol/1' stream property is now available also when not
     explicitly specified when opening a file with 'open/[3,4]'.
   * Decreased overhead for reclaiming dead dynamic clauses.
   * Decreased garbage collection overhead in some cases.


File: relnotes.info,  Node: 4.0.7 Known Issues,  Prev: 4.0.7 Other Changes,  Up: 4.0.7 Changes

14.10.4 Known Issues
--------------------

The following are known issues with this release of SICStus.  *Note
Limitations in the Current Release:: for more information about missing
or incomplete features in this release.

   * Exceptions in interpreted code will not get accurate source info in
     the source linked debugger.

   * saved states and '.po' files are not portable across architectures
     that have the same word size, which they should be.

   * SICStus Prolog does not verify that Prolog text is in Unicode NFC
     format.

     When reading terms, SICStus Prolog currently does not verify that
     the input text contains valid Unicode 5.0 characters in Normal Form
     C. *Note Syntax of Tokens as Character Strings:
     (sicstus)ref-syn-syn-tok.

     This is not a problem as long as the input is in the proper format
     but it will accept some input that may be rejected or interpreted
     differently in a future version of SICStus Prolog.


File: relnotes.info,  Node: 4.0.8 Changes,  Next: 4.1.0 Changes,  Prev: 4.0.7 Changes,  Up: Revision History

14.11 Changes Introduced in Version 4.0.8
=========================================

* Menu:

* 4.0.8 New Features::         New Features
* 4.0.8 Bugs Fixed::           Bugs Fixed
* 4.0.8 Other Changes::        Other Changes
* 4.0.8 Known Issues::         Known Issues


File: relnotes.info,  Node: 4.0.8 New Features,  Next: 4.0.8 Bugs Fixed,  Up: 4.0.8 Changes

14.11.1 New Features
--------------------

'GROWTHFACTOR'
     A new environment variable that controls the rate at which the
     Prolog stacks grow when they are expanded.  *Note 'sicstus' --
     SICStus Prolog Development System: (sicstus)too-sicstus.


File: relnotes.info,  Node: 4.0.8 Bugs Fixed,  Next: 4.0.8 Other Changes,  Prev: 4.0.8 New Features,  Up: 4.0.8 Changes

14.11.2 Bugs Fixed
------------------

   * Compiler: shallow backtracking bug.
   * Virtual machine bugs (accesses to uninitialized, freed or dead
     data, spurious memory corruption, recovery from memory resource
     error).


File: relnotes.info,  Node: 4.0.8 Other Changes,  Next: 4.0.8 Known Issues,  Prev: 4.0.8 Bugs Fixed,  Up: 4.0.8 Changes

14.11.3 Other Changes
---------------------

   * Stack memory is maintained separately from other memory, which can
     sharply reduce memory fragmentation.

   * Decreased garbage collection overhead in some cases.


File: relnotes.info,  Node: 4.0.8 Known Issues,  Prev: 4.0.8 Other Changes,  Up: 4.0.8 Changes

14.11.4 Known Issues
--------------------

The following are known issues with this release of SICStus.  *Note
Limitations in the Current Release:: for more information about missing
or incomplete features in this release.

   * Exceptions in interpreted code will not get accurate source info in
     the source linked debugger.

   * saved states and '.po' files are not portable across architectures
     that have the same word size, which they should be.

   * SICStus Prolog does not verify that Prolog text is in Unicode NFC
     format.

     When reading terms, SICStus Prolog currently does not verify that
     the input text contains valid Unicode 5.0 characters in Normal Form
     C. *Note Syntax of Tokens as Character Strings:
     (sicstus)ref-syn-syn-tok.

     This is not a problem as long as the input is in the proper format
     but it will accept some input that may be rejected or interpreted
     differently in a future version of SICStus Prolog.


File: relnotes.info,  Node: 4.1.0 Changes,  Next: 4.1.1 Changes,  Prev: 4.0.8 Changes,  Up: Revision History

14.12 Changes Introduced in Version 4.1.0
=========================================

* Menu:

* 4.1.0 New Features::         New Features
* 4.1.0 Bugs Fixed::           Bugs Fixed
* 4.1.0 Other Changes::        Other Changes
* 4.1.0 Known Issues::         Known Issues


File: relnotes.info,  Node: 4.1.0 New Features,  Next: 4.1.0 Bugs Fixed,  Up: 4.1.0 Changes

14.12.1 New Features
--------------------

   * SPIDER, the SICStus Prolog IDE, is a new Eclipse-based development
     environment for SICStus with many powerful features.  *Note SICStus
     Prolog IDE: (sicstus)SPIDER. for more information.

   * do loops, a new control structure and built-in predicate 'do/2' for
     performing simple iterations.  *Note Do Loops:
     (sicstus)ref-sem-ctr-dol.

   * Conditional compilation, a preprocessing step that selectively
     discards parts of a file at compile time.  This is especially
     useful for writing code that needs to be compatible with more than
     one Prolog implementation.  *Note Conditional Compilation:
     (sicstus)ref-lod-cnd.  for more information.

   * New Prolog flags:
     'dialect'
     'version_data'
          make it easier to determine which version of SICStus is
          running.  Especially useful with conditional compilation.

     'platform_data'
     'os_data'
          make it easier to determine on which operating system SICStus
          is running.

     'min_tagged_integer'
     'max_tagged_integer'

          The range of small integers.

     'argv'
          Not a new flag but is no longer read-only.  Setting it can be
          useful, e.g. in test cases.

   * Added stream property 'interactive' for interactive streams, like
     the standard input and output streams when invoking SICStus on a
     terminal or with the '-i' command line option.

   * Meta-predicate declarations now allow an integer instead of ':'
     (colon) in order to help analysis tools follow code references.
     All documentation and libraries have been updated to reflect this.
     (This was always allowed in SICStus as a substitute for ':' (colon)
     but was never documented).

   * Compound terms denoting references to dynamic clauses are
     recognized by the new built-in predicate 'db_reference/1'.

   * The previously reserved argument to 'SP_initialize()' can now be
     used to pass initialization options.

   * saved states and '.po' files are portable across architectures that
     have the same word size.  Pre-4.1 '.sav' and '.po' files are not
     compatible with this and future releases.

   * Several new statistics keywords are available.  Also,
     'statistics/0' now resets the "time spent since the latest call"
     counters.

   * 'library(odbc)' is a new ODBC library for interfacing with
     databases.  ODBC (Open Database Connectivity) is a standard API for
     using a DBMS (DataBase Management System).  By using ODBC you can
     access data from a multitude of DBMSs without having to know the
     details of each DBMS.

   * It is now possible to pass environment variables to the sub-process
     using the new 'environment/1' option to 'process:process_create/3'.

   * 'random:setrand/1' can now be passed an arbitrary integer for
     initializing the state of the random number generators.  This is
     easier than constructing a valid random state like those returned
     by 'getrand/1'.

   * 'library(clpfd)':
        - 'geost/[2,3,4]' is a new powerful constraint that constrains
          the location in space of non-overlapping multi-dimensional
          objects.
        - 'table/[2,3]' is more scalable and has several new options for
          controlling its DAG construction.
        - 'automaton/3' is a shorthand for the most common use of
          'automaton/8', and 'automaton/9' extends 'automaton/8' with
          options.
        - Unary minus ('-') is allowed in arithmetic expressions.
        - Several new demo examples.

   * 'library(zinc)': upgraded to FlatZinc version 1.0.

   * 'library(system)': a new predicate, 'environ/3', for reading system
     properties, environment variables or a merged view of both.  See
     below for the new concept "System Properties" that has replaced
     most uses of environment variables.

   * 'library(sockets)': The predicates that create socket streams now
     take options 'encoding/1' and 'eol/1' with the same meaning as for
     'open/4'.


File: relnotes.info,  Node: 4.1.0 Bugs Fixed,  Next: 4.1.0 Other Changes,  Prev: 4.1.0 New Features,  Up: 4.1.0 Changes

14.12.2 Bugs Fixed
------------------

   * Compiler: pathological case bug.

   * 'SP_raise_exception()' and 'SP_fail()' would sometimes not be
     handled correctly when foreign code called Prolog recursively.
     Now, exceptions are preserved in callbacks from foreign functions.

   * 'format/[2,3]' et al. used to treat all non-reserved exceptions as
     consistency errors.  Now non-error exceptions, i.e. not 'error/2',
     are passed on to the caller.

     Reserved exceptions from the goal invoked for the '~@' spec are now
     passed on to the caller.  This ensures that 'timeout:time_out/3'
     and other interrupts will be able to terminate such a goal.

   * Source-linked debugging could sometimes indicate the wrong line of
     code.

   * 'see/1' and 'tell/1' would not accept stream objects.

   * Multiple issues when changing one of the standard streams
     ('user_input', 'user_output', and 'user_error') with
     'set_prolog_flag/2'.  These issues affected 'stream_property/2',
     'current_stream/3' and could lead to access to freed memory during
     'close/[1,2]'.

   * 'stream_property/2' no longer returns an 'eol/1' property for
     binary streams.

   * SICStus no longer sets any environment variables.  Setting
     environment variables has undefined behavior in multi-threaded
     processes, especially on UNIX-like operating systems.  Symptoms
     included segmentation fault in 'getenv()' if several SICStus
     runtimes were initialized at the same time in different threads of
     the same process.  See below for the new concept "System
     Properties", which has replaced most uses of environment variables.

   * 'SP_event()' handlers are no longer allowed to run when the SICStus
     runtime calls Prolog code in contexts where their result, e.g.
     failure or exception, cannot be propagated to the caller.  This
     could potentially lead to timeouts and other asynchronous events
     being ignored.

   * If 'open/4' fails to open a file for writing, then it will now
     generate a 'permission_error', as prescribed by the ISO Prolog
     standard.  It used to raise a system error.

   * The 'open/4' option 'if_exists(generate_unique_name)' would
     sometimes access and use freed memory when generating a new file
     name.

   * 'SP_get_list_n_codes()' would report more bytes written than what
     was actually written.

   * Goals run as part of 'initialization/1' now have access to the load
     context ('prolog_load_context/2'), similarly to how other goals
     appearing in directives are treated.  This also means that
     'absolute_file_name/[2,3]' will use the location saved in the load
     context as default directory.

     *Please note*: The change in default directory for
     'absolute_file_name/[2,3]', and thus 'open/[3,4]' et al., is an
     incompatible change that may affect some programs.  Old code that
     depends on the current directive may need to be updated to
     explicitly call 'file_systems:current_directory/1'.

     If the old code looked like:
          %% Pre 4.1.0 version
          :- initialization read_some_file('myfile').

     then it can be rewritten as follows (which will also work in older
     versions of SICStus Prolog):
          %% >= 4.1.0 version
          :- use_module(library(file_systems), [current_directory/1]).
          :- initialization  current_directory(CWD),
                             absolute_file_name('myfile', Absfile,
                                                [relative_to(CWD)]),
                             read_some_file(Absfile).

   * 'prolog_load_context(stream,S)' will now only succeed when
     compiling or consulting the code.  It used to return a closed
     stream instead of failing.

   * 'library(clpfd)':
        - 'nvalue/2' would miss solutions.
        - 'element/3' did not maintain arc-consistency in its first
          argument.
        - Undefined behavior when combining CLPFD with frozen goals, now
          made consistent.
        - Strength reduction problem for some propositional constraints.
        - Missing meta-predicate declaration for 'fd_global/[3,4]'.
        - Some data was not protected from garbage collection.
        - Output of 'copy_term/3' was sometimes incomplete or not
          correct.

   * Exported, non-existing predicates:
     'file_systems:file_must_exist/[1,2]', 'lists3:nextto/3',
     'lists3:nth/4'.

   * The directory listing predicates in 'library(file_systems)', e.g.
     'directory_member_of_directory/2', no longer fail if they encounter
     a broken symbolic link.

   * 'library(process)': Process creation would leak small amounts of
     memory.

   * 'library(random)': 'maybe/0' would always fail the first time.
   * A typo prevented 'library(detcheck)' from working.
   * The 'spdet' tool now tries the extension '.pro' in addition to
     '.pl'.  Other minor improvements.
   * 'library(xref)': slightly more precise.
   * 'sockets:socket_client_open/3' would give system error with
     'SPIO_E_HOST_NOT_FOUND' when connecting to localhost on some
     platforms.

   * 'system:environ/2' would leak memory if called with a variable as
     first argument.

   * The Emacs mode did not work in recent Emacsen.


File: relnotes.info,  Node: 4.1.0 Other Changes,  Next: 4.1.0 Known Issues,  Prev: 4.1.0 Bugs Fixed,  Up: 4.1.0 Changes

14.12.3 Other Changes
---------------------

   * The atom length restriction has been lifted.

   * The Emacs command 'run-prolog' now prompts for a (Lisp) list of
     extra command line arguments, when invoked with a prefix argument,
     i.e. as 'C-U M-x run-prolog'.

   * While loading clauses from a PO file, if clauses for an existing
     multifile predicate are encountered, but in a precompiled format
     different from the existing clauses, then the existing clauses
     remain untouched, the multifile clauses from the PO file are simply
     ignored, the load continues, and a permission error is raised at
     the end.  Previously, the existing clauses would silently be
     replaced by the loaded ones.  This feature is mainly relevant for
     hook predicates such as 'user:term_expansion/6'.

   * "System Properties" has been introduced as an abstraction to
     replace the direct use of environment variables.  *Note System
     Properties and Environment Variables: (sicstus)System Properties
     and Environment Variables.  for more information.

     The change is largely backwards compatible with the following
     notable exceptions:
        * The environment variables 'SP_APP_DIR', 'SP_RT_DIR', etc. are
          no longer set in the environment.  This means that their value
          can no longer be obtained, e.g. from C code, by using
          'getenv()' or similar functions.  Instead, 'SP_getenv()' can
          be used for a similar effect.

        * For the same reason, sub-processes created with
          'process:process_create/[2,3]' will no longer see 'SP_APP_DIR'
          et al. in their inherited environment.  Instead it is now
          possible to explicitly pass environment variables to the
          sub-process using the new 'environment/1' option to
          'process:process_create/3'.

   * New automatically set system properties, 'SP_APP_PATH', the path to
     the executable, 'SP_RT_DIR', the path to the SICStus runtime, and
     'SP_STARTUP_DIR' the initial working directory.  *Note System
     Properties and Environment Variables: (sicstus)System Properties
     and Environment Variables.  for more information.

   * The initial working directory can be set with the system property
     'SP_STARTUP_DIR', independently from the process's working
     directory.  By setting the system property 'SP_ALLOW_CHDIR' to
     'no', SICStus can be told to never change the process's working
     directory.  These features are especially useful when embedding
     SICStus.

   * The buffer argument to 'spio_t_simple_device_write' is now a 'void
     const*' instead of a plain 'void *'.  This affects code that use
     'SP_create_stream()' to create user-defined streams.

   * 'SP_get_list_n_bytes()' and 'SP_get_list_n_codes()' now use
     stricter input validation.

   * SICStus will no longer flush open streams on exit.  This change is
     to prevent SICStus from hanging on exit due to some blocking I/O
     operation.  All streams should be explicitly closed ('close/[1,2]')
     or flushed ('flush_output/1') if their contents is precious.

   * 'clpfd:case/4': the 'leaves/2' option has been dropped, and the
     variable order must be the same on every path.

   * 'library(system)': 'library(system)' no longer depends on any
     foreign code so the 'system' foreign resource is gone.

   * 'library(jasper)': The SICStus (Java) working directory is now
     passed to Java (SICStus) when Java (SICStus) is started from
     SICStus (Java).  Also, SICStus will not change the process's
     working directory when started from Java.

   * The Berkeley DB library, 'library(bdb)', is now built using
     Berkeley DB 4.8.24.


File: relnotes.info,  Node: 4.1.0 Known Issues,  Prev: 4.1.0 Other Changes,  Up: 4.1.0 Changes

14.12.4 Known Issues
--------------------

The following are known issues with this release of SICStus.  *Note
Limitations in the Current Release:: for more information about missing
or incomplete features in this release.

   * SICStus Prolog does not verify that Prolog text is in Unicode NFC
     format.

     When reading terms, SICStus Prolog currently does not verify that
     the input text contains valid Unicode 5.0 characters in Normal Form
     C. *Note Syntax of Tokens as Character Strings:
     (sicstus)ref-syn-syn-tok.

     This is not a problem as long as the input is in the proper format
     but it will accept some input that may be rejected or interpreted
     differently in a future version of SICStus Prolog.


File: relnotes.info,  Node: 4.1.1 Changes,  Next: 4.1.2 Changes,  Prev: 4.1.0 Changes,  Up: Revision History

14.13 Changes Introduced in Version 4.1.1
=========================================

Version 4.1.1 is a bugfix release only, no new features have been added.
*Note 4.1.0 Changes:: for changes introduced in SICStus Prolog 4.1.

* Menu:

* 4.1.1 Bugs Fixed::           Bugs Fixed
* 4.1.1 Known Issues::         Known Issues


File: relnotes.info,  Node: 4.1.1 Bugs Fixed,  Next: 4.1.1 Known Issues,  Up: 4.1.1 Changes

14.13.1 Bugs Fixed
------------------

   * A compiler bug affecting disjunctions, introduced in released
     4.1.0, fixed.


File: relnotes.info,  Node: 4.1.1 Known Issues,  Prev: 4.1.1 Bugs Fixed,  Up: 4.1.1 Changes

14.13.2 Known Issues
--------------------

The following are known issues with this release of SICStus.  *Note
Limitations in the Current Release:: for more information about missing
or incomplete features in this release.

   * SICStus Prolog does not verify that Prolog text is in Unicode NFC
     format.

     When reading terms, SICStus Prolog currently does not verify that
     the input text contains valid Unicode 5.0 characters in Normal Form
     C. *Note Syntax of Tokens as Character Strings:
     (sicstus)ref-syn-syn-tok.

     This is not a problem as long as the input is in the proper format
     but it will accept some input that may be rejected or interpreted
     differently in a future version of SICStus Prolog.


File: relnotes.info,  Node: 4.1.2 Changes,  Next: 4.1.3 Changes,  Prev: 4.1.1 Changes,  Up: Revision History

14.14 Changes Introduced in Version 4.1.2
=========================================

Version 4.1.2 is a bugfix release only, no new features have been added.
*Note 4.1.0 Changes:: for changes introduced in SICStus Prolog 4.1.

* Menu:

* 4.1.2 Bugs Fixed::           Bugs Fixed
* 4.1.2 Other Changes::        Other Changes
* 4.1.2 Known Issues::         Known Issues


File: relnotes.info,  Node: 4.1.2 Bugs Fixed,  Next: 4.1.2 Other Changes,  Up: 4.1.2 Changes

14.14.1 Bugs Fixed
------------------

   * Term comparison now runs in constant C stack space.
   * Virtual machine bugs.
   * PO file compatibility bug.
   * Memory management bugs.
   * Memory and stack corruption on UNIX-like systems with large file
     number limit and many open files (systems with 'ulimit -n' larger
     than 'FD_SETSIZE', i.e. larger than 1024).
   * PRED_SPEC_TREE parse error.
   * Module expansion of args shadowed by do iterators.
   * Command line arguments with certain non-ASCII characters would
     prevent SICStus from initializing.
   * 'ceiling/1', 'floor/1', 'round/1', 'truncate/1' now accept integers
     in addition to floats.
   * 'statistics(garbage_collection,_)' did not report the correct byte
     count.
   * PrologBeans: one hook predicate was incorrectly declared dynamic.
   * 'library(bdb)': determinacy bugs.
   * CLPFD:
        - 'table/[2,3]': bugs with 'inf'/'sup', 'copy_term'/2.
        - 'geost/[2,3,4]': polymorphism with rules; 'volume/1' option.
   * 'library(linda)': The Linda server is now more robust against
     misbehaving clients.  Especially on Windows the server would get a
     connection reset error if the client crashed.
   * 'library(sockets)': 'socket_select/7' would sometimes return with
     nothing selected even though it was called with infinite timeout
     (UNIX-like platforms only).
   * Prolog Beans clients (both Java and .NET) would sometimes get an
     array index out of bounds error when more than ten concurrent
     sessions were active.


File: relnotes.info,  Node: 4.1.2 Other Changes,  Next: 4.1.2 Known Issues,  Prev: 4.1.2 Bugs Fixed,  Up: 4.1.2 Changes

14.14.2 Other Changes
---------------------

   * Added a warning to the PrologBeans.NET ASPX example that it is not
     secure.


File: relnotes.info,  Node: 4.1.2 Known Issues,  Prev: 4.1.2 Other Changes,  Up: 4.1.2 Changes

14.14.3 Known Issues
--------------------

The following are known issues with this release of SICStus.  *Note
Limitations in the Current Release:: for more information about missing
or incomplete features in this release.

   * SICStus Prolog does not verify that Prolog text is in Unicode NFC
     format.

     When reading terms, SICStus Prolog currently does not verify that
     the input text contains valid Unicode 5.0 characters in Normal Form
     C. *Note Syntax of Tokens as Character Strings:
     (sicstus)ref-syn-syn-tok.

     This is not a problem as long as the input is in the proper format
     but it will accept some input that may be rejected or interpreted
     differently in a future version of SICStus Prolog.


File: relnotes.info,  Node: 4.1.3 Changes,  Next: 4.2.0 Changes,  Prev: 4.1.2 Changes,  Up: Revision History

14.15 Changes Introduced in Version 4.1.3
=========================================

*Note 4.1.0 Changes:: for changes introduced in SICStus Prolog 4.1.

* Menu:

* 4.1.3 New Features::         New Features
* 4.1.3 Bugs Fixed::           Bugs Fixed
* 4.1.3 Other Changes::        Other Changes
* 4.1.3 Known Issues::         Known Issues


File: relnotes.info,  Node: 4.1.3 New Features,  Next: 4.1.3 Bugs Fixed,  Up: 4.1.3 Changes

14.15.1 New Features
--------------------

   * 'library(plunit)' provides a Prolog unit-test framework.
   * CLPFD:
        - 'automaton/9' takes several new options that allow capturing
          properties of the input string, such as the number of
          occurrences of given patterns, into domain variables.
        - A much more general syntax is allowed for clauses of the form
          'HEAD +: BODY', which define dedicated propagators as
          indexicals.  In particular, propositional combinations of
          arithmetic constraints are allowed.


File: relnotes.info,  Node: 4.1.3 Bugs Fixed,  Next: 4.1.3 Other Changes,  Prev: 4.1.3 New Features,  Up: 4.1.3 Changes

14.15.2 Bugs Fixed
------------------

   * Critical virtual machine bugs.
   * Improvements to interrupt handling ('SP_event()', 'SP_signal()' and
     related functionality).
   * When running under the SPIDER IDE, I/O operations could fail with
     'SPIO_E_INTERRUPTED'.
   * When running under the SPIDER IDE, 'restore/1' would disrupt the
     debugging session.
   * Linking with the SICStus runtime on Linux no longer marks the stack
     as executable.  This would prevent SICStus from starting on some
     versions of SE Linux.
   * Work around OS bugs on Mac OS X 10.5, Mac OS X 10.6 and Linux that
     would sometimes cause SICStus to hang when closing streams.
   * Source-info bug for huge interpreted clauses.
   * Source-info bug for interpreted code, introduced in 4.2.0.
   * Profiling: 'profile_reset/1' was broken; problems with multifile.
   * 'library(timeout)': 'time_out/3' would sometimes interrupt I/O or
     miss a timeout under Windows.
   * 'library(sockets)': Some operations would raise an exception when
     an interrupt occurred, e.g. at '^C'.
   * CLPQ/CLPR: constants \pi and e were inaccurate.
   * CLPFD:
        - 'relation/3, table/[2,3]': bugs with empty and infinite sets.
        - Missing propagation in the context of unification.
   * Prologbeans: passing deeply nested terms to and from Prolog could
     lead to stack overflow in Prologbeans client code (Java, .NET).


File: relnotes.info,  Node: 4.1.3 Other Changes,  Next: 4.1.3 Known Issues,  Prev: 4.1.3 Bugs Fixed,  Up: 4.1.3 Changes

14.15.3 Other Changes
---------------------

   * The following I/O predicates are now several times faster:
     'put_code/[1,2]', 'put_byte/[1,2]', 'get_code/[1,2]',
     'peek_code/[1,2]', 'get_byte/[1,2]', 'peek_byte/[1,2]', and
     'read_line/[1,2]'.
   * Exceptions used internally by built-in predicates and
     'library(timeout)' are now transparent to 'on_exception/3' and
     'catch/3' as well as to debugger ports.
   * JASPER: When creating a 'se.sics.sicstus.SICStus' instance any
     (Java) system property named 'se.sics.sicstus.property.'NAME will
     be passed to the created SICStus instance as the (Prolog) system
     property NAME.
   * CLPFD: 'scalar_product/[4,5]' is less prone to integer overflows,
     and faster in the most common cases.

   * Linux: The installer script would sometimes fail to configure
     support for Java.


File: relnotes.info,  Node: 4.1.3 Known Issues,  Prev: 4.1.3 Other Changes,  Up: 4.1.3 Changes

14.15.4 Known Issues
--------------------

The following are known issues with this release of SICStus.  *Note
Limitations in the Current Release:: for more information about missing
or incomplete features in this release.

   * SICStus Prolog does not verify that Prolog text is in Unicode NFC
     format.

     When reading terms, SICStus Prolog currently does not verify that
     the input text contains valid Unicode 5.0 characters in Normal Form
     C. *Note Syntax of Tokens as Character Strings:
     (sicstus)ref-syn-syn-tok.

     This is not a problem as long as the input is in the proper format
     but it will accept some input that may be rejected or interpreted
     differently in a future version of SICStus Prolog.


File: relnotes.info,  Node: 4.2.0 Changes,  Next: 4.2.1 Changes,  Prev: 4.1.3 Changes,  Up: Revision History

14.16 Changes Introduced in Version 4.2.0
=========================================

* Menu:

* 4.2.0 New Features::         New Features
* 4.2.0 Bugs Fixed::           Bugs Fixed
* 4.2.0 Other Changes::        Other Changes
* 4.2.0 Known Issues::         Known Issues


File: relnotes.info,  Node: 4.2.0 New Features,  Next: 4.2.0 Bugs Fixed,  Up: 4.2.0 Changes

14.16.1 New Features
--------------------

   * If the Prolog flag 'source_info' is on at compile time, then more
     information from the source code is kept around at runtime, with
     improved functionality including:
        - The debugger can show variable bindings for the current clause
          and its ancestors.
        - The Emacs interface offers a variable bindings window that is
          updated on every debugger port interaction.
        - 'listing/[0,1]' displays the clauses with their source code
          variable names.
        - PO files and saved states retain information about variable
          names and line numbers.
        - The SICStus Prolog IDE (SPIDER) also takes advantage of the
          improved debugging information, e.g. the variable bindings
          view in SPIDER now has information for more variables than in
          earlier releases.
        - Generic runtime systems are now available on all platforms,
          not only on Windows.  *Note Generic Runtime Systems:
          (sicstus)Generic Runtime Systems.  for details.

   * Execution profiling has been re-engineered:
        - The execution profile can be printed in a format similar to
          'gprof(1)'.
        - There is no longer any need to specially instrument code for
          profiling.
        - Execution profiling is available for compiled as well as
          interpreted code.
        - Execution profiling is either globally _on_ or globally _off_,
          reflected by the value of the new 'profiling' Prolog flag.
        - The new scheme keeps track of the number of calls per
          caller-callee pair.
        - The new scheme detects calls that succeed nondeterminately.
        - No clause level data is maintained, all data is per predicate.
        - The 'profiledcode' value of the 'compiling' Prolog flag has
          been dropped.
        - PO files do not store any profiling data.
        - The built-in predicates 'profile_data/4' and 'profile_reset/1'
          have been replaced by 'profile_reset/0', 'profile_data/1',
          'print_profile/[0,1]', 'coverage_data/1', and
          'print_coverage/[0,1]'.
        - SPIDER can present the profile information.

   * Improved performance on Linux Intel, 32 and 64 bits.

   * Coverage analysis is now available, for compiled as well as
     interpreted code:
        - It uses the same infrastructure as execution profiling.
        - Code coverage can be reported textually in a hierarchical
          format, or alternatively by highlighting the relevant lines of
          code in the relevant Emacs buffers and in SPIDER.

   * It is now possible to debug runtime systems, e.g. when SICStus is
     embedded in some other applications, such as Java.  It is also
     possible to attach to a runtime system from SPIDER. *Note Debugging
     Runtime Systems: (sicstus)Debugging Runtime Systems.

   * The 'meta_predicate/1' predicate property will retrieve the
     specifications used in the original meta-predicate declaration,
     which can be integers or the atoms ':', '*', '+', '-', or '?'.
     Previously, only the atoms ':' or '?' would be retrieved.  *Please
     note*: This is an incompatible change.  Code that inspects this
     predicate property may need to be updated.

   * A new stream property, 'id', has been added.  This property
     provides a unique identity that is never re-used, even after the
     stream has been closed.  *Note 'stream_property/2':
     (sicstus)mpg-ref-stream_property.

   * CLPFD:
        - The 'case/[3,4]' constraint has been extended to take linear
          inequalities into account in addition to the DAG.
        - The new constraint 'smt/1' provides a front-end to the
          extended 'case/[3,4]' constraint.
        - Reified constraints can be used as terms in arithmetic
          expressions.

   * 'library(zinc)': upgraded to FlatZinc version 1.2.

   * Changes to 'library(odbc)':
        - New predicates:

          'odbc_current_table/[2,3]'
               Enumerate tables and their attributes.
          'odbc_table_column/[3,4]'
               Enumerate table columns and their attributes.

        - 'odbc:odbc_query_close/1' can now close both result sets and
          statement handles.

        - The format has changed for some odbc exceptions.  Now all
          odbc-related exceptions have the same basic structure.

   * When SICStus is started from Emacs, using 'M-x run-prolog', or from
     the launcher script in the 'Applications' folder, the system
     property 'SP_ULIMIT_DATA_SEGMENT_SIZE' is set to 'unlimited'.  This
     ensures that overly restrictive default limits on process memory
     usage do not affect SICStus.  This is primarily an issue on Mac OS
     X. Previously, this setting was only applied when SICStus was
     invoked from the SICStus Prolog IDE (SPIDER).


File: relnotes.info,  Node: 4.2.0 Bugs Fixed,  Next: 4.2.0 Other Changes,  Prev: 4.2.0 New Features,  Up: 4.2.0 Changes

14.16.2 Bugs Fixed
------------------

   * Interrupt latency problem fixed.
   * Fixed exception handling bug introduced in 4.1.3.
   * Misencoded and null strings from C are handled gracefully.
   * 'write_term(X,[max_depth(D)])' did not always respect the depth
     limit.
   * 'seeing/1' and 'telling/1' now return 'user' for the current input
     resp. output stream, which was always intended.
   * If the standard input stream encounters an invalid character, then
     it will be silently replaced with the Unicode replacement character
     '0xFFFD'.  This was already the case for the standard output
     streams.

     The same behavior, for the standard input and output streams, is
     now also in effect when running SICStus in the SPIDER IDE.
   * When 'open/[3,4]' cannot expand a system property, e.g.
     'open('$FOO/bar.txt', read, S)' when the system property 'FOO' is
     undefined or empty, an exception is raised.  Previously,
     'open/[3,4]' silently failed in this case.
   * The system property 'SP_ALLOW_CHDIR' could not be set using the
     environment variable of the same name.
   * The 'spld' tool would ignore the '--namebase' argument for some
     generated files.
   * CLPFD:
        - Dangling pointer hazard fixed for domain variables with frozen
          goals.
        - Missing propagation problems fixed.
        - 'sorting/3' could fall into infinite loop.
        - Indexical compilation problems fixed.
   * CLPQ/CLPR: called the undefined predicate ''C'/3'.
   * 'library(terms)': bugs in 'sub_term/2', 'term_variables/2',
     'subsumeschk/2' and friends.
   * 
     Improvements in how 'library('linda/server')' and
     'library('linda/client')' handle server shutdown.

     The server will stop listening for new connections as soon as it
     receives a shutdown request from a client.  Among other things this
     makes the socket port available for re-use on the same machine.

     A call to 'linda_client:shutdown_server/0', in the client, will not
     return until the server has acknowledged the command.  This removes
     a race condition when the client attempts to re-connect to the
     server.

   * A number of problems in 'library(odbc)' has been fixed.  There are
     also some new features and other changes; see above.


File: relnotes.info,  Node: 4.2.0 Other Changes,  Next: 4.2.0 Known Issues,  Prev: 4.2.0 Bugs Fixed,  Up: 4.2.0 Changes

14.16.3 Other Changes
---------------------

   * Windows 2000 is no longer supported, for it is no longer supported
     by Microsoft.
   * The limitations on "temporary" and "permanent" variables for
     compiled clauses have been dropped.  There is no size limit on
     compiled clauses.
   * PO files and saved states are now much smaller than in earlier
     releases.
   * The new features required changes to the PO file format.  PO files
     and saved states created by previous versions are not compatible
     with this version, and vice versa.
   * The 'spld' tool now defaults to '--moveable' on Linux, Mac OS X and
     Solaris.  This can be turned off with the new option
     '--no-moveable'.


File: relnotes.info,  Node: 4.2.0 Known Issues,  Prev: 4.2.0 Other Changes,  Up: 4.2.0 Changes

14.16.4 Known Issues
--------------------

The following are known issues with this release of SICStus.  *Note
Limitations in the Current Release:: for more information about missing
or incomplete features in this release.

   * SICStus Prolog does not verify that Prolog text is in Unicode NFC
     format.

     When reading terms, SICStus Prolog currently does not verify that
     the input text contains valid Unicode 5.0 characters in Normal Form
     C. *Note Syntax of Tokens as Character Strings:
     (sicstus)ref-syn-syn-tok.

     This is not a problem as long as the input is in the proper format
     but it will accept some input that may be rejected or interpreted
     differently in a future version of SICStus Prolog.


File: relnotes.info,  Node: 4.2.1 Changes,  Next: 4.2.2 Changes,  Prev: 4.2.0 Changes,  Up: Revision History

14.17 Changes Introduced in Version 4.2.1
=========================================

*Note 4.2.0 Changes:: for changes introduced in SICStus Prolog 4.2.

* Menu:

* 4.2.1 New Features::         New Features
* 4.2.1 Bugs Fixed::           Bugs Fixed
* 4.2.1 Other Changes::        Other Changes
* 4.2.1 Known Issues::         Known Issues


File: relnotes.info,  Node: 4.2.1 New Features,  Next: 4.2.1 Bugs Fixed,  Up: 4.2.1 Changes

14.17.1 New Features
--------------------

   * Compiled clauses could previously not be loaded from a '.po' file
     into an existing multifile, interpreted predicate, or vice versa.
     This limitation has now been lifted.  After loading the '.po' file,
     the predicate will remain compiled if it was originally compiled
     and the compiler is available.  Otherwise, it will be interpreted.

     Furthermore, in runtime systems with no compiler available, if
     source code clauses are loaded into an existing, compiled
     predicate, then the predicate will become interpreted.
   * CLPFD:
        - 'full_answer/0' is volatile.
        - 'automaton/9' takes a new option that provides access to the
          sequence of counter values.
        - 'lex_chain/2' takes a new option that enables a more
          aggressive algorithm.
        - 'fd_batch/1' is a new exported predicate that posts a set of
          constraints with propagation suspended until the whole set has
          been posted.
        - Performance improvements in '*/2', linear arithmetic,
          Booleans, membership operations.
        - New example models: Balanced Academic Curriculum Problem, Wolf
          Goat and Cabbage Problem, Black Hole Patience Game, Open
          Stacks Problem.
   * ZINC:
        - SICStus Prolog has been brought up to date with MiniZinc
          version 1.4.
        - The default search heuristic has been changed to first-fail,
          domain splitting.
        - Native support for the following global constraints has been
          added: 'among', 'bin_packing', 'bin_packing_capa',
          'bin_packing_load', 'count', 'distribute', 'lex_greater',
          'lex_greatereq', 'regular', 'sliding_sum', 'value_precede',
          'value_precede_chain'.


File: relnotes.info,  Node: 4.2.1 Bugs Fixed,  Next: 4.2.1 Other Changes,  Prev: 4.2.1 New Features,  Up: 4.2.1 Changes

14.17.2 Bugs Fixed
------------------

   * 'restore/1' would behave inconsistently if invoked while loading
     files.
   * Nondet 'user:portray/1' would switch off the debugger.
   * The prompt written to 'user_error' would sometimes appear out of
     order wrt. output to other interactive streams.
   * Module name expansion of clauses was not robust to incorrect layout
     terms.
   * Format strings with '~t' not followed by tab stop would raise an
     instantiation error.
   * Dead code elimination could interfere with garbage collection.
   * Detection of redundant declarations is more precise.
   * A performance issue on the Windows platform has been fixed.
   * Typo in *note The Action Variables: (sicstus)Action Variables.:
     'exception(E)' should read 'raise(E)'.
   * Float to big integer conversion bug on 64-bit platforms.
   * Better handling of do loops whose iterators are not instantiated
     enough at compile time.
   * The virtual clauses 'beginning_of_file' and 'end_of_file' are now
     seen by term expansions only for source files, but not for files
     embedded by the ':-include' directive.
   * 'predicate_property/2' with nonvar arguments would succeed
     nondeterminately.
   * '=..(+TERM,+LIST)' could raise spurious errors instead of merely
     failing.
   * Stack overflow issue with pending unblocked goals.
   * saved states would not preserve the attribute handler order.
   * Source-info bug for huge interpreted clauses.
   * On Windows only, writing large amounts of data to the Windows
     console could fail with 'SPIO_E_IO_ERROR'.
   * 'library(between)': 'between/3' was not steadfast for constrained
     variables.
   * Exceptions used internally by 'library(timeout)' can be intercepted
     by the debugger again.  They were made transparent in release
     4.1.3, but that hinders debugging.
   * 'library(timeout)' did not work consulted.
   * 'library(plunit)' did not handle ':- include' directives correctly.
   * 'library(bdb)': 'db_findall/5' was not declared as a meta
     predicate.  Determinacy bugs.
   * CHR: Spurious instantiation error bug fixed.
   * 'library(zinc)'
        - Bug in constraint 'all_equal' fixed.
        - Removed '--no-output-pred-decls' to 'mzn2fzn', not supported
          as of release 1.3.
   * CLPFD:
        - Propagation phase could be preempted if domain variables had
          blocked goals or attributes.
        - Entailment detection bug in 'maximum/2', 'minimum/2' caused
          memory leak.
        - Bug in the 'precedences/1' option to 'cumulative/2'.
   * 'library(ugraphs)', 'library(wgraphs)': determinacy bugs.
   * 'library(odbc)': Non-ASCII error messages from the ODBC driver
     could give an exception about misencoded string.  Incorrect
     handling of 'SQL_BIGINT' and related types.  Improved robustness.


File: relnotes.info,  Node: 4.2.1 Other Changes,  Next: 4.2.1 Known Issues,  Prev: 4.2.1 Bugs Fixed,  Up: 4.2.1 Changes

14.17.3 Other Changes
---------------------

   * One of the bug fixes required a virtual machine change and a change
     to the PO file format.  So PO files and saved states created by
     previous versions are not compatible with this version, and vice
     versa.
   * Singleton variable warnings are no longer generated for those
     directives that the compiler ignores.  This includes 'mode/1'
     directives so you can now use more descriptive arguments, e.g.
          :- mode foo(+Input, -Output).
     without getting a warning about the singleton variables INPUT and
     OUTPUT.
   * 'print_coverage/[0,1]' and 'print_profile/[0,1]' now print to the
     current output stream, like 'listing/[0,1]'.
   * Static foreign resources are now compiled in a way that ensures
     that the code can be linked into dynamic shared objects (like '.so'
     and '.dll' files).  This solves a problem where static foreign
     resources could not be included in all-in-one executable dynamic
     shared objects.


File: relnotes.info,  Node: 4.2.1 Known Issues,  Prev: 4.2.1 Other Changes,  Up: 4.2.1 Changes

14.17.4 Known Issues
--------------------

The following are known issues with this release of SICStus.  *Note
Limitations in the Current Release:: for more information about missing
or incomplete features in this release.

   * SICStus Prolog does not verify that Prolog text is in Unicode NFC
     format.

     When reading terms, SICStus Prolog currently does not verify that
     the input text contains valid Unicode 5.0 characters in Normal Form
     C. *Note Syntax of Tokens as Character Strings:
     (sicstus)ref-syn-syn-tok.

     This is not a problem as long as the input is in the proper format
     but it will accept some input that may be rejected or interpreted
     differently in a future version of SICStus Prolog.


File: relnotes.info,  Node: 4.2.2 Changes,  Next: 4.2.3 Changes,  Prev: 4.2.1 Changes,  Up: Revision History

14.18 Changes Introduced in Version 4.2.2
=========================================

Version 4.2.2 is a bugfix release only, no major new features have been
added.  *Note 4.2.0 Changes:: for changes introduced in SICStus Prolog
4.2.

* Menu:

* 4.2.2 New Features::         New Features
* 4.2.2 Bugs Fixed::           Bugs Fixed
* 4.2.2 Other Changes::        Other Changes
* 4.2.2 Known Issues::         Known Issues


File: relnotes.info,  Node: 4.2.2 New Features,  Next: 4.2.2 Bugs Fixed,  Up: 4.2.2 Changes

14.18.1 New Features
--------------------

   * 'library(odbc)':
        - Unicode data is now passed to and from the ODBC manager on all
          platforms.  Also, some arbitrary size limits on the length of
          (text) data have been removed.
        - The SQL "null" value is now supported as parameter to queries,
          and is represented as the atom 'null'.  *Please note*: this is
          an incompatible change for string parameters.  When passing
          string parameters to 'odbc_query_execute_sql/[3,5]' using
          atoms, the atom 'null' used to be treated as the four
          character string consisting of the characters 'n', 'u', 'l'
          and 'l' but it is now treated as a SQL "null" value.  A
          workaround is to always pass strings as lists of character
          codes (which also works in older versions of SICStus) or as a
          list of atoms (which only works in SICStus 4.2.2 and later).


File: relnotes.info,  Node: 4.2.2 Bugs Fixed,  Next: 4.2.2 Other Changes,  Prev: 4.2.2 New Features,  Up: 4.2.2 Changes

14.18.2 Bugs Fixed
------------------

   * Terms containing a hash mark ('#') was not transmitted correctly to
     the SICStus Prolog IDE (SPIDER). This affected the SPIDER debugger
     view, among other things.
   * Several built-in predicates did not handle constrained "output"
     variables correctly, e.g. 'atom_length/2', 'char_code/2',
     'atom_concat/3', 'sub_atom/5'
   * Fix variable binding display bug when inside disjunctions and do
     loops
   * Prevent state corruption upon out-of-memory exception in certain
     contexts
   * 'library(random)': 'random(L,L,X)' would succeed with 'X = L'
     instead of failing
   * 'queues:singleton_queue/2' returned the wrong term
   * CLPFD:
        - Performance bug in special cases of 'case/[3,4]'
        - 'table/[2,3]': bug with 'inf/sup' in binary relations


File: relnotes.info,  Node: 4.2.2 Other Changes,  Next: 4.2.2 Known Issues,  Prev: 4.2.2 Bugs Fixed,  Up: 4.2.2 Changes

14.18.3 Other Changes
---------------------

   * SICStus Prolog is now available for 64-bit (x86_64) Windows.
   * The C API, including the foreign language interface, now uses the
     type 'SP_integer' in all places where it used to use the type 'long
     int'.  This is a compatible change.  On all platforms available in
     SICStus Prolog 4.2.1 the two types are identical.  The types only
     differ on 64-bit Windows.

     As part of this change, several 'printf' conversion specifiers are
     defined as C macros to allow platform independent printing of the
     types 'SP_integer', 'SP_uinteger' and 'size_t'.  See 'SPRIdINTEGER'
     et al. in the 'sicstus.h' header.


File: relnotes.info,  Node: 4.2.2 Known Issues,  Prev: 4.2.2 Other Changes,  Up: 4.2.2 Changes

14.18.4 Known Issues
--------------------

The following are known issues with this release of SICStus.  *Note
Limitations in the Current Release:: for more information about missing
or incomplete features in this release.

   * SICStus Prolog does not verify that Prolog text is in Unicode NFC
     format.

     When reading terms, SICStus Prolog currently does not verify that
     the input text contains valid Unicode 5.0 characters in Normal Form
     C. *Note Syntax of Tokens as Character Strings:
     (sicstus)ref-syn-syn-tok.

     This is not a problem as long as the input is in the proper format
     but it will accept some input that may be rejected or interpreted
     differently in a future version of SICStus Prolog.


File: relnotes.info,  Node: 4.2.3 Changes,  Next: 4.3.0 Changes,  Prev: 4.2.2 Changes,  Up: Revision History

14.19 Changes Introduced in Version 4.2.3
=========================================

*Please note*: Version 4.2.2 was never made generally available, so if
you are upgrading from 4.2.1, then see also *note 4.2.2 Changes::.  In
particular, version 4.2.2 introduced support for 64-bit Windows.

   Version 4.2.3 introduces support for Mac OS X 10.8 in addition to
some new features and bug fixes.  *Note 4.2.0 Changes:: for changes
introduced in SICStus Prolog 4.2.

* Menu:

* 4.2.3 New Features::         New Features
* 4.2.3 Bugs Fixed::           Bugs Fixed
* 4.2.3 Other Changes::        Other Changes
* 4.2.3 Known Issues::         Known Issues


File: relnotes.info,  Node: 4.2.3 New Features,  Next: 4.2.3 Bugs Fixed,  Up: 4.2.3 Changes

14.19.1 New Features
--------------------

   * ZINC:
        - Now compatible with Version 1.6 of the G12 MiniZinc
          distribution.
        - The options 'fzn_file(FILE)', 'ozn_file(FILE)',
          'optimise(BOOL)', 'optimize(BOOL)' are new.
        - Solutions are printed with 'solns2out'.


File: relnotes.info,  Node: 4.2.3 Bugs Fixed,  Next: 4.2.3 Other Changes,  Prev: 4.2.3 New Features,  Up: 4.2.3 Changes

14.19.2 Bugs Fixed
------------------

   * 'predicate_property/2' with nonvar arguments would succeed
     nondeterminately.
   * 'ensure_loaded/1' would keep reloading non-module '.po' file if
     compile-time module was different from load-time module.
   * Work around bugs in OS X 10.8 that affected SICStus I/O. This
     change may also work around bugs in Linux that could cause SICStus
     to hang, especially when closing streams.
   * Error handling bug in 'phrase/[2,3]'.
   * On Windows, SICStus executables would sometimes not start if put at
     the root of a disk.
   * CLPFD:
        - Solutions were lost in interaction with nondet suspended
          goals.
        - 'cumulative/2': holes in domains could cause wrong answers.
        - 'minimum/2', 'maximum/2': some data was not protected from
          garbage collection.
     ZINC:
        - I/O streams could be left open upon errors.
        - 'viz' annotations do not cause parse errors any more.
        - Do Not obfuscate error messages from 'mzn2fzn'.
        - Architecture dependent default integer bounds.
   * 'library(types)': The type tests for 'list' and 'proper_list' now
     fail for cyclic lists.  Previously, they did not terminate.


File: relnotes.info,  Node: 4.2.3 Other Changes,  Next: 4.2.3 Known Issues,  Prev: 4.2.3 Bugs Fixed,  Up: 4.2.3 Changes

14.19.3 Other Changes
---------------------

   * The built-in predicate 'sort/2' is up to twice as fast compared to
     previous releases.
   * The built-in predicates 'sort/2' and 'keysort/2' now terminate,
     with an error, if the first argument is a cyclic list.


File: relnotes.info,  Node: 4.2.3 Known Issues,  Prev: 4.2.3 Other Changes,  Up: 4.2.3 Changes

14.19.4 Known Issues
--------------------

The following are known issues with this release of SICStus.  *Note
Limitations in the Current Release:: for more information about missing
or incomplete features in this release.

   * SICStus Prolog does not verify that Prolog text is in Unicode NFC
     format.

     When reading terms, SICStus Prolog currently does not verify that
     the input text contains valid Unicode 5.0 characters in Normal Form
     C. *Note Syntax of Tokens as Character Strings:
     (sicstus)ref-syn-syn-tok.

     This is not a problem as long as the input is in the proper format
     but it will accept some input that may be rejected or interpreted
     differently in a future version of SICStus Prolog.


File: relnotes.info,  Node: 4.3.0 Changes,  Next: 4.3.1 Changes,  Prev: 4.2.3 Changes,  Up: Revision History

14.20 Changes Introduced in Version 4.3.0
=========================================

* Menu:

* 4.3.0 New Features::         New Features
* 4.3.0 Bugs Fixed::           Bugs Fixed
* 4.3.0 Standard Conformance Changes:: Changes Related to Standard Conformance
* 4.3.0 Other Changes::        Other Changes
* 4.3.0 Known Issues::         Known Issues


File: relnotes.info,  Node: 4.3.0 New Features,  Next: 4.3.0 Bugs Fixed,  Up: 4.3.0 Changes

14.20.1 New Features
--------------------

   * On some platforms, SICStus Prolog now has the ability to compile
     predicates just in time (JIT) to native code.  In this release,
     those platforms are the x86 ones, 32 and 64 bit, running Windows,
     OS X, and Linux.  This happens automatically by default, but can be
     switched off with the option:

          '-DSP_JIT=disabled'

     The following mutually exclusive predicate properties have also
     been added:

     'jittable'
          The predicate is amenable to JIT compilation.
     'jitted'
          The predicate has been JIT compiled.

   * New stream properties 'input_encoding/1' and 'output_encoding/1'.
   * CLPFD:
        - 'solve/2' generalizes 'labeling/2' and can perform
          optimization over multiple sets of domain variables, with
          different search heuristics per set.
        - 'labeling/2' with the option 'minimize/1' or 'maximize/1' can
          either enumerate every solution that improves the objective
          function, or only the optimal one after optimality has been
          proved, under the control of the new options 'best' and 'all'.
          The same options are available to the predicates 'minimize/3'
          and 'maximize/3'.
        - 'labeling/2' with the option 'minimize/1' or 'maximize/1' can
          be told which optimization method to use with the new options
          'bab' and 'restart'.
        - More labeling options, inspired by MiniZinc: 'input_order',
          'smallest', 'largest', 'first_fail', 'anti_first_fail',
          'occurrence', 'most_constrained', 'max_regret', 'median',
          'middle'.
        - New constraints: 'bool_and/2', 'bool_or/2', 'bool_xor/2',
          'bool_channel/4'.
        - 'all_different/2' and 'all_distinct/2' take a new
          side-constraint option L #= R, where L is a sum, a product, or
          a sum of squares of the variables, and R is an integer.
        - 'div', floored division, is a new binary arithmetic operator.
          Corresponds to the new Prolog arithmetic operator with the
          same name.
        - '//', truncated division, is a new alias for the existing
          binary operator '/'.  Please note that the Prolog arithmetic
          operators '/' and '//' do *not* mean the same thing.
   * ZINC:
        - The limitation that search annotations must include all
          variables or be absent has been lifted.
        - The limitation that 'solutions(all)' had no effect on
          optimization problems has been lifted.
        - 'search(bab)' and 'search(restart)' are new options for
          choosing optimization method.
        - 'mzn-sicstus' is a shortcut for 'minizinc' with the proper
          defaults for using SICStus as back-end.
        - 'spfz' is a small FlatZinc interpreter command-line tool for
          use from the shell.  Invoked by 'mzn-sicstus'.
   * 'library(structs)', 'library(objects)': The types 'integer_64' and
     'unsigned_64' have been added for all platforms.
   * PROCESS:
        - A new option 'wait(Status)' to 'process:process_create/3' that
          simplifies waiting for a started process to terminate.
        - 'process:process_create/[2,3]' now uses
          'file_type(executable)' when resolving the path to the
          executable.  This affects the Windows platform where '.exe'
          will be added automatically, if needed.
        - 'process:process_create/3' now allows a general argument
          specification when specifying the values of environment
          variables passed to the subprocess.
        - On Windows, when starting a console application with
          'process:process_create/[2,3]', a console window is not
          created unless the option 'window(true)' is specified.
   * Executables created by the 'spld' tool now set the process locale
     from the environment (UNIX-like platforms only).  The locale can
     also be passed as an argument to 'spld'.
   * '--objects' is a new 'splfr' option, which you must use if the
     Prolog source code uses 'library(objects)'.


File: relnotes.info,  Node: 4.3.0 Bugs Fixed,  Next: 4.3.0 Standard Conformance Changes,  Prev: 4.3.0 New Features,  Up: 4.3.0 Changes

14.20.2 Bugs Fixed
------------------

   * Compiler bug, surfaced for example for 'r(b) :- Y = b, t(X,Y).'.
   * Error handling bug in floating point overflows caused (a) spurious
     memory resource errors, (b) different interpreted and compiled
     behavior.
   * 'SP_printf()' stopped working if the output exceeded 2048 bytes.
   * Unintended limitation, max 100 million interpreted clauses in
     memory, lifted.
   * 'predicate_property/2' with nonvar second argument would lose
     solutions.
   * 'add_breakpoint/2' warns if an undefined predicate is specified; it
     used to silently accept any well-formed predicate identifier.
   * 'length/2': used to loop if first argument cyclic or second
     argument very large.  Conformance with proposed future ISO
     standard.
   * 'when/2' could cause stack overflow.
   * Declarations are silently ignored if they would have no effect.
   * '[File|Files]' now uses the calling module context for the second
     ('Files') argument, as documented.
   * 'ensure_loaded/1' would keep reloading non-module '.po' files whose
     name did not correspond to an existing source file.
   * 'stream_property(S,encoding(CS))' would succeed twice for
     bi-directional text streams.  It now succeeds at most once and the
     per-direction encoding information can be obtained with the new
     stream properties 'input_encoding/1' and 'output_encoding/1'.
   * 'call_cleanup/2': memory management could cause the cleanup action
     to be delayed.
   * In trace mode, the debugger would stop at spurious calls among code
     in hidden modules, which was never intended.
   * On Windows, the 'absolute_file_name/3' option 'glob/1' is now
     case-normalized, just like the file name.
   * 'aggregate:term_variables/3' steadfastness bug.  Note that this is
     largely made obsolecent by the new built-in 'term_variables/2'.
   * 'library(xref)' and 'spxref' would loop on cyclic import
     dependencies.
   * 'library(gauge)': logarithmic scale was broken.
   * 'library(gauge)': On OS X, menus had invisible text.
   * 'library(process)': On Windows, 'process_create/3' did not pass
     empty arguments correctly.
   * 'library(process)': Some 'process_create/3' boolean options did not
     accept the value 'false'.
   * CLPFD:
        - Bad use of the global constraint API could crash SICStus.
        - Critical bug in bounds-consistent 'all_different/1'.
        - Enabling FDBG could cause missing propagation.
        - 'geost/[2,3,4]': memory performance bug; ignored the 'lex/1'
          option in greedy assignment mode
        - Bugs in flattening logical and arithmetical expressions.
        - 'X #= Y', with unbound X and Y, was handled by unification.
          This failed to type X and Y as domain variables, and was often
          bad for performance.  Now, such equations are handled by a
          propagator.
   * ZINC:
        - Parsing floats was broken, causing spurious errors.
        - The 'fzn_file/1' and 'ozn_file/1' options misbehaved if used
          without explicit '.fzn' and '.ozn' extensions.
        - Empty arrays caused spurious existence errors.
   * CHR:
        - '+' and '-' are no longer incompatibly defined as prefix
          operators.
   * In the build for 64-bit OS X 10.8, 'library(tcltk)' would crash the
     process.
   * The 'codes' command specification was incorrectly documented as
     'chars'.
   * On Windows, 'pillow:fetch_url/3' would sometimes time out for some
     web servers.
   * A bug in Microsoft J# caused PrologBeans.NET to transmit some data
     incorrectly from Prolog to .NET.
   * The 'splfr' tool now ensures that the C compiler will find the
     generated headers also when the '--namebase' option specifies a
     folder.


File: relnotes.info,  Node: 4.3.0 Standard Conformance Changes,  Next: 4.3.0 Other Changes,  Prev: 4.3.0 Bugs Fixed,  Up: 4.3.0 Changes

14.20.3 Changes Related to Standard Conformance
-----------------------------------------------

SICStus Prolog now complies with Technical Corrigenda 1, 2 and 3 to the
International Standard ISO/IEC 13211-1 (PROLOG: Part 1--General Core).

   * 'throw/1' now throws its argument as is.  'raise_exception/1'
     however transforms SICStus error terms into ISO ('error/2')
     exceptions.  Unless a forged SICStus error term is thrown by
     'throw/1', the net behavior is unchanged.
   * In cases where the ISO and SICStus error term previously had
     different principal functors, the SICStus error term has been
     changed to correspond to the ISO one.
   * 'subsumes_term/2' is a new standard built-in predicate, aliased by
     'terms:subsumeschk/2', and is now correct in case the arguments
     share variables.
   * 'term_variables/2' is a new standard built-in predicate, aliased by
     'terms:term_variables_bag/2', and performs conformant error
     handling.  'terms:term_variables/2' has been renamed to
     'terms:term_variables_set/2'.
   * 'acyclic_term/2', previously in 'library(terms)', is now a standard
     built-in predicate.
   * The built-in predicates 'callable/1', 'ground/1', 'retractall/1',
     'call/n', 'false/0' are now standard.
   * The built-in predicates 'number_codes/2', 'number_chars/2',
     'atom_codes/2', and 'atom_chars/2' now perform conformant error
     handling.  The syntax for numbers has changed (plus sign is no
     longer allowed(1)).  Full ISO syntax allowed in Codes/Chars,
     including layout and comments.
   * The built-in predicates 'length/2', 'keysort/2', 'sort/2',
     'compare/3', and 'open/[3,4]' now perform conformant error
     handling.
   * The built-in predicates 'call/1', 'assert/1' and similar predicates
     now perform conformant error handling when encountering an invalid
     goal.
   * 'X div Y' is a new standard arithmetic expression, whose value is
     the _integer_ quotient of X and Y, rounded downwards to the nearest
     integer.

   * 'xor(X,Y)' is the standard syntax for 'X \ Y'.
   * 'X ^ Y' is a new standard arithmetic expression, whose value is X
     raised to the power of Y, represented as a float if any of X and Y
     is a float; otherwise, as an integer.
   * 'pi' is a new standard arithmetic expression, whose value is
     approximately 3.14159.
   * '+' is a new standard prefix operator declared as ':-op(200, fy,
     [+])'.
   * '|' can now be declared as an operator.  The default, when it has
     not been declared as an operator, is to treat it like before, i.e.
     as a synonym for the standard infix ';' when used as an operator.
     If '|' is declared as an operator, then you can no longer use '|'
     to denote disjunction in clause bodies and grammar rules.  So,
     declaring '|' as an operator is not recommended.  *Please note:* A
     future version of the ISO Prolog standard is likely to define '|'
     as an operator.
   * Arithmetic error handling is now conformant.  Previously, in many
     cases a domain error would be thrown where an evaluation error was
     required.
   * Quoted atoms are no longer written with the non-conformant escape
     sequences '\e' and '\d'.  They are still allowed when reading,
     though.
   * Operators as immediate argument of an operator are now bracketed
     when written, as required by the standard.  E.g. 'writeq(^(*,\+))'
     outputs '(*)^(\+)'.
   * 'clause/[2,3]' and 'retract/1' return a close equivalent to the
     asserted clause, as required by the standard.  This also affects
     'listing/[0,1]'.
   * The 'read_term/[2,3]' option 'singletons/1' is now conformant.  It
     now includes all named variables that occur only once in the read
     term, as required by the standard.  It used to exclude some
     variables for which singleton warnings should not be emitted, e.g.
     '_A'.  Any such filtering must now be performed by the caller
     instead.
   * The 'read_term/[2,3]' options 'variable_names/1' and 'singletons/1'
     now order their entries by the order the variable occurred in the
     input term, i.e. in the same order as the 'variables/1' option.  In
     previous releases the order was undefined, and unpredictable.  The
     new ordering is permitted, but not (yet) required, by the standard.
   * The Prolog parser, 'read_term/[2,3]', now correctly parses some
     valid input that used to give syntax error.
   * Back-quote, '`', can no longer be used for quoting atoms.  Use the
     standard conformant single-quote ''' instead.
   * The 'write_term/[2,3]' option 'numbervars(true)' (also used by
     'writeq/[1,2]' and others), is now standard compliant and only
     affects terms '$VAR(N)' when N is a non-negative integer.  In
     particular it no longer does special processing when N is an atom.

     To supply names for variables when writing a term you can use the
     new option 'variable_names/1' that takes a list of 'NAME=VARIABLE'
     pairs, exactly like the list produced by the 'read_term/[2,3]'
     option 'variable_names/1'.

     To get the legacy behavior, where ''$VAR'(NAME)' is written as NAME
     when NAME is an atom, you can use the new option
     'legacy_numbervars(true)' which behaves like 'numbervars(true)' did
     in earlier releases.
   * A negative zero floating point value is now written as '0.0',
     rather than '-0.0'.  There is no difference in behavior between
     these two zero values so the distinction should no longer be
     detectable by Prolog code.

   ---------- Footnotes ----------

   (1) A term written by a previous release will still be read correctly
by this release.  A term written by this release will be read correctly
by releases prior to 4.3, except if the written term contains a prefix
'+' operator with a non-negative number as argument.


File: relnotes.info,  Node: 4.3.0 Other Changes,  Next: 4.3.0 Known Issues,  Prev: 4.3.0 Standard Conformance Changes,  Up: 4.3.0 Changes

14.20.4 Other Changes
---------------------

   * Windows XP is no longer supported since it has reached its end of
     life
     (<https://www.microsoft.com/en-us/windows/enterprise/endofsupport.aspx>)
   * Solaris 8 and 9 are no longer supported.  Solaris 10 is still
     supported on both SPARC and x86/x86_64 platforms.
   * Mac OS X 10.5 Leopard and Mac OS X 10.6 Snow Leopard are no longer
     supported.  Mac OS X 10.7 and later are supported (64-bit only).
   * The Emacs mode will not actively be maintained for XEmacs.  GNU
     Emacs is still fully supported and we will consider fixing reported
     XEmacs problems.  Users are encouraged to migrate to SPIDER (*note
     SICStus Prolog IDE: (sicstus)SPIDER.).
   * The Prolog flags 'single_var_warnings' and 'discontiguous_warnings'
     are now volatile with default value 'off' in runtime systems.  This
     means that, as before, in runtime systems, these warnings are off
     by default, but now they can be switched on.
   * 'absolute_file_name/[2,3]' no longer treats the file name 'user' in
     a special way, by default.  The new option 'if_user/1' is available
     if the old behavior is needed.
   * 'absolute_file_name/[2,3]' now applies the same kind of
     case-normalization to the 'extensions/1' and 'glob/1' arguments as
     to the file name.  This affects Windows, where
     'extensions(['.pl'])' now will have the same effect as
     'extensions(['.PL'])'.  Prior to release 4.3 the 'extensions/1' and
     'glob/1' options were case sensitive on all platforms.
   * On Windows, 'open/[3,4]', and other built-in predicates that
     creates files and directories, no longer applies case-normalization
     on the file name before creating a file.  This means that
     'open/[3,4]' creates files using the same character case as
     specified in the file argument.  The stream property 'file_name/1'
     is not affected, i.e. it still shows a case-normalized name.  This
     change is mostly invisible from Prolog but it means that creating a
     file with 'open('HelloWorld.txt', write, S)' will now create file
     named 'HelloWorld.txt' whereas earlier releases would create a file
     'helloworld.txt'.
   * 'library(types)': GOAL and ARITY arguments are now checked.
   * Jasper: Java 6, e.g. JDK 1.6, or later is required for all Java
     code.
   * Jasper: On OS X, the file suffix for the SICStus Java Native
     Library has changed from '.jnilib' to '.dylib', for compatibility
     with Java 8.
   * 'library(lists)': 'is_list/1' and 'proper_length/2' now fail for
     cyclic lists.  They used to not terminate.
   * CLPFD:
        - Some options of 'table/3' and 'case/4' have gone obsolete.
        - Machine capacities of 'cumulatives/3' do not need to be fixed.
   * ZINC: The FlatZinc parser is significantly faster, and solving is
     often faster too.  Several search options now have support in C.
   * The unsupported 'library(tkconsole)' and 'tcltk:tk_terminal/5' has
     been ported from SICStus 3 to SICStus 4.


File: relnotes.info,  Node: 4.3.0 Known Issues,  Prev: 4.3.0 Other Changes,  Up: 4.3.0 Changes

14.20.5 Known Issues
--------------------

The following are known issues with this release of SICStus.  *Note
Limitations in the Current Release:: for more information about missing
or incomplete features in this release.

   * SICStus Prolog does not verify that Prolog text is in Unicode NFC
     format.

     When reading terms, SICStus Prolog currently does not verify that
     the input text contains valid Unicode 5.0 characters in Normal Form
     C. *Note Syntax of Tokens as Character Strings:
     (sicstus)ref-syn-syn-tok.

     This is not a problem as long as the input is in the proper format
     but it will accept some input that may be rejected or interpreted
     differently in a future version of SICStus Prolog.


File: relnotes.info,  Node: 4.3.1 Changes,  Next: 4.3.2 Changes,  Prev: 4.3.0 Changes,  Up: Revision History

14.21 Changes Introduced in Version 4.3.1
=========================================

* Menu:

* 4.3.1 New Features::         New Features
* 4.3.1 Bugs Fixed::           Bugs Fixed
* 4.3.1 Known Issues::         Known Issues


File: relnotes.info,  Node: 4.3.1 New Features,  Next: 4.3.1 Bugs Fixed,  Up: 4.3.1 Changes

14.21.1 New Features
--------------------

'library(clfpd)' has the following new features, but see also below for
bugs fixed in 'library(fdbg)':

   * The constraint 'keysorting/[2,3]', analogous to Prolog's
     'keysort/2', is new.
   * 'scalar_product/5' takes a new option stating that some of the
     variables must belong to a given set of integers.
   * 'element/3' with a ground second argument and binary 'table/[2,3]'
     have been re-implemented and run faster.


File: relnotes.info,  Node: 4.3.1 Bugs Fixed,  Next: 4.3.1 Known Issues,  Prev: 4.3.1 New Features,  Up: 4.3.1 Changes

14.21.2 Bugs Fixed
------------------

   * Since 4.3.0, the garbage collector could make inconsistent changes
     to the choicepoint stack.
   * Since 4.3.0, character code constants specified with '0'...' would
     give a syntax error for non-Latin 1 characters.
   * Since 4.3.0, printing variable bindings while debugging consulted
     code was broken.
   * Foreign functions returning an invalid float or UTF-8 sequence
     could cause a crash.
   * JIT compiler could underestimate memory need.
   * CLPFD:
        - 'cumulative/2' could crash on special cases.  Since 4.3.0,
          'geost/[2,3,4]' could be too conservative in greedy assignment
          mode
        - Since 4.3.0, 'labeling([minimize(X), time_out(1000, F)], [X])'
          and similar goals would leave 'F' unbound upon success.

   * FDBG:
        - Was broken since at least 4.3.0, now works as intended.
        - A major limitation was lifted: previously, only global
          constraints were debuggable, and constraint expansion would
          depend on the 'debug' CLPFD flag.  Now, all constraints are
          debuggable, and constraint expansion does not depend on any
          flags.

   * ZINC:
        - Some global definition files failed to include 'sicstus.mzn'.

   * 'process:process_wait/3' with the 'timeout/1' option would raise an
     exception if called more than once even if the first call reported
     timeout.


File: relnotes.info,  Node: 4.3.1 Known Issues,  Prev: 4.3.1 Bugs Fixed,  Up: 4.3.1 Changes

14.21.3 Known Issues
--------------------

The following are known issues with this release of SICStus.  *Note
Limitations in the Current Release:: for more information about missing
or incomplete features in this release.

   * The .NET interface to 'library(prologbeans)' uses 'J#'.  The use of
     J# has several disadvantages, since J# is no longer actively
     developed by Microsoft.

        - Microsoft _mainstream support_ for J# has ended (but _extended
          support_ will be available from Microsoft until October 2017).

        - J# requires a separate runtime.

        - The .NET on-line documentation for the .NET PrologBeans module
          has various issues, including broken links, and Java-specific
          wording.

     Our plan is to re-implement the .NET support in C#.  For more
     information about J#, see
     <http://msdn.microsoft.com/en-US/vstudio/bb188593>.

   * SICStus Prolog does not verify that Prolog text is in Unicode NFC
     format.

     When reading terms, SICStus Prolog currently does not verify that
     the input text contains valid Unicode 5.0 characters in Normal Form
     C. *Note Syntax of Tokens as Character Strings:
     (sicstus)ref-syn-syn-tok.

     This is not a problem as long as the input is in the proper format
     but it will accept some input that may be rejected or interpreted
     differently in a future version of SICStus Prolog.


File: relnotes.info,  Node: 4.3.2 Changes,  Next: 4.3.3 Changes,  Prev: 4.3.1 Changes,  Up: Revision History

14.22 Changes Introduced in Version 4.3.2
=========================================

* Menu:

* 4.3.2 New Features::         New Features
* 4.3.2 Bugs Fixed::           Bugs Fixed
* 4.3.2 Other Changes::        Other Changes
* 4.3.2 Known Issues::         Known Issues


File: relnotes.info,  Node: 4.3.2 New Features,  Next: 4.3.2 Bugs Fixed,  Up: 4.3.2 Changes

14.22.1 New Features
--------------------

   * The predicate 'lists:keyclumped/2' has been re-implemented in C and
     now provides the same amount of error handling as 'keysort/2'.
   * 'process:process_create/3' can now communicate with the sub-process
     using binary streams or with nonstandard character encodings.
   * The predicate 'chr:find_chr_constraint/1' finds a constraint in the
     store.
   * The Emacs command 'C-c <' sets the print depth for the bindings
     window as well as for the top level.  Prompts for an integer value.
     Equivalent to the '<' top-level command.


File: relnotes.info,  Node: 4.3.2 Bugs Fixed,  Next: 4.3.2 Other Changes,  Prev: 4.3.2 New Features,  Up: 4.3.2 Changes

14.22.2 Bugs Fixed
------------------

   * Reloading code during debugging could crash.
   * 'ordsets:ordset_order/3' bug fixed.
   * Some ISO annotations were missing.
   * CLPFD:
        - Critical GC hazard bug fixed.
        - The constraint 'multi_cumulative/[2,3]', added in 4.3.1, did
          not make it into the manual.
        - Efficiency bug while posting binary 'table/[2,3]' constraints
          fixed.
   * PrologBeans: 'PBTerm.isAtomic()' was false for all terms, including
     atomic terms.


File: relnotes.info,  Node: 4.3.2 Other Changes,  Next: 4.3.2 Known Issues,  Prev: 4.3.2 Bugs Fixed,  Up: 4.3.2 Changes

14.22.3 Other Changes
---------------------

   * Improved performance of several memory management services: memory
     allocation, dead clause reclamation, backtracking in dynamic code.
     Less memory fragmentation.
   * The PrologBeans .NET code has been rewritten in C#.  This makes it
     compatible with recent versions of .NET and removes the dependency
     on the legacy J# language runtime.  *Note PrologBeans .NET Notes::,
     for more information.


File: relnotes.info,  Node: 4.3.2 Known Issues,  Prev: 4.3.2 Other Changes,  Up: 4.3.2 Changes

14.22.4 Known Issues
--------------------

The following are known issues with this release of SICStus.  *Note
Limitations in the Current Release:: for more information about missing
or incomplete features in this release.

   * SICStus Prolog does not verify that Prolog text is in Unicode NFC
     format.

     When reading terms, SICStus Prolog currently does not verify that
     the input text contains valid Unicode 5.0 characters in Normal Form
     C. *Note Syntax of Tokens as Character Strings:
     (sicstus)ref-syn-syn-tok.

     This is not a problem as long as the input is in the proper format
     but it will accept some input that may be rejected or interpreted
     differently in a future version of SICStus Prolog.


File: relnotes.info,  Node: 4.3.3 Changes,  Next: 4.3.4 Changes,  Prev: 4.3.2 Changes,  Up: Revision History

14.23 Changes Introduced in Version 4.3.3
=========================================

* Menu:

* 4.3.3 New Features::         New Features
* 4.3.3 Other Changes::        Other Changes
* 4.3.3 Bugs Fixed::           Bugs Fixed
* 4.3.3 Known Issues::         Known Issues


File: relnotes.info,  Node: 4.3.3 New Features,  Next: 4.3.3 Other Changes,  Up: 4.3.3 Changes

14.23.1 New Features
--------------------

   * Execution profiles now include internal predicates, which reside in
     the 'prolog' module.  They can account for a significant part of
     the execution profile, and were hidden previously.
   * 'library(ugraphs)': 'transitive_reduction/2', 'max_cliques/2' are
     new.
   * 'library(types)': new type 'boolean', similar to
     'oneof([true,false])'.
   * 'library(types)': The type 'oneof(X,L)' now requires that 'X' is
     ground and it no longer binds variables in 'L'.  This makes it
     useful in some new cases, e.g. for "matching" compound structures,
     e.g. 'must_be(X, list(oneof([foo(_),bar(_,_)])))' can now be used
     to verify that 'X' is a (ground) compound term with functor 'foo/1'
     or 'bar/2'.

     Previously 'oneof(X,L)' only worked correctly when 'L' was a list
     of atomic terms, and for such usage the behavior is unchanged.

   * ZINC: upgraded to and compatible with MiniZinc 2.0.
   * CLPFD: more filtering in 'circuit/1'.


File: relnotes.info,  Node: 4.3.3 Other Changes,  Next: 4.3.3 Bugs Fixed,  Prev: 4.3.3 New Features,  Up: 4.3.3 Changes

14.23.2 Other Changes
---------------------

   * JIT speed improvements.
   * The legacy J# version of PrologBeans has been removed in this
     release.  It was deprecated in SICStus Prolog 4.3.2.  Contact
     SICStus Support if you need the old J# version.


File: relnotes.info,  Node: 4.3.3 Bugs Fixed,  Next: 4.3.3 Known Issues,  Prev: 4.3.3 Other Changes,  Up: 4.3.3 Changes

14.23.3 Bugs Fixed
------------------

   * do loops ('do/2'): documentation clarified.
   * During compilation with the debugger switched on, it would
     spuriously stop at some 'structs' predicates.
   * Documentation incorrectly mentioned non-ISO float syntax SIGN 'inf'
     and SIGN 'nan'.
   * Error handling of 'mod/2' and friends.
   * Incorrect result when using 'compare/3' et al. on atoms and
     functors with 'NUL' characters in their names, e.g. ''foo\0\bar''.
     'NUL' is now treated as smaller than all other character codes.
   * Attributed variables that have been deterministically bound were
     not garbage collected.
   * Compiler warnings referring to variable names were ugly.
   * 'use_module/2' et al. with empty import list no longer generate a
     message about "module ...  imported into ...".
   * Efficiency bug in 'SP_query()' and friends.
   * Decompiled code sometimes missed 'var/1' and 'nonvar/1' tests.
   * Efficiency bug affecting 'call_cleanup/2', 'findall/3' and friends,
     and I/O.
   * Minor issue when writing terms if ''.'' or ''$VAR'' has been
     declared as operators.
   * 'call/1' at al. could hang, uninterruptibly, for certain cyclic
     goals.
   * 'SP_put_float()' will now fail if the argument is not finite (i.e.
     if the argument is +/-inf or NaN).
   * Error handling of 'bb_get/2', 'bb_put/2', 'bb_delete/2',
     'bb_update/3'.
   * On OS X, 'sicstus' would sometimes fail to set the locale, and
     would fail to launch.  This could prevent 'M-x run-prolog' from
     starting Prolog in Emacs.
   * 'library(atts)': documentation and error handling.
   * 'ugraphs:transitive_closure/2' and 'wgraphs:transitive_closure/2':
     wrong answer for cyclic graphs.
   * 'lists:same_length/2', 'lists:same_length/3', 'lists:rotate_list/2'
     and 'lists:rotate_list/3' left a choicepoint behind for same cases
     when an argument was a partial list.
   * 'ugraph:random_ugraph/3' would loop if its output argument failed
     to unify with the resulting graph.
   * 'ordsets:ord_intersection/4' left a choicepoint behind.
   * In the Emacs mode, some code formatting variables have been marked
     as "safe local variables" so that they can be set when opening a
     file, without eliciting a prompt from Emacs.
   * CLPFD:
        - Finite but very large domains could crash.
        - Some propagators could access uninitialized data.
        - Wrong attribute projection of 'minimum/2' and 'maximum/2'.


File: relnotes.info,  Node: 4.3.3 Known Issues,  Prev: 4.3.3 Bugs Fixed,  Up: 4.3.3 Changes

14.23.4 Known Issues
--------------------

The following are known issues with this release of SICStus.  *Note
Limitations in the Current Release:: for more information about missing
or incomplete features in this release.

   * SICStus Prolog does not verify that Prolog text is in Unicode NFC
     format.

     When reading terms, SICStus Prolog currently does not verify that
     the input text contains valid Unicode 5.0 characters in Normal Form
     C. *Note Syntax of Tokens as Character Strings:
     (sicstus)ref-syn-syn-tok.

     This is not a problem as long as the input is in the proper format
     but it will accept some input that may be rejected or interpreted
     differently in a future version of SICStus Prolog.


File: relnotes.info,  Node: 4.3.4 Changes,  Next: 4.3.5 Changes,  Prev: 4.3.3 Changes,  Up: Revision History

14.24 Withdrawn Version 4.3.4
=============================

This version was never released, due to critical bugs found at a late
stage.


File: relnotes.info,  Node: 4.3.5 Changes,  Next: 4.4.0 Changes,  Prev: 4.3.4 Changes,  Up: Revision History

14.25 Changes Introduced in Version 4.3.5
=========================================

* Menu:

* 4.3.5 New Features::         New Features
* 4.3.5 Other Changes::        Other Changes
* 4.3.5 Bugs Fixed::           Bugs Fixed
* 4.3.5 Known Issues::         Known Issues


File: relnotes.info,  Node: 4.3.5 New Features,  Next: 4.3.5 Other Changes,  Up: 4.3.5 Changes

14.25.1 New Features
--------------------

   * 'library(csv)' is a new library module that provides I/O on
     comma-separated values (CSV) files and strings.
   * 'library(statistics)' is a new library module that provides
     commonly used sample and population statistics functions.
   * CLPFD: propagation for 0/1-variables is generally faster.


File: relnotes.info,  Node: 4.3.5 Other Changes,  Next: 4.3.5 Bugs Fixed,  Prev: 4.3.5 New Features,  Up: 4.3.5 Changes

14.25.2 Other Changes
---------------------

   * Improved speed of various I/O routines.


File: relnotes.info,  Node: 4.3.5 Bugs Fixed,  Next: 4.3.5 Known Issues,  Prev: 4.3.5 Other Changes,  Up: 4.3.5 Changes

14.25.3 Bugs Fixed
------------------

   * Using 'call/1', et al. on '\+' and 'once/1' could sometimes be slow
     if the argument was a huge term.  This problem was introduced in
     SICStus 4.3.3.

   * Various problems, including crashes, could happen if SICStus was
     re-initialized.  This was caused by a dangling pointer after
     calling 'SP_deinitialize()'.  These crashes often showed 'strtod.c'
     in the backtrace.
   * On Windows, 'file_systems:make_directory/1' would fail for very
     long paths.
   * Retrieving source info for exceptions in abolished, compiled code
     could crash.
   * CLPFD:
        - Improved error handling for malformed set expressions and for
          'sum/3'.
        - Better propagation in special cases of product and quotient.
        - Better attribute projection for 'min/2', 'max/2', 'minimum/2',
          and 'maximum/2'.


File: relnotes.info,  Node: 4.3.5 Known Issues,  Prev: 4.3.5 Bugs Fixed,  Up: 4.3.5 Changes

14.25.4 Known Issues
--------------------

The following are known issues with this release of SICStus.  *Note
Limitations in the Current Release:: for more information about missing
or incomplete features in this release.

   * SICStus Prolog does not verify that Prolog text is in Unicode NFC
     format.

     When reading terms, SICStus Prolog currently does not verify that
     the input text contains valid Unicode 5.0 characters in Normal Form
     C. *Note Syntax of Tokens as Character Strings:
     (sicstus)ref-syn-syn-tok.

     This is not a problem as long as the input is in the proper format
     but it will accept some input that may be rejected or interpreted
     differently in a future version of SICStus Prolog.


File: relnotes.info,  Node: 4.4.0 Changes,  Next: 4.4.1 Changes,  Prev: 4.3.5 Changes,  Up: Revision History

14.26 Changes Introduced in Version 4.4.0
=========================================

* Menu:

* 4.4.0 New Features::         New Features
* 4.4.0 Other Changes::        Other Changes
* 4.4.0 Bugs Fixed::           Bugs Fixed
* 4.4.0 Known Issues::         Known Issues


File: relnotes.info,  Node: 4.4.0 New Features,  Next: 4.4.0 Other Changes,  Up: 4.4.0 Changes

14.26.1 New Features
--------------------

   * Indexing on large integers and floats is no longer coarse, but
     exact.
   * Shorter interrupt latency for arithmetics.
   * ZINC: upgraded to and compatible with MiniZinc 2.1.6.
   * CLPFD:
        - In order to distinguish an unsatisfiable problems from one
          that timed out before any solution was found, if used with the
          'best' option, the 'time_out/2' option has a slightly
          different output.
        - A new bin-packing constraint, using Shaw's algorithm.
        - Shorter interrupt latency for a lot of constraints.
        - 'table/[2,3]' uses the fast Compact Table algorithm by
          Demeulenaere et al. for relations over three or more
          variables.
        - Speed up some special cases of 'element/3', 'bool_and/2',
          'bool_or/2', 'bool_xor/2'.
        - Remove obsolete options.


File: relnotes.info,  Node: 4.4.0 Other Changes,  Next: 4.4.0 Bugs Fixed,  Prev: 4.4.0 New Features,  Up: 4.4.0 Changes

14.26.2 Other Changes
---------------------

   * SICStus Prolog now complies with Technical Corrigenda 1, 2 and 3 to
     the International Standard ISO/IEC 13211-1 (PROLOG: Part 1--General
     Core).

     The only user-visible change is the choice of error exceptions for
     some errors: invalid, partially instantiated, non-ground options
     now result in domain errors.  They used to result in instantiation
     errors.

   * 'library(timeout)' has been completely re-implemented.  It no
     longer uses a foreign resource, and it no longer uses signals.  It
     can now be used by more than one SICStus instance, in the same
     process, without restrictions.

   * Windows Vista is no longer supported since it has reached its end
     of life
     (<https://support.microsoft.com/en-us/help/13853/windows-lifecycle-fact-sheet>)


File: relnotes.info,  Node: 4.4.0 Bugs Fixed,  Next: 4.4.0 Known Issues,  Prev: 4.4.0 Other Changes,  Up: 4.4.0 Changes

14.26.3 Bugs Fixed
------------------

   * 'format/3' could crash with certain parameters to the '~*'
     construct (and the equivalent inline form).  For some format
     control options, this was fixed by restricting the magnitude of the
     '~*' parameter.
   * Profiling could crash.
   * Locating source info for exceptions could crash.
   * Minor efficiency bug in backtracking in dynamic code.
   * Efficiency bug in 'append(L1,L2,L3)' if called with 'L1' not a
     proper list.
   * Reading a term could crash under low memory conditions.
   * Multiple problems with the compatibility library 'system3'.

   * In some cases, large integers could overflow when converting to
     floating point values.  This could lead to incorrect behavior:

        - For arithmetic expressions, e.g. 'sin/1' and '(/)/2', which
          implicitly take floating point values, a float overflow error
          will now be thrown if the argument evaluates to a large
          integer that will not fit in a floating point value.

          In some cases this now throws an error, where earlier versions
          computed a sensible result, e.g. 'X is 1/(1<<1024)' would
          compute 'X = 0.0' but now throws an error (because the value
          of '(1<<1024)' is a large integer that does not fit in a
          floating point number).
        - 'SP_get_float()' now fails if the argument term is a large
          integer that does not fit in a C double.  It used to return an
          infinity value.
        - Foreign resource code using the type '+float', or code that
          use the 'library(structs)' floating point types, will now give
          an error if the argument is a large integer that does not fit
          in the destination type.

   * In some cases, floating point negative zero, not a number (NaN) and
     positive or negative infinity could enter the system.  These values
     are not supported, and caused various incorrect behavior:

        - Reading the text '-0.0' now creates an ordinary (unsigned)
          floating point zero.
        - 'SP_put_float(-0.0)' now creates an ordinary (unsigned)
          floating point zero.
        - 'SP_put_float(-inf)', 'SP_put_float(+inf)' and
          'SP_put_float(NaN)' fail(1).
        - Foreign resource code using the type '-float', or code that
          use the 'library(structs)' floating point types, will now
          throw an error if the value is not finite.  Negative zero will
          treated as an ordinary (unsigned) floating point zero.

          This means that a call to a foreign function can throw an
          exception when the function returns to Prolog, if it attempts
          to return a non-finite result.

   * Foreign resource code using the type '+integer', or code that uses
     the 'library(structs)' integer types, will now give an error if the
     argument is a large integer that does not fit in the destination
     type.
   * 'spld --extended-rt' failed unless '--license-file' was specified.
     Now it tries to find the license in the "usual" places.
   * ZINC: With the 'timeout/1' option of various predicates and the
     'spfz' option '-time TIME' together with one-solutions search, no
     solution was reported at time-out, even if some solution had been
     found during optimization search.
   * CLPFD:
        - Incorrect special case for 'bool_channel/4'.
        - Propagation bug when mixing 'dif/2' and reified constraints.
        - Idempotency and correctness bugs in multiple global
          constraints.

   ---------- Footnotes ----------

   (1) This was fixed already in 4.3.3.


File: relnotes.info,  Node: 4.4.0 Known Issues,  Prev: 4.4.0 Bugs Fixed,  Up: 4.4.0 Changes

14.26.4 Known Issues
--------------------

The following are known issues with this release of SICStus.  *Note
Limitations in the Current Release:: for more information about missing
or incomplete features in this release.

   * SICStus Prolog does not verify that Prolog text is in Unicode NFC
     format.

     When reading terms, SICStus Prolog currently does not verify that
     the input text contains valid Unicode 5.0 characters in Normal Form
     C. *Note Syntax of Tokens as Character Strings:
     (sicstus)ref-syn-syn-tok.

     This is not a problem as long as the input is in the proper format
     but it will accept some input that may be rejected or interpreted
     differently in a future version of SICStus Prolog.


File: relnotes.info,  Node: 4.4.1 Changes,  Next: 4.5.0 Changes,  Prev: 4.4.0 Changes,  Up: Revision History

14.27 Changes Introduced in Version 4.4.1
=========================================

Version 4.4.1 is a bugfix release only, no new features have been added.

* Menu:

* 4.4.1 Bugs Fixed::           Bugs Fixed
* 4.4.1 Known Issues::         Known Issues


File: relnotes.info,  Node: 4.4.1 Bugs Fixed,  Next: 4.4.1 Known Issues,  Up: 4.4.1 Changes

14.27.1 Bugs Fixed
------------------

   * Nested calls to 'timeout:time_out/3' would sometimes ignore the
     outer timeout limit.  This problem was introduced in SICStus 4.4.0
     in the re-implemented 'library(timeout)'.

   * The cleanup phase of 'findall/3' and friends could scan an entire
     stack in the worst case.

   * Creating a saved state ('.po', '.sav') could result in a corrupt
     file if one of the saved predicates had been redefined after being
     imported.  Loading the corrupt file could then cause SICStus to
     crash and other errors.

   * Propagation bug for 'X #= Y*Y'.


File: relnotes.info,  Node: 4.4.1 Known Issues,  Prev: 4.4.1 Bugs Fixed,  Up: 4.4.1 Changes

14.27.2 Known Issues
--------------------

The following are known issues with this release of SICStus.  *Note
Limitations in the Current Release:: for more information about missing
or incomplete features in this release.

   * SICStus Prolog does not verify that Prolog text is in Unicode NFC
     format.

     When reading terms, SICStus Prolog currently does not verify that
     the input text contains valid Unicode 5.0 characters in Normal Form
     C. *Note Syntax of Tokens as Character Strings:
     (sicstus)ref-syn-syn-tok.

     This is not a problem as long as the input is in the proper format
     but it will accept some input that may be rejected or interpreted
     differently in a future version of SICStus Prolog.


File: relnotes.info,  Node: 4.5.0 Changes,  Next: 4.5.1 Changes,  Prev: 4.4.1 Changes,  Up: Revision History

14.28 Changes Introduced in Version 4.5.0
=========================================

* Menu:

* 4.5.0 New Features::         New Features
* 4.5.0 Other Changes::        Other Changes
* 4.5.0 Bugs Fixed::           Bugs Fixed
* 4.5.0 Known Issues::         Known Issues


File: relnotes.info,  Node: 4.5.0 New Features,  Next: 4.5.0 Other Changes,  Up: 4.5.0 Changes

14.28.1 New Features
--------------------

   * Added 'library(json)' (*note JSON format serialization:
     (sicstus)lib-json.) for reading and writing structured data using
     the JSON (https://json.org/) (JavaScript Object Notation)
     serialization format.

     Also added examples that use JSON for communicating between other
     programming languages and SICStus.  Example clients are provided in
     Python, Java, C#, C, and Prolog.

   * It is now possible to suppress 'fsync()' when closing a stream
     created using the C API function 'SP_fopen()'.  This can improve
     performance when opening and closing many files.

   * The 'spld' option '--shared' can be combined with '--static' to
     produce an all-in-one shared library; see *note Runtime Systems:
     (sicstus)Runtime Systems.

   * CLPFD:
        - Constraint 'scalar_product/[4,5]' is reifiable.
        - Added constraint 'scalar_product_reif/[5,6]', the reified
          version of 'scalar_product/[4,5]'.
        - Added constraint 'value_precede_chain/[2,3]', which constrains
          the order in which values occur in a list.
        - Generic speedups.

   * ZINC: upgraded to and compatible with MiniZinc 2.2.3, with
     performance improvements.


File: relnotes.info,  Node: 4.5.0 Other Changes,  Next: 4.5.0 Bugs Fixed,  Prev: 4.5.0 New Features,  Up: 4.5.0 Changes

14.28.2 Other Changes
---------------------

   * The 'sicstus' command line flag '-l' can now be specified more than
     once and will load the files in the order specified.

   * The low-level memory allocator has been re-implemented.  The new
     implementation should be faster and avoids some poor worst-case
     behavior.

   * The memory-allocation hook 'SP_set_memalloc_hooks()' has been
     deprecated and is, by default, no longer available.  Please contact
     SICStus Support if this is a problem for you.

   * Improved performance of 'library(timeout)'.

   * A performance problem when using the Linux performance monitoring
     tool 'perf' has been fixed.

   * Stack shifting and garbage collection policies have been adjusted,
     and the 'gc_margin' Prolog flag has been given a more dynamic
     meaning.

   * Changes to the testing framework, 'library(plunit)':
        - It is now possible to programmatically obtain the number of
          successful, skipped, and failed tests.
        - The number of skipped tests, i.e. where 'condition/1' is
          false, is reported when the tests have run.
        - Multiple occurrences of some options, like 'true/1', are
          combined.  It used to quietly discard all but one.
        - Test options are more thoroughly checked, and incompatible
          options are reported.
        - Problems with options, and with test initialization, are now
          reported and counted as a failure also when the test is run.
          It used to print a warning but not be counted towards the
          number of failed tests.
        - A test body that succeeds while leaving as choice point will
          now be treated as a test failure, unless 'nondet' is
          specified.  This was always the documented behavior, but it
          used to only print a warning.

   * The Java code in libraries and examples has been cleaned up to
     avoid warnings and use of deprecated features.
   * The Java code in 'se/sics/jasper/' has been changed to use generic
     types.  This may trigger some Java compiler warnings for existing
     code.  Code that use 'raw' types may need to be updated, e.g.
     changing 'Map' to 'Map<String,Term>' for the maps that specify
     variable bindings.


File: relnotes.info,  Node: 4.5.0 Bugs Fixed,  Next: 4.5.0 Known Issues,  Prev: 4.5.0 Other Changes,  Up: 4.5.0 Changes

14.28.3 Bugs Fixed
------------------

   * Multiple bugs in interpreted do loops ('do/2').

   * Cleanup goals ('call_cleanup/2') could sometimes be woken too late
     after a cut.

   * Several problems with the way 'listing/[0,1]' displayed calls to
     meta predicates.

   * Clauses in included files did not get correct variable-name source
     info in the debugger.

   * Error handling of arithmetics could loop.

   * ZINC: The 'var_is_introduced' annotation was treated specially,
     whereas 'is_defined_var' was intended.  This could lead to invalid
     solutions.


File: relnotes.info,  Node: 4.5.0 Known Issues,  Prev: 4.5.0 Bugs Fixed,  Up: 4.5.0 Changes

14.28.4 Known Issues
--------------------

The following are known issues with this release of SICStus.  *Note
Limitations in the Current Release:: for more information about missing
or incomplete features in this release.

   * SICStus Prolog does not verify that Prolog text is in Unicode NFC
     format.

     When reading terms, SICStus Prolog currently does not verify that
     the input text contains valid Unicode 5.0 characters in Normal Form
     C. *Note Syntax of Tokens as Character Strings:
     (sicstus)ref-syn-syn-tok.

     This is not a problem as long as the input is in the proper format
     but it will accept some input that may be rejected or interpreted
     differently in a future version of SICStus Prolog.


File: relnotes.info,  Node: 4.5.1 Changes,  Next: 4.6.0 Changes,  Prev: 4.5.0 Changes,  Up: Revision History

14.29 Changes Introduced in Version 4.5.1
=========================================

Version 4.5.1 is a bugfix release only, no new features have been added.

* Menu:

* 4.5.1 Other Changes::        Other Changes
* 4.5.1 Bugs Fixed::           Bugs Fixed
* 4.5.1 Known Issues::         Known Issues


File: relnotes.info,  Node: 4.5.1 Other Changes,  Next: 4.5.1 Bugs Fixed,  Up: 4.5.1 Changes

14.29.1 Other Changes
---------------------

   * The top level now writes exceptions using the options given by the
     'toplevel_print_options' Prolog flag.  Similarly, the debugger
     writes exceptions using the options given by the
     'debugger_print_options' Prolog flag.

     By default, this means that huge (or cyclic) exception terms in the
     top level or debugger are no longer producing huge (or infinite)
     output.

   * CLPFD: search is generally faster.


File: relnotes.info,  Node: 4.5.1 Bugs Fixed,  Next: 4.5.1 Known Issues,  Prev: 4.5.1 Other Changes,  Up: 4.5.1 Changes

14.29.2 Bugs Fixed
------------------

   * The information returned by 'profile_data/1' and 'coverage_data/1'
     was sometimes inaccurate for built-in predicates.
   * Reconsulting code during debugging could cause crash.
   * CLPFD:
        - Fix bug in release 4.5.0 affecting 'fd_degree/2' and related
          labeling options.
        - Fix bug causing 'fd_neighbors/2' to sometimes return too many
          variables.
        - Fix bug causing 'labeling([minimize(...)], ...)' to succeed if
          there is no solution, also affecting MiniZinc.
        - Lift restriction that library Prolog code be compiled.


File: relnotes.info,  Node: 4.5.1 Known Issues,  Prev: 4.5.1 Bugs Fixed,  Up: 4.5.1 Changes

14.29.3 Known Issues
--------------------

The following are known issues with this release of SICStus.  *Note
Limitations in the Current Release:: for more information about missing
or incomplete features in this release.

   * SICStus Prolog does not verify that Prolog text is in Unicode NFC
     format.

     When reading terms, SICStus Prolog currently does not verify that
     the input text contains valid Unicode 5.0 characters in Normal Form
     C. *Note Syntax of Tokens as Character Strings:
     (sicstus)ref-syn-syn-tok.

     This is not a problem as long as the input is in the proper format
     but it will accept some input that may be rejected or interpreted
     differently in a future version of SICStus Prolog.


File: relnotes.info,  Node: 4.6.0 Changes,  Next: 4.7.0 Changes,  Prev: 4.5.1 Changes,  Up: Revision History

14.30 Changes Introduced in Version 4.6.0
=========================================

* Menu:

* 4.6.0 New Features::         New Features
* 4.6.0 Other Changes::        Other Changes
* 4.6.0 Bugs Fixed::           Bugs Fixed
* 4.6.0 Known Issues::         Known Issues


File: relnotes.info,  Node: 4.6.0 New Features,  Next: 4.6.0 Other Changes,  Up: 4.6.0 Changes

14.30.1 New Features
--------------------

   * 'library(is_directives)' is a new library module that provides
     access to information declared by 'is/2' directives, in particular,
     about determinacy.
   * The nondeterminacy annotations of 'print_profile/[0,1]' are
     sensitive to determinacy declarations.
   * CLPFD:
        - Added constraints 'subcircuit/[1,2]', a variant of
          'circuit/[1,2]'; 'diffn/[1,2]', a generalization and
          recommended replacement for 'disjoint1/[1,2]' and
          'disjoint2/[1,2]'; 'all_different_except_0/1', a variant of
          'all_different/1'; 'all_distinct_except_0/1', a variant of
          'all_distinct/1'; 'symmetric_all_different/1' and
          'symmetric_all_distinct/'; 'minimum_arg/2' and
          'maximum_arg/2'.
        - Added 'fd_purge/1', a means of forgetting a variable's domain
          and constraints.
   * MiniZinc:
        - Upgraded to MiniZinc 2.4.1, with standardized option flags and
          statistics output.
        - Added native support for the MiniZinc globals 'subcircuit',
          'alldifferent_except_0', 'symmetric_all_different',
          'seq_precede_chain', 'cost_regular', 'mdd', 'mdd_regular',
          'minimum_arg/2' and 'maximum_arg/2'.
        - Performance improvements.


File: relnotes.info,  Node: 4.6.0 Other Changes,  Next: 4.6.0 Bugs Fixed,  Prev: 4.6.0 New Features,  Up: 4.6.0 Changes

14.30.2 Other Changes
---------------------

   * The built-in 'frozen(+TERM,-GOAL)' has been generalized so that
     GOAL is the conjunction of all goals blocked on some variable in
     TERM.
   * Source-linked debugging now works better for code that is
     recompiled while in the debugger.
   * Improved the warnings emitted when a 'do/2' loop has local
     variables that are also used outside the loop.  The warnings are
     now suppressed in some harmless and useful cases, e.g. when a
     variable only occurs in unrelated 'do/2' loops.

     The warnings were completely disabled in 4.5 so the compiler now
     may emit warnings for some code that did not get warnings in 4.5.
   * Writing a small part of a huge term, i.e. when the 'write_term/3'
     option 'max_depth/1' is in effect, is now faster and uses less
     memory.  The main reason for this change is to improve the
     performance when the debugger writes goals.
   * Source-linked debugging now works for 'library(plunit)' tests.
   * Better compatibility when using SICStus in applications that are
     using the new "Hardened Runtime" feature
     (<https://developer.apple.com/documentation/security/hardened_runtime>)
     in macOS 10.14 Mojave or later.
   * CLPFD:
        - Faster propagation of constraints of the form 'X #= Y', 'X #=
          Y+C', and 'X #= Y-C', where 'X' and 'Y' are variables, and 'C'
          is an integer.
        - Faster propagation of domain-consistent arithmetic.
        - More propagation for special cases of '//', 'div', 'mod',
          'rem'.
   * Many improvements to how license information is manipulated on
     Windows.  In particular:
        * The 'splm.exe' license manager now does the right thing both
          when run as an ordinary user and when run as "Administrator".
        * Entering, or changing, the license using 'spwin.exe' will now
          always write it to a user-specific location, which does not
          require that it is run as "Administrator".
   * Unless otherwise noted, all Java related functionality requires at
     least Java 8.  This is not a new requirement, it has been true for
     a long time.


File: relnotes.info,  Node: 4.6.0 Bugs Fixed,  Next: 4.6.0 Known Issues,  Prev: 4.6.0 Other Changes,  Up: 4.6.0 Changes

14.30.3 Bugs Fixed
------------------

   * Cleanup goals could be woken too late.
   * Arithmetic could crash on pending unblocked goals.
   * Some improvements to source-linked debugging, e.g. after term
     expansion.
   * 'frozen/2' returned the wrong thing for variables with multiple
     blocked goals.
   * Conversion of multifile from compiled to interpreted could fail in
     special cases.
   * Starting up with '/' as the working directory could cause problems.
   * In some cases, incorrect UTF-8 encoding was not detected when
     reading text streams.
   * In the context of multiple block declarations on the same
     predicate, 'save_program/[1,2]' and friends would not preserve
     their order.
   * The C API function 'SP_expand_file_name()' ignored
     'SP_EXPAND_FILE_NAME_OPTION_NO_HOME'.
   * CLPFD:
        - 'scalar_product_reif/[5,6]': fix propagation bug in scope of
          'fd_batch/1'.
        - Fix garbage collection hazards.
        - Ensure that 'empty_interval(Min, Max)' is equivalent to
          '\+fdset_interval(_, Min, Max)', which was always intended.
   * 'library(atts)':
        - The attribute predicates could crash or misbehave if new
          attributes were defined, e.g. by loading files, while some
          variable already had attributes.
        - SICStus could crash or misbehave if many modules (more than
          255) attempted to define attributes.  The maximum number of
          modules that defines attributes remains limited, but exceeding
          the limit will not crash SICStus, but print a warning.


File: relnotes.info,  Node: 4.6.0 Known Issues,  Prev: 4.6.0 Bugs Fixed,  Up: 4.6.0 Changes

14.30.4 Known Issues
--------------------

The following are known issues with this release of SICStus.  *Note
Limitations in the Current Release:: for more information about missing
or incomplete features in this release.

   * SICStus Prolog does not verify that Prolog text is in Unicode NFC
     format.

     When reading terms, SICStus Prolog currently does not verify that
     the input text contains valid Unicode 5.0 characters in Normal Form
     C. *Note Syntax of Tokens as Character Strings:
     (sicstus)ref-syn-syn-tok.

     This is not a problem as long as the input is in the proper format
     but it will accept some input that may be rejected or interpreted
     differently in a future version of SICStus Prolog.


File: relnotes.info,  Node: 4.7.0 Changes,  Prev: 4.6.0 Changes,  Up: Revision History

14.31 Changes Introduced in Version 4.7.0
=========================================

* Menu:

* 4.7.0 New Features::         New Features
* 4.7.0 Other Changes::        Other Changes
* 4.7.0 Bugs Fixed::           Bugs Fixed
* 4.7.0 Known Issues::         Known Issues


File: relnotes.info,  Node: 4.7.0 New Features,  Next: 4.7.0 Other Changes,  Up: 4.7.0 Changes

14.31.1 New Features
--------------------

   * Added new functionality to 'library(json)' for reading and writing
     from/to atoms and lists of codes.
   * Added 'library(jsonrpc)' with examples that use JSON for
     communicating between other programming languages and SICStus.
     Example clients are provided in Python, Java, C#, C, Go, and
     Prolog.  Has existed since release 4.5.0, but now made more
     visible.
   * 'library(mutarray)' is new, and provides an implementation of
     mutable, dense arrays with constant lookup and update time for all
     indices in the best case.
   * 'library(mutdict)' is new, and provides an implementation of
     mutable dictionaries with constant lookup and update time for all
     keys in the best case.
   * 'library(lmdb)' is new, and provides functionality similar to the
     now deprecated 'library(bdb)', i.e. persistent storage of terms on
     disk.  See *note External Storage of Terms (LMDB):
     (sicstus)lib-lmdb.
   * CLPFD:
        - 'element/2' is a new constraint, similar to 'element/3'
          without the first argument.
        - 'regular/2' is a new constraint.  Constrains a sequence of
          variables to be recognized by a regular expression.
        - 'all_equal/1' and 'all_equal_reif/2' are new constraints.
          Constrains a sequence of variables to be all equal.
        - 'fd_failures/2' and 'fd_set_failures/2' are new reflection
          predicates, to access the number of times that a variable has
          been involved in a failure.
        - 'impact' and 'dom_w_deg' are new variable selection options,
          sensitive to the number of times that a variable has been
          involved in a failure.
   * The 'splfr' and 'spld' utilities now recognize C++ source code and
     you can use '--cxxflag=OPT' to specify C++ compiler flags.


File: relnotes.info,  Node: 4.7.0 Other Changes,  Next: 4.7.0 Bugs Fixed,  Prev: 4.7.0 New Features,  Up: 4.7.0 Changes

14.31.2 Other Changes
---------------------

   * The garbage collector is faster.
   * Support for the Linux profiler "OProfile" has been removed.  The
     "Perf" profiler provides similar functionality.
   * Some redundant uppercase synonyms have been removed in the debugger
     interface.  For instance, 'A' is no longer recognized as a synonym
     for the 'a' ('abort') debugger command.

     In the same vein, uppercase 'Y'/'N' are no longer recognized as
     'yes'/'no' by ''SU_messages':query_abbreviation/3'.

   * 'library(json)' error reporting has been aligned with standard
     error handling.
   * MiniZinc:
        - Upgraded to MiniZinc 2.5.5.
        - Added native support for the MiniZinc global 'member' and
          annotations 'impact' and 'dom_w_deg'.
        - The 'spfz' command line flag '-f' now means that any search
          annotation is ignored.
   * CLPFD:
        - Performance fixes.
   * The database library 'library(bdb)' has been deprecated and
     'library(lmdb)' has been introduced as a replacement.

     Oracle no longer appears to actively develop and support the
     underlying Berkeley DB software.  In particular, they no longer
     provide installers for old or current releases of Berkeley DB. This
     makes it hard to install the dependencies that 'library(bdb)'
     relies on.
   * The Tcl/Tk library, 'library(tcltk)', now loads Tcl/Tk at run time.
     This means that it no longer depends on a particular version of
     Tcl/Tk but should run with Tcl/Tk 8.5, e.g., as built-in on macOS
     and older Linux versions, as well as with Tcl/Tk 8.6, e.g., on
     newer Linux distributions and with the ActiveState installers for
     Windows.

   * Support for 32-bit Linux has been removed.

     Support for 32-bit Windows has been deprecated and will be
     completely removed in some future release.  It is still available
     for supported customers.

   * The memory-allocation hook 'SP_set_memalloc_hooks()', that was
     deprecated in release 4.5.0, has been removed.  The related 'spld'
     option '--memhook' has been removed.


File: relnotes.info,  Node: 4.7.0 Bugs Fixed,  Next: 4.7.0 Known Issues,  Prev: 4.7.0 Other Changes,  Up: 4.7.0 Changes

14.31.3 Bugs Fixed
------------------

   * Profiling interpreted code could sometimes crash SICStus.
   * Fix critical bug while preparing to collect garbage, introduced in
     version 4.6.0.
   * Fix performance bug in 'findall/3' and friends.
   * 'at_end_of_line/[0,1]' would sometimes fail at the end of the
     stream.
   * Fix issues in 'library(json)' where it would accept invalid JSON
     input.
   * CLPFD:
        - 'fd_closure/2' would fail on non-domain variables.  Release
          4.5.1 behavior restored.  Some compile-time transformations
          were not delayed to run time as they should.


File: relnotes.info,  Node: 4.7.0 Known Issues,  Prev: 4.7.0 Bugs Fixed,  Up: 4.7.0 Changes

14.31.4 Known Issues
--------------------

The following are known issues with this release of SICStus.  *Note
Limitations in the Current Release:: for more information about missing
or incomplete features in this release.

   * SICStus Prolog does not verify that Prolog text is in Unicode NFC
     format.

     When reading terms, SICStus Prolog currently does not verify that
     the input text contains valid Unicode 5.0 characters in Normal Form
     C. *Note Syntax of Tokens as Character Strings:
     (sicstus)ref-syn-syn-tok.

     This is not a problem as long as the input is in the proper format
     but it will accept some input that may be rejected or interpreted
     differently in a future version of SICStus Prolog.


File: relnotes.info,  Node: Generic Limitations,  Next: Contact Information,  Prev: Revision History,  Up: Top

15 Generic Limitations
**********************

The number of arguments of a compound term may not exceed 255.

   The number of atoms created may not exceed 1048575 (33554431) on
32-bit (64-bit) architectures.

   Saved states and '.po' files are not portable between 32-bit and
64-bit architectures.


File: relnotes.info,  Node: Contact Information,  Prev: Generic Limitations,  Up: Top

16 Contact Information
**********************

Current support status for the various platforms as well as a web
interface for reporting bugs can be found at the SICStus Prolog
homepage:

     <https://sicstus.sics.se/>

   Information about and fixes for bugs that have shown up since the
latest release can be found there as well.

   We also have a Google group for SICStus Prolog users.  You can
subscribe at our site.



Tag Table:
Node: Top250
Node: Overview1903
Node: Platforms2255
Node: Release Notes and Installation Guide for UNIX2757
Node: UNIX installation3511
Node: UNIX Installation Prerequisites4036
Node: C Compiler and Linker4254
Node: The Installation Script5565
Node: The Uninstallation Script6740
Node: Platform specific UNIX notes7060
Node: Release Notes and Installation Guide for Windows10696
Node: Windows Requirements12136
Node: Windows Installation13578
Node: Windows Notes14988
Node: Command Line Editing16410
Node: The Console Window17590
Node: Console Preferences18579
Node: Windows Limitations19582
Node: Special Releases21063
Node: Beta Releases21504
Node: REX22472
Node: Tcl/Tk Notes26909
Node: The Tcl/Tk Terminal29003
Node: Jasper Notes29656
Node: Supported Java Versions30325
Node: Getting Started31636
Node: Windows32092
Node: UNIX32869
Node: Running Java from SICStus33998
Node: Running SICStus from Java34867
Node: Jasper Package Options38267
Node: Multi Threading39170
Node: Changes in Jasper from SICStus 339622
Node: Known Bugs and Limitations40041
Node: Java Examples Directory40789
Node: PrologBeans .NET Notes41074
Ref: prologbeans-net41236
Node: PrologBeans J-sharp42118
Node: Berkeley DB Notes43064
Node: Berkeley DB on MS Windows44040
Node: Berkeley DB on Mac OS X44660
Node: ODBC Notes46258
Node: ODBC on MS Windows47228
Node: ODBC on Mac OS X47576
Node: ODBC on Linux48111
Node: The SICStus Prolog IDE48560
Node: The Emacs Interface49154
Node: Emacs Installation49813
Node: Installing On-Line Documentation50724
Node: Revision History51326
Node: What Is New In Release 454085
Node: Virtual Machine54480
Node: Prolog Language56045
Node: Library Modules67376
Node: Input-Output System74512
Node: Foreign Language APIs76807
Node: Guide to Porting Code from Release 379654
Node: Limitations in the Current Release86358
Node: 4.0.1 Changes87433
Node: 4.0.1 New Features87834
Node: 4.0.1 Bugs Fixed87970
Node: 4.0.1 Other Changes88717
Node: 4.0.1 Known Issues90078
Node: 4.0.2 Changes90911
Node: 4.0.2 New Features91291
Node: 4.0.2 Bugs Fixed91647
Node: 4.0.2 Other Changes93808
Node: 4.0.2 Known Issues94402
Node: 4.0.3 Changes95235
Node: 4.0.3 New Features95615
Node: 4.0.3 Bugs Fixed97394
Node: 4.0.3 Other Changes99226
Node: 4.0.3 Known Issues100278
Node: 4.0.4 Changes101111
Node: 4.0.4 New Features101491
Node: 4.0.4 Bugs Fixed101627
Node: 4.0.4 Other Changes103818
Node: 4.0.4 Known Issues103984
Node: 4.0.5 Changes104817
Node: 4.0.5 New Features105197
Node: 4.0.5 Bugs Fixed105604
Node: 4.0.5 Other Changes109241
Node: 4.0.5 Known Issues112953
Node: 4.0.6 Changes114067
Node: 4.0.7 Changes114355
Node: 4.0.7 New Features114737
Node: 4.0.7 Bugs Fixed115243
Node: 4.0.7 Other Changes116262
Node: 4.0.7 Known Issues116873
Node: 4.0.8 Changes117946
Node: 4.0.8 New Features118328
Node: 4.0.8 Bugs Fixed118680
Node: 4.0.8 Other Changes119034
Node: 4.0.8 Known Issues119376
Node: 4.1.0 Changes120449
Node: 4.1.0 New Features120831
Node: 4.1.0 Bugs Fixed124988
Node: 4.1.0 Other Changes130373
Node: 4.1.0 Known Issues134215
Node: 4.1.1 Changes135051
Node: 4.1.1 Bugs Fixed135486
Node: 4.1.1 Known Issues135707
Node: 4.1.2 Changes136540
Node: 4.1.2 Bugs Fixed137020
Node: 4.1.2 Other Changes138656
Node: 4.1.2 Known Issues138910
Node: 4.1.3 Changes139746
Node: 4.1.3 New Features140197
Node: 4.1.3 Bugs Fixed140859
Node: 4.1.3 Other Changes142402
Node: 4.1.3 Known Issues143388
Node: 4.2.0 Changes144224
Node: 4.2.0 New Features144606
Node: 4.2.0 Bugs Fixed149588
Node: 4.2.0 Other Changes152012
Node: 4.2.0 Known Issues152847
Node: 4.2.1 Changes153683
Node: 4.2.1 New Features154134
Node: 4.2.1 Bugs Fixed156020
Node: 4.2.1 Other Changes158987
Node: 4.2.1 Known Issues160128
Node: 4.2.2 Changes160964
Node: 4.2.2 New Features161495
Node: 4.2.2 Bugs Fixed162538
Node: 4.2.2 Other Changes163491
Node: 4.2.2 Known Issues164300
Node: 4.2.3 Changes165136
Node: 4.2.3 New Features165898
Node: 4.2.3 Bugs Fixed166296
Node: 4.2.3 Other Changes167649
Node: 4.2.3 Known Issues168043
Node: 4.3.0 Changes168879
Node: 4.3.0 New Features169340
Node: 4.3.0 Bugs Fixed173535
Node: 4.3.0 Standard Conformance Changes177444
Ref: 4.3.0 Standard Conformance Changes-Footnote-1183166
Node: 4.3.0 Other Changes183436
Node: 4.3.0 Known Issues186613
Node: 4.3.1 Changes187449
Node: 4.3.1 New Features187786
Node: 4.3.1 Bugs Fixed188358
Node: 4.3.1 Known Issues189908
Node: 4.3.2 Changes191421
Node: 4.3.2 New Features191803
Node: 4.3.2 Bugs Fixed192496
Node: 4.3.2 Other Changes193133
Node: 4.3.2 Known Issues193722
Node: 4.3.3 Changes194558
Node: 4.3.3 New Features194940
Node: 4.3.3 Other Changes196056
Node: 4.3.3 Bugs Fixed196441
Node: 4.3.3 Known Issues199046
Node: 4.3.4 Changes199879
Node: 4.3.5 Changes200130
Node: 4.3.5 New Features200512
Node: 4.3.5 Other Changes200963
Node: 4.3.5 Bugs Fixed201177
Node: 4.3.5 Known Issues202185
Node: 4.4.0 Changes203018
Node: 4.4.0 New Features203400
Node: 4.4.0 Other Changes204390
Node: 4.4.0 Bugs Fixed205359
Ref: 4.4.0 Bugs Fixed-Footnote-1209072
Node: 4.4.0 Known Issues209113
Node: 4.4.1 Changes209946
Node: 4.4.1 Bugs Fixed210313
Node: 4.4.1 Known Issues211017
Node: 4.5.0 Changes211850
Node: 4.5.0 New Features212232
Node: 4.5.0 Other Changes213577
Node: 4.5.0 Bugs Fixed215972
Node: 4.5.0 Known Issues216678
Node: 4.5.1 Changes217511
Node: 4.5.1 Other Changes217923
Node: 4.5.1 Bugs Fixed218500
Node: 4.5.1 Known Issues219248
Node: 4.6.0 Changes220081
Node: 4.6.0 New Features220463
Node: 4.6.0 Other Changes221858
Node: 4.6.0 Bugs Fixed224152
Node: 4.6.0 Known Issues225858
Node: 4.7.0 Changes226691
Ref: latest-changes226866
Node: 4.7.0 New Features227051
Node: 4.7.0 Other Changes229001
Node: 4.7.0 Bugs Fixed231231
Node: 4.7.0 Known Issues231971
Node: Generic Limitations232804
Node: Contact Information233220

End Tag Table
