/* -*- Mode:C; buffer-read-only:t -*-
   THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT. */
/* -*- Mode:C -*- */
/* This file is included into sicstus.h to define accessors for C->Prolog API */

/* [PM] 3.9b5 spaux_body.h, as generated by transhdr.pl is inserted after the marker to give spaux.h */
/* @MAGIC_MARKER@ */
/* -*- buffer-read-only:t -*-
   This file is automatically generated by transhdr.pl, do not edit. */
/* This file is included into sicstus.h to define accessors for C->Prolog API */


#ifndef SPAUX_H_ /* Protect the common parts from multiple inclusion */

/* Assume source is part of run-time system if any of the "special"
   include files are included */
#if !SP_INSIDER /* Insiders include the special includes but are *not* part of run-time */
#if (defined(INCLUDED_DATADEFS_H) && !defined(INCLUDED_FROM_RUNTIME))
#define INCLUDED_FROM_RUNTIME 1
#endif /* (defined(INCLUDED_DATADEFS_H) && !defined(INCLUDED_FROM_RUNTIME)) */

#if (defined(INCLUDED_SUPPORT_H) && !defined(INCLUDED_FROM_RUNTIME))
#define INCLUDED_FROM_RUNTIME 1
#endif /* (defined(INCLUDED_SUPPORT_H) && !defined(INCLUDED_FROM_RUNTIME)) */

#endif /* !SP_INSIDER */


#define SP_DISPATCH_API_VERSION_MAJOR (3)
/* The idea here is that if the number of sicstus.h API functions
 * incrases then the minor version is automagically bumped.
 * The number of API functions should never decrease without
 * bumping the *major* version.
 */
#define SP_DISPATCH_API_VERSION_MINOR ((1<<8)+SP_API_SICSTUS_H_NUMBER_OF_ENTRIES)

#define SP_DISPATCH_API_VERSION ((int)((SP_DISPATCH_API_VERSION_MAJOR<<16)+SP_DISPATCH_API_VERSION_MINOR)) /* 0x30100+XX */

#endif /* SPAUX_H_ */




/**** Dispatch wrappers for API exported from sicstus.h ****/
#if (defined(INCLUDED_SICSTUS_H) && !defined(INCLUDED_SICSTUS_H_AUX_H))
#define INCLUDED_SICSTUS_H_AUX_H 1 /* Define the wrappers only once */
typedef int (SPCDECL tsp_glue_initialize) PROTOTYPE((int, char * *, SP_options const *, SP_MainFun * *, char * *, int, int));
typedef void (SPCDECL tSP_deinitialize) PROTOTYPE((void));
typedef void (SPCDECL tSP_force_interactive) PROTOTYPE((void));
typedef int (SPCDECL tSP_load) PROTOTYPE((char const *));
typedef SP_pred_ref (SPCDECL tSP_predicate) PROTOTYPE((char const *, SP_integer, char const *));
typedef SP_pred_ref (SPCDECL tSP_pred) PROTOTYPE((SP_atom, SP_integer, SP_atom));
typedef SP_term_ref (SPCDECL tSP_new_term_ref) PROTOTYPE((void));
typedef int (SPCDECL tSP_new_term_refs) PROTOTYPE((int));
typedef void (SPCDECL tSP_reset_term_refs) PROTOTYPE((int));
typedef SP_globref (SPCDECL tSP_alloc_globrefs) PROTOTYPE((int));
typedef void (SPCDECL tSP_free_globrefs) PROTOTYPE((SP_globref, int));
typedef int (SPCDECL tSP_query) PROTOTYPE((SP_pred_ref predicate, ...));
typedef int (SPCDECL tSP_query_cut_fail) PROTOTYPE((SP_pred_ref predicate, ...));
typedef SP_qid (SPCDECL tSP_open_query) PROTOTYPE((SP_pred_ref predicate, ...));
typedef SP_qid (SPCDECL tSP_open_query_array) PROTOTYPE((SP_pred_ref, SP_term_ref *));
typedef int (SPCDECL tSP_next_solution) PROTOTYPE((SP_qid));
typedef int (SPCDECL tSP_cut_query) PROTOTYPE((SP_qid));
typedef int (SPCDECL tSP_close_query) PROTOTYPE((SP_qid));
typedef int (SPCDECL tSP_event) PROTOTYPE((SP_EventFun *, void *));
typedef spio_t_error_code (SPCDECL tSP_fopen) PROTOTYPE((char const * path_ienc, void * reserved, spio_t_bits options, SP_stream * * ps));
typedef SP_term (SPCDECL tsp_ref_term) PROTOTYPE((SP_term_ref ref));
typedef spio_t_error_code (SPCDECL tSP_create_os_stream) PROTOTYPE((spio_t_os_file_handle hFile, SP_stream * * pstream, void * arg, spio_t_bits options));
typedef spio_t_error_code (SPCDECL tSP_get_stream_user_data) PROTOTYPE((SP_stream * stream, void const * user_class, void * * puser_data));
typedef spio_t_error_code (SPCDECL tSP_get_stream_counts) PROTOTYPE((SP_stream * stream, spio_t_offset * item_offset, spio_t_offset * newline_count, spio_t_offset * line_length, spio_t_bits option));
typedef int (SPCDECL tSP_put_variable) PROTOTYPE((SP_term_ref));
typedef int (SPCDECL tSP_put_term) PROTOTYPE((SP_term_ref, SP_term_ref));
typedef int (SPCDECL tSP_put_integer) PROTOTYPE((SP_term_ref, SP_integer));
typedef int (SPCDECL tSP_put_float) PROTOTYPE((SP_term_ref, double));
typedef int (SPCDECL tSP_put_atom) PROTOTYPE((SP_term_ref, SP_atom));
typedef int (SPCDECL tSP_put_string) PROTOTYPE((SP_term_ref, char const *));
typedef int (SPCDECL tSP_put_address) PROTOTYPE((SP_term_ref, void *));
typedef int (SPCDECL tSP_put_list_codes) PROTOTYPE((SP_term_ref, SP_term_ref, char const *));
typedef int (SPCDECL tSP_put_number_codes) PROTOTYPE((SP_term_ref, char const *));
typedef int (SPCDECL tSP_put_functor) PROTOTYPE((SP_term_ref, SP_atom, int));
typedef int (SPCDECL tSP_put_list) PROTOTYPE((SP_term_ref));
typedef int (SPCDECL tSP_cons_functor) PROTOTYPE((SP_term_ref term, SP_atom name, int arity, ...));
typedef int (SPCDECL tSP_cons_list) PROTOTYPE((SP_term_ref, SP_term_ref, SP_term_ref));
typedef int (SPCDECL tSP_read_from_string) PROTOTYPE((SP_term_ref term, char const * string, SP_term_ref * values));
typedef int (SPCDECL tSP_get_integer) PROTOTYPE((SP_term_ref, SP_integer *));
typedef int (SPCDECL tSP_get_float) PROTOTYPE((SP_term_ref, double *));
typedef int (SPCDECL tSP_get_atom) PROTOTYPE((SP_term_ref, SP_atom *));
typedef int (SPCDECL tSP_get_string) PROTOTYPE((SP_term_ref, char const * *));
typedef int (SPCDECL tSP_get_address) PROTOTYPE((SP_term_ref, void * *));
typedef int (SPCDECL tSP_get_list_codes) PROTOTYPE((SP_term_ref, char const * *));
typedef int (SPCDECL tSP_get_number_codes) PROTOTYPE((SP_term_ref, char const * *));
typedef int (SPCDECL tSP_get_functor) PROTOTYPE((SP_term_ref, SP_atom *, int *));
typedef int (SPCDECL tSP_get_list) PROTOTYPE((SP_term_ref, SP_term_ref, SP_term_ref));
typedef int (SPCDECL tSP_get_arg) PROTOTYPE((int, SP_term_ref, SP_term_ref));
typedef int (SPCDECL tSP_term_type) PROTOTYPE((SP_term_ref));
typedef int (SPCDECL tSP_is_variable) PROTOTYPE((SP_term_ref));
typedef int (SPCDECL tSP_is_integer) PROTOTYPE((SP_term_ref));
typedef int (SPCDECL tSP_is_float) PROTOTYPE((SP_term_ref));
typedef int (SPCDECL tSP_is_atom) PROTOTYPE((SP_term_ref));
typedef int (SPCDECL tSP_is_compound) PROTOTYPE((SP_term_ref));
typedef int (SPCDECL tSP_is_list) PROTOTYPE((SP_term_ref));
typedef int (SPCDECL tSP_is_atomic) PROTOTYPE((SP_term_ref));
typedef int (SPCDECL tSP_is_number) PROTOTYPE((SP_term_ref));
typedef SP_atom (SPCDECL tSP_atom_from_string) PROTOTYPE((char const *));
typedef SP_atom (SPCDECL tSP_existing_atom_from_string) PROTOTYPE((char const *));
typedef char const * (SPCDECL tSP_string_from_atom) PROTOTYPE((SP_atom));
typedef int (SPCDECL tSP_unify) PROTOTYPE((SP_term_ref, SP_term_ref));
typedef int (SPCDECL tSP_compare) PROTOTYPE((SP_term_ref, SP_term_ref));
typedef int (SPCDECL tSP_exception_term) PROTOTYPE((SP_term_ref));
typedef void (SPCDECL tSP_raise_exception) PROTOTYPE((SP_term_ref));
typedef void (SPCDECL tSP_fail) PROTOTYPE((void));
typedef char const * (SPCDECL tSP_error_message) PROTOTYPE((int));
typedef int (SPCDECL tSP_get_errno) PROTOTYPE((void));
typedef SP_stream * (SPCDECL tSP_get_stdin) PROTOTYPE((void));
typedef SP_stream * (SPCDECL tSP_get_stdout) PROTOTYPE((void));
typedef SP_stream * (SPCDECL tSP_get_stderr) PROTOTYPE((void));
typedef SP_stream * (SPCDECL tSP_get_curin) PROTOTYPE((void));
typedef SP_stream * (SPCDECL tSP_get_curout) PROTOTYPE((void));
typedef SP_UserStreamHook * (SPCDECL tSP_set_user_stream_hook) PROTOTYPE((SP_UserStreamHook *, void *));
typedef SP_UserStreamPostHook * (SPCDECL tSP_set_user_stream_post_hook) PROTOTYPE((SP_UserStreamPostHook *, void *));
typedef spio_t_error_code (SPCDECL tSP_create_stream) PROTOTYPE((void * user_data, void const * user_class, spio_t_simple_device_read * user_read, spio_t_simple_device_write * user_write, spio_t_simple_device_flush_output * user_flush_output, spio_t_simple_device_seek * user_seek, spio_t_simple_device_close * user_close, spio_t_simple_device_interrupt * user_interrupt, spio_t_simple_device_ioctl * user_ioctl, void * args, spio_t_bits create_options, SP_stream * * pstream));
typedef spio_t_error_code (SPCDECL tsp_get_byte_helper) PROTOTYPE((SP_stream * s, spio_t_bits options));
typedef spio_t_error_code (SPCDECL tsp_put_byte_helper) PROTOTYPE((SP_stream * s, spio_t_uint8 byte, spio_t_bits options));
typedef spio_t_error_code (SPCDECL tsp_get_code_helper) PROTOTYPE((SP_stream * s, spio_t_bits options));
typedef spio_t_error_code (SPCDECL tsp_put_code_helper) PROTOTYPE((SP_stream * s, spio_t_wchar code, spio_t_bits options));
typedef spio_t_error_code (SPCDECL tSP_printf) PROTOTYPE((char const * fmt, ...)) SPEXP_ATTRIBUTE__FORMAT_1_2;
typedef spio_t_error_code (SPCDECL tSP_fprintf) PROTOTYPE((SP_stream * stream, char const * fmt, ...)) SPEXP_ATTRIBUTE__FORMAT_2_3;
typedef spio_t_error_code (SPCDECL tsp_ttyprintf) PROTOTYPE((char const * fmt, ...)) SPEXP_ATTRIBUTE__FORMAT_1_2;
typedef spio_t_error_code (SPCDECL tSP_put_bytes) PROTOTYPE((SP_stream * s, spio_t_uint8 const * bytes, size_t byte_count, spio_t_bits options));
typedef spio_t_error_code (SPCDECL tSP_put_codes) PROTOTYPE((SP_stream * s, spio_t_wchar const * codes, size_t code_count, spio_t_bits options));
typedef spio_t_error_code (SPCDECL tSP_put_encoded_string) PROTOTYPE((SP_stream * s, char const * string, spio_t_bits options));
typedef spio_t_error_code (SPCDECL tSP_flush_output) PROTOTYPE((SP_stream * s, spio_t_bits options));
typedef spio_t_error_code (SPCDECL tSP_fclose) PROTOTYPE((SP_stream * s, spio_t_bits options));
typedef spio_t_error_code (SPCDECL tSP_unget_code) PROTOTYPE((SP_stream *, int));
typedef spio_t_error_code (SPCDECL tSP_unget_byte) PROTOTYPE((SP_stream *, int));
typedef SP_SigFun * (SPCDECL tSP_signal) PROTOTYPE((int, SP_SigFun *, void *));
typedef int (SPCDECL tsp_raise_signal) PROTOTYPE((int signo));
typedef int (SPCDECL tSP_define_c_predicate) PROTOTYPE((char const * name, int arity, char const * module, SP_CPredFun * proc, void * stash));
typedef char * * (SPCDECL tSP_copy_environ) PROTOTYPE((void));
typedef void (SPCDECL tSP_write_term) PROTOTYPE((SP_term_ref));
typedef void * (SPCDECL tSP_malloc) PROTOTYPE((size_t));
typedef void * (SPCDECL tSP_realloc) PROTOTYPE((void *, size_t));
typedef void (SPCDECL tSP_free) PROTOTYPE((void *));
typedef void (SPCDECL tSP_save_and_raise_error) PROTOTYPE((int error_type, char const * error_msg_ienc, SP_term_ref culprit, char const * module, char const * pred, int arity, int argn));
typedef spio_t_error_code (SPCDECL tSP_schedule_async_event) PROTOTYPE((sp_t_async_event * async_event, spio_t_bits options));
#if !SP_WIN32
typedef void (SPCDECL tsp_raise_errno_error) PROTOTYPE((int errno_value, char const * ienc_pred, char const * ienc_syscall_name));
#endif /* !SP_WIN32 */
#if SP_WIN32
typedef void (SPCDECL tsp_raise_win32_error) PROTOTYPE((int gle_value, char const * ienc_pred, char const * ienc_syscall_name));
#endif /* SP_WIN32 */
typedef size_t (SPCDECL tSP_atom_length) PROTOTYPE((SP_atom));
typedef int (SPCDECL tSP_put_list_n_codes) PROTOTYPE((SP_term_ref, SP_term_ref, size_t, char const *));
typedef int (SPCDECL tSP_get_list_n_codes) PROTOTYPE((SP_term_ref, SP_term_ref, size_t, size_t *, char *));
typedef int (SPCDECL tSP_register_atom) PROTOTYPE((SP_atom));
typedef int (SPCDECL tSP_unregister_atom) PROTOTYPE((SP_atom));
typedef int (SPCDECL tSP_cons_functor_array) PROTOTYPE((SP_term_ref term, SP_atom name, int arity, SP_term_ref * args));
typedef int (SPCDECL tSP_restore) PROTOTYPE((char const *));
typedef spio_t_error_code (SPCDECL tSP_set_current_dir) PROTOTYPE((char const *));
typedef char * (SPCDECL tSP_get_current_dir) PROTOTYPE((void));
typedef void (SPCDECL tSP_raise_fault) PROTOTYPE((char const * message_ienc));
typedef void (SPCDECL tsp_set_abort_env) PROTOTYPE((void *));
typedef char const * (SPCDECL tsp_get_abort_err_ienc) PROTOTYPE((void));
typedef char const * (SPCDECL tsp_get_boot_path) PROTOTYPE((void));
typedef char const * (SPCDECL tSP_get_emulator_version) PROTOTYPE((void));
typedef char const * (SPCDECL tSP_get_emulator_dir) PROTOTYPE((void));
typedef int (SPCDECL tSP_set_initial_options) PROTOTYPE((SP_options const *));
typedef SP_SetWindowTitleHook * (SPCDECL tSP_set_set_window_title_hook) PROTOTYPE((SP_SetWindowTitleHook *, void *));
typedef SP_GetWindowTitleHook * (SPCDECL tSP_set_get_window_title_hook) PROTOTYPE((SP_GetWindowTitleHook *, void *));
typedef void * (SPCDECL tsp_get_engine_global) PROTOTYPE((void));
typedef spio_t_error_code (SPCDECL tSP_sigaction) PROTOTYPE((int signo, SP_SigFun * func, void * user_data, spio_t_bits options));
typedef void (SPCDECL tSP_free_async_event) PROTOTYPE((sp_t_async_event * async_event));
typedef int (SPCDECL tsp_qload_or_restore) PROTOTYPE((char const *, int));
typedef void (SPCDECL tsp_variable_to_string) PROTOTYPE((SP_term_ref, char *));
typedef spio_t_error_code (SPCDECL tSP_install_spti_hook) PROTOTYPE((SP_spti_hook * hook, void * cookie, spio_t_bits options));
typedef char * (SPCDECL tsp_get_classpath) PROTOTYPE((void));
typedef char const * (SPCDECL tsp_get_failed_bootpath) PROTOTYPE((void));
typedef int (SPCDECL tsp_prolog_initialized) PROTOTYPE((void));
typedef int (SPCDECL tsp_is_development_system) PROTOTYPE((void));
typedef void * (SPCDECL tSP_calloc) PROTOTYPE((size_t, size_t));
typedef char * (SPCDECL tSP_strdup) PROTOTYPE((char const *));
typedef spio_t_error_code (SPCDECL tSP_next_stream) PROTOTYPE((SP_stream * s, SP_stream * * pnext));
#if !SP_WIN32
typedef spio_t_error_code (SPCDECL tSP_select) PROTOTYPE((int read_fds[], size_t * pnread_fds, int write_fds[], size_t * pnwrite_fds, SP_stream * read_streams[], size_t * pnread_streams, SP_stream * write_streams[], size_t * pnwrite_streams, spio_t_timespec * timeout, spio_t_bits options));
#endif /* !SP_WIN32 */
#if SP_WIN32
typedef spio_t_error_code (SPCDECL tSP_select) PROTOTYPE((spio_t_os_file_handle os_events[], size_t * pnos_events, SP_stream * read_streams[], size_t * pnread_streams, SP_stream * write_streams[], size_t * pnwrite_streams, spio_t_timespec * timeout, spio_t_bits options));
#endif /* SP_WIN32 */
typedef spio_t_error_code (SPCDECL tSP_open_socket_stream) PROTOTYPE((char const * nodename, char const * servname, void * args, SP_stream * * pstream, spio_t_bits options));
typedef char const * (SPCDECL tSP_to_os) PROTOTYPE((char const * ienc, int context));
typedef char const * (SPCDECL tSP_from_os) PROTOTYPE((char const * senc, int context));
typedef int (SPCDECL tSP_wci_code) PROTOTYPE((int * pcode, char const * wci));
typedef int (SPCDECL tSP_wci_len) PROTOTYPE((char const * wci));
typedef int (SPCDECL tSP_code_wci) PROTOTYPE((char * wci, int code));
typedef int (SPCDECL tSP_latin1_chartype) PROTOTYPE((int char_code));
typedef int (SPCDECL tSP_mutex_lock) PROTOTYPE((SP_mutex * pmutex));
typedef int (SPCDECL tSP_mutex_unlock) PROTOTYPE((SP_mutex * pmutex));
typedef int (SPCDECL tSP_mutex_destroy) PROTOTYPE((SP_mutex * pmutex));
typedef int (SPCDECL tSP_load_sicstus_run_time) PROTOTYPE((SP_get_dispatch_type * * ppfunc, void * * phandle));
typedef int (SPCDECL tSP_set_multi_sp_state) PROTOTYPE((struct SP_multi_sp_state *));
typedef int (SPCDECL tSP_put_external_object) PROTOTYPE((SP_term_ref tObj, SP_external_object_link * pObj));
typedef int (SPCDECL tSP_get_external_object) PROTOTYPE((SP_term_ref tObj, SP_external_object_link * * ppObj));
typedef int (SPCDECL tSP_external_object_default_putter_helper) PROTOTYPE((SP_term_ref tr, SP_external_object_link * obj, SP_atom functor));
typedef int (SPCDECL tSP_put_external_object_link) PROTOTYPE((SP_term_ref tObj, SP_external_object_link * pObj));
typedef int (SPCDECL tSP_put_weak_external_object_link) PROTOTYPE((SP_term_ref tObj, SP_external_object_link * pObj));
typedef SP_external_object_type (SPCDECL tSP_register_external_object_type) PROTOTYPE((SP_external_object_finalizer finalizer, SP_external_object_putter putter, void * type_data));
typedef SP_external_object_link * (SPCDECL tSP_register_external_object) PROTOTYPE((void * data, SP_external_object_type object_type));
typedef void (SPCDECL tSP_unlink_external_object) PROTOTYPE((SP_external_object_link * pObj, int finalize));
typedef void * (SPCDECL tSP_get_external_object_data) PROTOTYPE((SP_external_object_link *));
typedef SP_external_object_type (SPCDECL tSP_get_external_object_type) PROTOTYPE((SP_external_object_link *));
typedef void (SPCDECL tSP_finalize_external_object) PROTOTYPE((SP_term_ref tObj, SP_integer * existed));
typedef SP_integer (SPCDECL tSP_garbage_collect_external_objects) PROTOTYPE((SP_external_object_type object_type));
typedef void (SPCDECL tSP_ctrlc_action) PROTOTYPE((void));
typedef void (SPCDECL tSP_ctrlbreak_action) PROTOTYPE((void));
typedef int (SPCDECL tsp_set_jasper_magic) PROTOTYPE((void *, int));
typedef void * (SPCDECL tsp_get_jasper_magic) PROTOTYPE((int));
typedef int (SPCDECL tsp_set_jasper_threadservermode) PROTOTYPE((int, int));
typedef int (SPCDECL tsp_get_jasper_threadservermode) PROTOTYPE((int *, int));
typedef int (SPCDECL tSP_get_integer_bytes) PROTOTYPE((SP_term_ref tr, void * buf, size_t * pbuf_size, int native));
typedef int (SPCDECL tSP_put_integer_bytes) PROTOTYPE((SP_term_ref tr, void * buf, size_t buf_size, int native));
typedef int (SPCDECL tSP_setenv) PROTOTYPE((char const * key_ienc, char const * value_ienc));
typedef char * (SPCDECL tSP_getenv) PROTOTYPE((char const * key_ienc));
typedef spio_t_error_code (SPCDECL tSP_expand_file_name) PROTOTYPE((char const * relpath, char const * cwd, spio_t_bits options, char * * pabspath));
typedef int (SPCDECL tsp_spio_assert_failure) PROTOTYPE((char const * function, char const * file, int line));
typedef int (SPCDECL tsp_spio_debug_break) PROTOTYPE((char const * file, int line));
typedef char const * (SPCDECL tsp_spio_error_name) PROTOTYPE((spio_t_error_code code));
typedef int (SPCDECL tsp_spio_trace_line) PROTOTYPE((char const * function, char const * file, int line, char const * msg, SP_integer l, char const * string, int level));
typedef spio_t_error_code (SPCDECL tSP_get_encoding) PROTOTYPE((char const * encoding_name, spio_t_encoding * * pencoding, spio_t_bits options));
typedef void (SPCDECL tSP_encoding_release) PROTOTYPE((spio_t_encoding * encoding));
typedef spio_t_error_code (SPCDECL tSP_encoding_open) PROTOTYPE((spio_t_encoding * encoding, spio_t_encoding_state * * pencoding_state, void * args, spio_t_bits options));
typedef spio_t_error_code (SPCDECL tSP_encode_from_codes) PROTOTYPE((spio_t_encoding * encoding, spio_t_wchar const * src, size_t src_size, spio_t_encoding_state * * pencoding_state, spio_t_byte * dst, size_t dst_size, size_t * psrc_size_read, size_t * pdst_size_wrote, spio_t_bits options));
typedef spio_t_error_code (SPCDECL tSP_encode_to_codes) PROTOTYPE((spio_t_encoding * encoding, spio_t_byte const * src, size_t src_size, spio_t_encoding_state * * pencoding_state, spio_t_wchar * dst, size_t dst_size, size_t * psrc_size_read, size_t * pdst_size_wrote, spio_t_bits options));
typedef spio_t_error_code (SPCDECL tsp_ttyflush) PROTOTYPE((void));
typedef void (SPCDECL tsp_memory_fault) PROTOTYPE((char const * msg, int culprit));
typedef int (SPCDECL tSP_decode_reserved_exception) PROTOTYPE((SP_term_ref tr, SP_integer * pdata));
typedef spio_t_error_code (SPCDECL tSP_install_idle_hook) PROTOTYPE((SP_idle_hook * hook, void * cookie, spio_t_bits options));
typedef int (SPCDECL tSP_put_list_n_bytes) PROTOTYPE((SP_term_ref, SP_term_ref, size_t, unsigned char const *));
typedef int (SPCDECL tSP_get_list_n_bytes) PROTOTYPE((SP_term_ref, SP_term_ref, size_t, size_t *, unsigned char *));
typedef int (SPCDECL tSP_stream_from_string) PROTOTYPE((char const * string, SP_stream * * pstream));
typedef int (SPCDECL tSP_set_argv) PROTOTYPE((int argc, char * * argv_ienc, spio_t_bits options));
typedef spio_t_error_code (SPCDECL tSP_alloc_async_event) PROTOTYPE((sp_t_async_event * * pasync_event, sp_t_async_event_fun * fun, void * cookie, spio_t_bits options));
typedef spio_t_error_code (SPCDECL tSP_system_properties) PROTOTYPE((char * * * pprops, spio_t_bits options));
typedef spio_t_error_code (SPCDECL tSP_get_system_property) PROTOTYPE((char const * key, char * * pvalue, spio_t_bits options));
typedef spio_t_error_code (SPCDECL tSP_set_system_property) PROTOTYPE((char const * key, char const * value, spio_t_bits options));
typedef spio_t_error_code (SPCDECL tSP_codes_to_multi_bytes) PROTOTYPE((char const * encoding_name, spio_t_wchar const * src, size_t const src_len, void * * pdst, size_t * pdst_size));

typedef struct DISPATCH_TABLE_STRUCT_SICSTUS_H {
   unsigned long size; /* sizeof DISPATCH_TABLE_STRUCT_SICSTUS_H ([PM] 4.2.3 unsigned long is correct here) */
   const char *name;   /* "sicstus.h" */
   int version;        /* 0x30100+XX  Major: 3, Minor: 1 */
   const char *nsp_glue_initialize; tsp_glue_initialize *psp_glue_initialize; /* API #1 */
   const char *nSP_deinitialize; tSP_deinitialize *pSP_deinitialize; /* API #2 */
   const char *nSP_force_interactive; tSP_force_interactive *pSP_force_interactive; /* API #3 */
   const char *nunavailable_api_4; void *unavailable_api_4; /* API #4 */
   const char *nSP_load; tSP_load *pSP_load; /* API #5 */
   const char *nSP_predicate; tSP_predicate *pSP_predicate; /* API #6 */
   const char *nSP_pred; tSP_pred *pSP_pred; /* API #7 */
   const char *nSP_new_term_ref; tSP_new_term_ref *pSP_new_term_ref; /* API #8 */
   const char *nSP_new_term_refs; tSP_new_term_refs *pSP_new_term_refs; /* API #9 */
   const char *nSP_reset_term_refs; tSP_reset_term_refs *pSP_reset_term_refs; /* API #10 */
   const char *nSP_alloc_globrefs; tSP_alloc_globrefs *pSP_alloc_globrefs; /* API #11 */
   const char *nSP_free_globrefs; tSP_free_globrefs *pSP_free_globrefs; /* API #12 */
   const char *nSP_query; tSP_query *pSP_query; /* API #13 */
   const char *nSP_query_cut_fail; tSP_query_cut_fail *pSP_query_cut_fail; /* API #14 */
   const char *nSP_open_query; tSP_open_query *pSP_open_query; /* API #15 */
   const char *nSP_open_query_array; tSP_open_query_array *pSP_open_query_array; /* API #16 */
   const char *nSP_next_solution; tSP_next_solution *pSP_next_solution; /* API #17 */
   const char *nSP_cut_query; tSP_cut_query *pSP_cut_query; /* API #18 */
   const char *nSP_close_query; tSP_close_query *pSP_close_query; /* API #19 */
   const char *nSP_event; tSP_event *pSP_event; /* API #20 */
   const char *nSP_fopen; tSP_fopen *pSP_fopen; /* API #21 */
   const char *nsp_ref_term; tsp_ref_term *psp_ref_term; /* API #22 */
   const char *nSP_create_os_stream; tSP_create_os_stream *pSP_create_os_stream; /* API #23 */
   const char *nSP_get_stream_user_data; tSP_get_stream_user_data *pSP_get_stream_user_data; /* API #24 */
   const char *nSP_get_stream_counts; tSP_get_stream_counts *pSP_get_stream_counts; /* API #25 */
   const char *nSP_put_variable; tSP_put_variable *pSP_put_variable; /* API #26 */
   const char *nSP_put_term; tSP_put_term *pSP_put_term; /* API #27 */
   const char *nSP_put_integer; tSP_put_integer *pSP_put_integer; /* API #28 */
   const char *nSP_put_float; tSP_put_float *pSP_put_float; /* API #29 */
   const char *nSP_put_atom; tSP_put_atom *pSP_put_atom; /* API #30 */
   const char *nSP_put_string; tSP_put_string *pSP_put_string; /* API #31 */
   const char *nSP_put_address; tSP_put_address *pSP_put_address; /* API #32 */
   const char *nSP_put_list_codes; tSP_put_list_codes *pSP_put_list_codes; /* API #33 */
   const char *nSP_put_number_codes; tSP_put_number_codes *pSP_put_number_codes; /* API #34 */
   const char *nSP_put_functor; tSP_put_functor *pSP_put_functor; /* API #35 */
   const char *nSP_put_list; tSP_put_list *pSP_put_list; /* API #36 */
   const char *nSP_cons_functor; tSP_cons_functor *pSP_cons_functor; /* API #37 */
   const char *nSP_cons_list; tSP_cons_list *pSP_cons_list; /* API #38 */
   const char *nSP_read_from_string; tSP_read_from_string *pSP_read_from_string; /* API #39 */
   const char *nSP_get_integer; tSP_get_integer *pSP_get_integer; /* API #40 */
   const char *nSP_get_float; tSP_get_float *pSP_get_float; /* API #41 */
   const char *nSP_get_atom; tSP_get_atom *pSP_get_atom; /* API #42 */
   const char *nSP_get_string; tSP_get_string *pSP_get_string; /* API #43 */
   const char *nSP_get_address; tSP_get_address *pSP_get_address; /* API #44 */
   const char *nSP_get_list_codes; tSP_get_list_codes *pSP_get_list_codes; /* API #45 */
   const char *nSP_get_number_codes; tSP_get_number_codes *pSP_get_number_codes; /* API #46 */
   const char *nSP_get_functor; tSP_get_functor *pSP_get_functor; /* API #47 */
   const char *nSP_get_list; tSP_get_list *pSP_get_list; /* API #48 */
   const char *nSP_get_arg; tSP_get_arg *pSP_get_arg; /* API #49 */
   const char *nSP_term_type; tSP_term_type *pSP_term_type; /* API #50 */
   const char *nSP_is_variable; tSP_is_variable *pSP_is_variable; /* API #51 */
   const char *nSP_is_integer; tSP_is_integer *pSP_is_integer; /* API #52 */
   const char *nSP_is_float; tSP_is_float *pSP_is_float; /* API #53 */
   const char *nSP_is_atom; tSP_is_atom *pSP_is_atom; /* API #54 */
   const char *nSP_is_compound; tSP_is_compound *pSP_is_compound; /* API #55 */
   const char *nSP_is_list; tSP_is_list *pSP_is_list; /* API #56 */
   const char *nSP_is_atomic; tSP_is_atomic *pSP_is_atomic; /* API #57 */
   const char *nSP_is_number; tSP_is_number *pSP_is_number; /* API #58 */
   const char *nSP_atom_from_string; tSP_atom_from_string *pSP_atom_from_string; /* API #59 */
   const char *nSP_existing_atom_from_string; tSP_existing_atom_from_string *pSP_existing_atom_from_string; /* API #60 */
   const char *nSP_string_from_atom; tSP_string_from_atom *pSP_string_from_atom; /* API #61 */
   const char *nSP_unify; tSP_unify *pSP_unify; /* API #62 */
   const char *nSP_compare; tSP_compare *pSP_compare; /* API #63 */
   const char *nSP_exception_term; tSP_exception_term *pSP_exception_term; /* API #64 */
   const char *nSP_raise_exception; tSP_raise_exception *pSP_raise_exception; /* API #65 */
   const char *nSP_fail; tSP_fail *pSP_fail; /* API #66 */
   const char *nSP_error_message; tSP_error_message *pSP_error_message; /* API #67 */
   const char *nSP_get_errno; tSP_get_errno *pSP_get_errno; /* API #68 */
   const char *nSP_get_stdin; tSP_get_stdin *pSP_get_stdin; /* API #69 */
   const char *nSP_get_stdout; tSP_get_stdout *pSP_get_stdout; /* API #70 */
   const char *nSP_get_stderr; tSP_get_stderr *pSP_get_stderr; /* API #71 */
   const char *nSP_get_curin; tSP_get_curin *pSP_get_curin; /* API #72 */
   const char *nSP_get_curout; tSP_get_curout *pSP_get_curout; /* API #73 */
   const char *nSP_set_user_stream_hook; tSP_set_user_stream_hook *pSP_set_user_stream_hook; /* API #74 */
   const char *nSP_set_user_stream_post_hook; tSP_set_user_stream_post_hook *pSP_set_user_stream_post_hook; /* API #75 */
   const char *nunavailable_api_76; void *unavailable_api_76; /* API #76 */
   const char *nunavailable_api_77; void *unavailable_api_77; /* API #77 */
   const char *nSP_create_stream; tSP_create_stream *pSP_create_stream; /* API #78 */
   const char *nsp_get_byte_helper; tsp_get_byte_helper *psp_get_byte_helper; /* API #79 */
   const char *nsp_put_byte_helper; tsp_put_byte_helper *psp_put_byte_helper; /* API #80 */
   const char *nsp_get_code_helper; tsp_get_code_helper *psp_get_code_helper; /* API #81 */
   const char *nsp_put_code_helper; tsp_put_code_helper *psp_put_code_helper; /* API #82 */
   const char *nSP_printf; tSP_printf *pSP_printf; /* API #83 */
   const char *nSP_fprintf; tSP_fprintf *pSP_fprintf; /* API #84 */
   const char *nsp_ttyprintf; tsp_ttyprintf *psp_ttyprintf; /* API #85 */
   const char *nSP_put_bytes; tSP_put_bytes *pSP_put_bytes; /* API #86 */
   const char *nSP_put_codes; tSP_put_codes *pSP_put_codes; /* API #87 */
   const char *nSP_put_encoded_string; tSP_put_encoded_string *pSP_put_encoded_string; /* API #88 */
   const char *nSP_flush_output; tSP_flush_output *pSP_flush_output; /* API #89 */
   const char *nSP_fclose; tSP_fclose *pSP_fclose; /* API #90 */
   const char *nSP_unget_code; tSP_unget_code *pSP_unget_code; /* API #91 */
   const char *nSP_unget_byte; tSP_unget_byte *pSP_unget_byte; /* API #92 */
   const char *nSP_signal; tSP_signal *pSP_signal; /* API #93 */
   const char *nsp_raise_signal; tsp_raise_signal *psp_raise_signal; /* API #94 */
   const char *nSP_define_c_predicate; tSP_define_c_predicate *pSP_define_c_predicate; /* API #95 */
   const char *nSP_copy_environ; tSP_copy_environ *pSP_copy_environ; /* API #96 */
   const char *nunavailable_api_97; void *unavailable_api_97; /* API #97 */
   const char *nunavailable_api_98; void *unavailable_api_98; /* API #98 */
   const char *nSP_write_term; tSP_write_term *pSP_write_term; /* API #99 */
   const char *nunavailable_api_100; void *unavailable_api_100; /* API #100 */
   const char *nSP_malloc; tSP_malloc *pSP_malloc; /* API #101 */
   const char *nSP_realloc; tSP_realloc *pSP_realloc; /* API #102 */
   const char *nSP_free; tSP_free *pSP_free; /* API #103 */
   const char *nunavailable_api_104; void *unavailable_api_104; /* API #104 */
   const char *nSP_save_and_raise_error; tSP_save_and_raise_error *pSP_save_and_raise_error; /* API #105 */
   const char *nSP_schedule_async_event; tSP_schedule_async_event *pSP_schedule_async_event; /* API #106 */
#if !SP_WIN32
   const char *nsp_raise_errno_error; tsp_raise_errno_error *psp_raise_errno_error; /* API #107 */
#endif /* !SP_WIN32 */
#if SP_WIN32
   const char *nsp_raise_win32_error; tsp_raise_win32_error *psp_raise_win32_error; /* API #107 */
#endif /* SP_WIN32 */
   const char *nSP_atom_length; tSP_atom_length *pSP_atom_length; /* API #108 */
   const char *nSP_put_list_n_codes; tSP_put_list_n_codes *pSP_put_list_n_codes; /* API #109 */
   const char *nSP_get_list_n_codes; tSP_get_list_n_codes *pSP_get_list_n_codes; /* API #110 */
   const char *nSP_register_atom; tSP_register_atom *pSP_register_atom; /* API #111 */
   const char *nSP_unregister_atom; tSP_unregister_atom *pSP_unregister_atom; /* API #112 */
   const char *nSP_cons_functor_array; tSP_cons_functor_array *pSP_cons_functor_array; /* API #113 */
   const char *nSP_restore; tSP_restore *pSP_restore; /* API #114 */
   const char *nSP_set_current_dir; tSP_set_current_dir *pSP_set_current_dir; /* API #115 */
   const char *nSP_get_current_dir; tSP_get_current_dir *pSP_get_current_dir; /* API #116 */
   const char *nSP_raise_fault; tSP_raise_fault *pSP_raise_fault; /* API #117 */
   const char *nsp_set_abort_env; tsp_set_abort_env *psp_set_abort_env; /* API #118 */
   const char *nsp_get_abort_err_ienc; tsp_get_abort_err_ienc *psp_get_abort_err_ienc; /* API #119 */
   const char *nsp_get_boot_path; tsp_get_boot_path *psp_get_boot_path; /* API #120 */
   const char *nSP_get_emulator_version; tSP_get_emulator_version *pSP_get_emulator_version; /* API #121 */
   const char *nSP_get_emulator_dir; tSP_get_emulator_dir *pSP_get_emulator_dir; /* API #122 */
   const char *nSP_set_initial_options; tSP_set_initial_options *pSP_set_initial_options; /* API #123 */
   const char *nSP_set_set_window_title_hook; tSP_set_set_window_title_hook *pSP_set_set_window_title_hook; /* API #124 */
   const char *nSP_set_get_window_title_hook; tSP_set_get_window_title_hook *pSP_set_get_window_title_hook; /* API #125 */
   const char *nsp_get_engine_global; tsp_get_engine_global *psp_get_engine_global; /* API #126 */
   const char *nSP_sigaction; tSP_sigaction *pSP_sigaction; /* API #127 */
   const char *nSP_free_async_event; tSP_free_async_event *pSP_free_async_event; /* API #128 */
   const char *nsp_qload_or_restore; tsp_qload_or_restore *psp_qload_or_restore; /* API #129 */
   const char *nsp_variable_to_string; tsp_variable_to_string *psp_variable_to_string; /* API #130 */
   const char *nSP_install_spti_hook; tSP_install_spti_hook *pSP_install_spti_hook; /* API #131 */
   const char *nsp_get_classpath; tsp_get_classpath *psp_get_classpath; /* API #132 */
   const char *nsp_get_failed_bootpath; tsp_get_failed_bootpath *psp_get_failed_bootpath; /* API #133 */
   const char *nsp_prolog_initialized; tsp_prolog_initialized *psp_prolog_initialized; /* API #134 */
   const char *nsp_is_development_system; tsp_is_development_system *psp_is_development_system; /* API #135 */
   const char *nSP_calloc; tSP_calloc *pSP_calloc; /* API #136 */
   const char *nSP_strdup; tSP_strdup *pSP_strdup; /* API #137 */
   const char *nSP_next_stream; tSP_next_stream *pSP_next_stream; /* API #138 */
#if !SP_WIN32
   const char *nSP_select; tSP_select *pSP_select; /* API #139 */
#endif /* !SP_WIN32 */
#if SP_WIN32
   const char *nSP_select; tSP_select *pSP_select; /* API #139 */
#endif /* SP_WIN32 */
   const char *nSP_open_socket_stream; tSP_open_socket_stream *pSP_open_socket_stream; /* API #140 */
   const char *nSP_to_os; tSP_to_os *pSP_to_os; /* API #141 */
   const char *nSP_from_os; tSP_from_os *pSP_from_os; /* API #142 */
   const char *nSP_wci_code; tSP_wci_code *pSP_wci_code; /* API #143 */
   const char *nSP_wci_len; tSP_wci_len *pSP_wci_len; /* API #144 */
   const char *nSP_code_wci; tSP_code_wci *pSP_code_wci; /* API #145 */
   const char *nSP_latin1_chartype; tSP_latin1_chartype *pSP_latin1_chartype; /* API #146 */
   const char *nSP_mutex_lock; tSP_mutex_lock *pSP_mutex_lock; /* API #147 */
   const char *nSP_mutex_unlock; tSP_mutex_unlock *pSP_mutex_unlock; /* API #148 */
   const char *nSP_mutex_destroy; tSP_mutex_destroy *pSP_mutex_destroy; /* API #149 */
   const char *nSP_load_sicstus_run_time; tSP_load_sicstus_run_time *pSP_load_sicstus_run_time; /* API #150 */
   const char *nSP_set_multi_sp_state; tSP_set_multi_sp_state *pSP_set_multi_sp_state; /* API #151 */
   const char *nSP_put_external_object; tSP_put_external_object *pSP_put_external_object; /* API #152 */
   const char *nSP_get_external_object; tSP_get_external_object *pSP_get_external_object; /* API #153 */
   const char *nSP_external_object_default_putter_helper; tSP_external_object_default_putter_helper *pSP_external_object_default_putter_helper; /* API #154 */
   const char *nSP_put_external_object_link; tSP_put_external_object_link *pSP_put_external_object_link; /* API #155 */
   const char *nSP_put_weak_external_object_link; tSP_put_weak_external_object_link *pSP_put_weak_external_object_link; /* API #156 */
   const char *nSP_register_external_object_type; tSP_register_external_object_type *pSP_register_external_object_type; /* API #157 */
   const char *nSP_register_external_object; tSP_register_external_object *pSP_register_external_object; /* API #158 */
   const char *nSP_unlink_external_object; tSP_unlink_external_object *pSP_unlink_external_object; /* API #159 */
   const char *nSP_get_external_object_data; tSP_get_external_object_data *pSP_get_external_object_data; /* API #160 */
   const char *nSP_get_external_object_type; tSP_get_external_object_type *pSP_get_external_object_type; /* API #161 */
   const char *nSP_finalize_external_object; tSP_finalize_external_object *pSP_finalize_external_object; /* API #162 */
   const char *nSP_garbage_collect_external_objects; tSP_garbage_collect_external_objects *pSP_garbage_collect_external_objects; /* API #163 */
   const char *nSP_ctrlc_action; tSP_ctrlc_action *pSP_ctrlc_action; /* API #164 */
   const char *nSP_ctrlbreak_action; tSP_ctrlbreak_action *pSP_ctrlbreak_action; /* API #165 */
   const char *nsp_set_jasper_magic; tsp_set_jasper_magic *psp_set_jasper_magic; /* API #166 */
   const char *nsp_get_jasper_magic; tsp_get_jasper_magic *psp_get_jasper_magic; /* API #167 */
   const char *nsp_set_jasper_threadservermode; tsp_set_jasper_threadservermode *psp_set_jasper_threadservermode; /* API #168 */
   const char *nsp_get_jasper_threadservermode; tsp_get_jasper_threadservermode *psp_get_jasper_threadservermode; /* API #169 */
   const char *nSP_get_integer_bytes; tSP_get_integer_bytes *pSP_get_integer_bytes; /* API #170 */
   const char *nSP_put_integer_bytes; tSP_put_integer_bytes *pSP_put_integer_bytes; /* API #171 */
   const char *nSP_setenv; tSP_setenv *pSP_setenv; /* API #172 */
   const char *nSP_getenv; tSP_getenv *pSP_getenv; /* API #173 */
   const char *nSP_expand_file_name; tSP_expand_file_name *pSP_expand_file_name; /* API #174 */
   const char *nsp_spio_assert_failure; tsp_spio_assert_failure *psp_spio_assert_failure; /* API #175 */
   const char *nsp_spio_debug_break; tsp_spio_debug_break *psp_spio_debug_break; /* API #176 */
   const char *nsp_spio_error_name; tsp_spio_error_name *psp_spio_error_name; /* API #177 */
   const char *nsp_spio_trace_line; tsp_spio_trace_line *psp_spio_trace_line; /* API #178 */
   const char *nSP_get_encoding; tSP_get_encoding *pSP_get_encoding; /* API #179 */
   const char *nSP_encoding_release; tSP_encoding_release *pSP_encoding_release; /* API #180 */
   const char *nSP_encoding_open; tSP_encoding_open *pSP_encoding_open; /* API #181 */
   const char *nSP_encode_from_codes; tSP_encode_from_codes *pSP_encode_from_codes; /* API #182 */
   const char *nSP_encode_to_codes; tSP_encode_to_codes *pSP_encode_to_codes; /* API #183 */
   const char *nsp_ttyflush; tsp_ttyflush *psp_ttyflush; /* API #184 */
   const char *nsp_memory_fault; tsp_memory_fault *psp_memory_fault; /* API #185 */
   const char *nSP_decode_reserved_exception; tSP_decode_reserved_exception *pSP_decode_reserved_exception; /* API #186 */
   const char *nSP_install_idle_hook; tSP_install_idle_hook *pSP_install_idle_hook; /* API #187 */
   const char *nSP_put_list_n_bytes; tSP_put_list_n_bytes *pSP_put_list_n_bytes; /* API #188 */
   const char *nSP_get_list_n_bytes; tSP_get_list_n_bytes *pSP_get_list_n_bytes; /* API #189 */
   const char *nSP_stream_from_string; tSP_stream_from_string *pSP_stream_from_string; /* API #190 */
   const char *nSP_set_argv; tSP_set_argv *pSP_set_argv; /* API #191 */
   const char *nSP_alloc_async_event; tSP_alloc_async_event *pSP_alloc_async_event; /* API #192 */
   const char *nSP_system_properties; tSP_system_properties *pSP_system_properties; /* API #193 */
   const char *nSP_get_system_property; tSP_get_system_property *pSP_get_system_property; /* API #194 */
   const char *nSP_set_system_property; tSP_set_system_property *pSP_set_system_property; /* API #195 */
   const char *nSP_codes_to_multi_bytes; tSP_codes_to_multi_bytes *pSP_codes_to_multi_bytes; /* API #196 */
   const char *nNULL; void (*pNULL)(void); /* NULL terminator */
} DISPATCH_TABLE_SICSTUS_H;

#define SP_API_SICSTUS_H_NUMBER_OF_ENTRIES 196
#if (INCLUDED_FROM_RUNTIME || ECLIPSE_CDT) /* No indirection within SP runtime (or when indexing from CDT) */
extern tsp_glue_initialize  sp_glue_initialize;
extern tSP_deinitialize  SP_deinitialize;
extern tSP_force_interactive  SP_force_interactive;
extern tSP_load  SP_load;
extern tSP_predicate  SP_predicate;
extern tSP_pred  SP_pred;
extern tSP_new_term_ref  SP_new_term_ref;
extern tSP_new_term_refs  SP_new_term_refs;
extern tSP_reset_term_refs  SP_reset_term_refs;
extern tSP_alloc_globrefs  SP_alloc_globrefs;
extern tSP_free_globrefs  SP_free_globrefs;
extern tSP_query  SP_query;
extern tSP_query_cut_fail  SP_query_cut_fail;
extern tSP_open_query  SP_open_query;
extern tSP_open_query_array  SP_open_query_array;
extern tSP_next_solution  SP_next_solution;
extern tSP_cut_query  SP_cut_query;
extern tSP_close_query  SP_close_query;
extern tSP_event  SP_event;
extern tSP_fopen  SP_fopen;
extern tsp_ref_term  sp_ref_term;
extern tSP_create_os_stream  SP_create_os_stream;
extern tSP_get_stream_user_data  SP_get_stream_user_data;
extern tSP_get_stream_counts  SP_get_stream_counts;
extern tSP_put_variable  SP_put_variable;
extern tSP_put_term  SP_put_term;
extern tSP_put_integer  SP_put_integer;
extern tSP_put_float  SP_put_float;
extern tSP_put_atom  SP_put_atom;
extern tSP_put_string  SP_put_string;
extern tSP_put_address  SP_put_address;
extern tSP_put_list_codes  SP_put_list_codes;
extern tSP_put_number_codes  SP_put_number_codes;
extern tSP_put_functor  SP_put_functor;
extern tSP_put_list  SP_put_list;
extern tSP_cons_functor  SP_cons_functor;
extern tSP_cons_list  SP_cons_list;
extern tSP_read_from_string  SP_read_from_string;
extern tSP_get_integer  SP_get_integer;
extern tSP_get_float  SP_get_float;
extern tSP_get_atom  SP_get_atom;
extern tSP_get_string  SP_get_string;
extern tSP_get_address  SP_get_address;
extern tSP_get_list_codes  SP_get_list_codes;
extern tSP_get_number_codes  SP_get_number_codes;
extern tSP_get_functor  SP_get_functor;
extern tSP_get_list  SP_get_list;
extern tSP_get_arg  SP_get_arg;
extern tSP_term_type  SP_term_type;
extern tSP_is_variable  SP_is_variable;
extern tSP_is_integer  SP_is_integer;
extern tSP_is_float  SP_is_float;
extern tSP_is_atom  SP_is_atom;
extern tSP_is_compound  SP_is_compound;
extern tSP_is_list  SP_is_list;
extern tSP_is_atomic  SP_is_atomic;
extern tSP_is_number  SP_is_number;
extern tSP_atom_from_string  SP_atom_from_string;
extern tSP_existing_atom_from_string  SP_existing_atom_from_string;
extern tSP_string_from_atom  SP_string_from_atom;
extern tSP_unify  SP_unify;
extern tSP_compare  SP_compare;
extern tSP_exception_term  SP_exception_term;
extern tSP_raise_exception  SP_raise_exception;
extern tSP_fail  SP_fail;
extern tSP_error_message  SP_error_message;
extern tSP_get_errno  SP_get_errno;
extern tSP_get_stdin  SP_get_stdin;
extern tSP_get_stdout  SP_get_stdout;
extern tSP_get_stderr  SP_get_stderr;
extern tSP_get_curin  SP_get_curin;
extern tSP_get_curout  SP_get_curout;
extern tSP_set_user_stream_hook  SP_set_user_stream_hook;
extern tSP_set_user_stream_post_hook  SP_set_user_stream_post_hook;
extern tSP_create_stream  SP_create_stream;
extern tsp_get_byte_helper  sp_get_byte_helper;
extern tsp_put_byte_helper  sp_put_byte_helper;
extern tsp_get_code_helper  sp_get_code_helper;
extern tsp_put_code_helper  sp_put_code_helper;
extern tSP_printf  SP_printf;
extern tSP_fprintf  SP_fprintf;
extern tsp_ttyprintf  sp_ttyprintf;
extern tSP_put_bytes  SP_put_bytes;
extern tSP_put_codes  SP_put_codes;
extern tSP_put_encoded_string  SP_put_encoded_string;
extern tSP_flush_output  SP_flush_output;
extern tSP_fclose  SP_fclose;
extern tSP_unget_code  SP_unget_code;
extern tSP_unget_byte  SP_unget_byte;
extern tSP_signal  SP_signal;
extern tsp_raise_signal  sp_raise_signal;
extern tSP_define_c_predicate  SP_define_c_predicate;
extern tSP_copy_environ  SP_copy_environ;
extern tSP_write_term  SP_write_term;
extern tSP_malloc  SP_malloc;
extern tSP_realloc  SP_realloc;
extern tSP_free  SP_free;
extern tSP_save_and_raise_error  SP_save_and_raise_error;
extern tSP_schedule_async_event  SP_schedule_async_event;
#if !SP_WIN32
extern tsp_raise_errno_error  sp_raise_errno_error;
#endif /* !SP_WIN32 */
#if SP_WIN32
extern tsp_raise_win32_error  sp_raise_win32_error;
#endif /* SP_WIN32 */
extern tSP_atom_length  SP_atom_length;
extern tSP_put_list_n_codes  SP_put_list_n_codes;
extern tSP_get_list_n_codes  SP_get_list_n_codes;
extern tSP_register_atom  SP_register_atom;
extern tSP_unregister_atom  SP_unregister_atom;
extern tSP_cons_functor_array  SP_cons_functor_array;
extern tSP_restore  SP_restore;
extern tSP_set_current_dir  SP_set_current_dir;
extern tSP_get_current_dir  SP_get_current_dir;
extern tSP_raise_fault  SP_raise_fault;
extern tsp_set_abort_env  sp_set_abort_env;
extern tsp_get_abort_err_ienc  sp_get_abort_err_ienc;
extern tsp_get_boot_path  sp_get_boot_path;
extern tSP_get_emulator_version  SP_get_emulator_version;
extern tSP_get_emulator_dir  SP_get_emulator_dir;
extern tSP_set_initial_options  SP_set_initial_options;
extern tSP_set_set_window_title_hook  SP_set_set_window_title_hook;
extern tSP_set_get_window_title_hook  SP_set_get_window_title_hook;
extern tsp_get_engine_global  sp_get_engine_global;
extern tSP_sigaction  SP_sigaction;
extern tSP_free_async_event  SP_free_async_event;
extern tsp_qload_or_restore  sp_qload_or_restore;
extern tsp_variable_to_string  sp_variable_to_string;
extern tSP_install_spti_hook  SP_install_spti_hook;
extern tsp_get_classpath  sp_get_classpath;
extern tsp_get_failed_bootpath  sp_get_failed_bootpath;
extern tsp_prolog_initialized  sp_prolog_initialized;
extern tsp_is_development_system  sp_is_development_system;
extern tSP_calloc  SP_calloc;
extern tSP_strdup  SP_strdup;
extern tSP_next_stream  SP_next_stream;
#if !SP_WIN32
extern tSP_select  SP_select;
#endif /* !SP_WIN32 */
#if SP_WIN32
extern tSP_select  SP_select;
#endif /* SP_WIN32 */
extern tSP_open_socket_stream  SP_open_socket_stream;
extern tSP_to_os  SP_to_os;
extern tSP_from_os  SP_from_os;
extern tSP_wci_code  SP_wci_code;
extern tSP_wci_len  SP_wci_len;
extern tSP_code_wci  SP_code_wci;
extern tSP_latin1_chartype  SP_latin1_chartype;
extern tSP_mutex_lock  SP_mutex_lock;
extern tSP_mutex_unlock  SP_mutex_unlock;
extern tSP_mutex_destroy  SP_mutex_destroy;
extern tSP_load_sicstus_run_time  SP_load_sicstus_run_time;
extern tSP_set_multi_sp_state  SP_set_multi_sp_state;
extern tSP_put_external_object  SP_put_external_object;
extern tSP_get_external_object  SP_get_external_object;
extern tSP_external_object_default_putter_helper  SP_external_object_default_putter_helper;
extern tSP_put_external_object_link  SP_put_external_object_link;
extern tSP_put_weak_external_object_link  SP_put_weak_external_object_link;
extern tSP_register_external_object_type  SP_register_external_object_type;
extern tSP_register_external_object  SP_register_external_object;
extern tSP_unlink_external_object  SP_unlink_external_object;
extern tSP_get_external_object_data  SP_get_external_object_data;
extern tSP_get_external_object_type  SP_get_external_object_type;
extern tSP_finalize_external_object  SP_finalize_external_object;
extern tSP_garbage_collect_external_objects  SP_garbage_collect_external_objects;
extern tSP_ctrlc_action  SP_ctrlc_action;
extern tSP_ctrlbreak_action  SP_ctrlbreak_action;
extern tsp_set_jasper_magic  sp_set_jasper_magic;
extern tsp_get_jasper_magic  sp_get_jasper_magic;
extern tsp_set_jasper_threadservermode  sp_set_jasper_threadservermode;
extern tsp_get_jasper_threadservermode  sp_get_jasper_threadservermode;
extern tSP_get_integer_bytes  SP_get_integer_bytes;
extern tSP_put_integer_bytes  SP_put_integer_bytes;
extern tSP_setenv  SP_setenv;
extern tSP_getenv  SP_getenv;
extern tSP_expand_file_name  SP_expand_file_name;
extern tsp_spio_assert_failure  sp_spio_assert_failure;
extern tsp_spio_debug_break  sp_spio_debug_break;
extern tsp_spio_error_name  sp_spio_error_name;
extern tsp_spio_trace_line  sp_spio_trace_line;
extern tSP_get_encoding  SP_get_encoding;
extern tSP_encoding_release  SP_encoding_release;
extern tSP_encoding_open  SP_encoding_open;
extern tSP_encode_from_codes  SP_encode_from_codes;
extern tSP_encode_to_codes  SP_encode_to_codes;
extern tsp_ttyflush  sp_ttyflush;
extern tsp_memory_fault  sp_memory_fault;
extern tSP_decode_reserved_exception  SP_decode_reserved_exception;
extern tSP_install_idle_hook  SP_install_idle_hook;
extern tSP_put_list_n_bytes  SP_put_list_n_bytes;
extern tSP_get_list_n_bytes  SP_get_list_n_bytes;
extern tSP_stream_from_string  SP_stream_from_string;
extern tSP_set_argv  SP_set_argv;
extern tSP_alloc_async_event  SP_alloc_async_event;
extern tSP_system_properties  SP_system_properties;
extern tSP_get_system_property  SP_get_system_property;
extern tSP_set_system_property  SP_set_system_property;
extern tSP_codes_to_multi_bytes  SP_codes_to_multi_bytes;
#else /* !INCLUDED_FROM_RUNTIME Dispatch based API */

   #define sp_glue_initialize (GetSICStusAPIProcInit(API_SICSTUS_H,psp_glue_initialize,nsp_glue_initialize,"sp_glue_initialize"))
   #define SP_deinitialize (GetSICStusAPIProcInit(API_SICSTUS_H,pSP_deinitialize,nSP_deinitialize,"SP_deinitialize"))
   #define SP_force_interactive (GetSICStusAPIProcInit(API_SICSTUS_H,pSP_force_interactive,nSP_force_interactive,"SP_force_interactive"))
   #define SP_load (GetSICStusAPIProc(API_SICSTUS_H,pSP_load,nSP_load,"SP_load"))
   #define SP_predicate (GetSICStusAPIProc(API_SICSTUS_H,pSP_predicate,nSP_predicate,"SP_predicate"))
   #define SP_pred (GetSICStusAPIProc(API_SICSTUS_H,pSP_pred,nSP_pred,"SP_pred"))
   #define SP_new_term_ref (GetSICStusAPIProc(API_SICSTUS_H,pSP_new_term_ref,nSP_new_term_ref,"SP_new_term_ref"))
   #define SP_new_term_refs (GetSICStusAPIProc(API_SICSTUS_H,pSP_new_term_refs,nSP_new_term_refs,"SP_new_term_refs"))
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_SP_reset_term_refs
   #define SP_reset_term_refs (GetSICStusAPIProc(API_SICSTUS_H,pSP_reset_term_refs,nSP_reset_term_refs,"SP_reset_term_refs"))
#endif /* SICSTUS_HIDDEN_API */
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_SP_alloc_globrefs
   #define SP_alloc_globrefs (GetSICStusAPIProc(API_SICSTUS_H,pSP_alloc_globrefs,nSP_alloc_globrefs,"SP_alloc_globrefs"))
#endif /* SICSTUS_HIDDEN_API */
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_SP_free_globrefs
   #define SP_free_globrefs (GetSICStusAPIProc(API_SICSTUS_H,pSP_free_globrefs,nSP_free_globrefs,"SP_free_globrefs"))
#endif /* SICSTUS_HIDDEN_API */
   #define SP_query (GetSICStusAPIProc(API_SICSTUS_H,pSP_query,nSP_query,"SP_query"))
   #define SP_query_cut_fail (GetSICStusAPIProc(API_SICSTUS_H,pSP_query_cut_fail,nSP_query_cut_fail,"SP_query_cut_fail"))
   #define SP_open_query (GetSICStusAPIProc(API_SICSTUS_H,pSP_open_query,nSP_open_query,"SP_open_query"))
   #define SP_open_query_array (GetSICStusAPIProc(API_SICSTUS_H,pSP_open_query_array,nSP_open_query_array,"SP_open_query_array"))
   #define SP_next_solution (GetSICStusAPIProc(API_SICSTUS_H,pSP_next_solution,nSP_next_solution,"SP_next_solution"))
   #define SP_cut_query (GetSICStusAPIProc(API_SICSTUS_H,pSP_cut_query,nSP_cut_query,"SP_cut_query"))
   #define SP_close_query (GetSICStusAPIProc(API_SICSTUS_H,pSP_close_query,nSP_close_query,"SP_close_query"))
   #define SP_event (GetSICStusAPIProc(API_SICSTUS_H,pSP_event,nSP_event,"SP_event"))
   #define SP_fopen (GetSICStusAPIProc(API_SICSTUS_H,pSP_fopen,nSP_fopen,"SP_fopen"))
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_sp_ref_term
   #define sp_ref_term (GetSICStusAPIProc(API_SICSTUS_H,psp_ref_term,nsp_ref_term,"sp_ref_term"))
#endif /* SICSTUS_HIDDEN_API */
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_SP_create_os_stream
   #define SP_create_os_stream (GetSICStusAPIProc(API_SICSTUS_H,pSP_create_os_stream,nSP_create_os_stream,"SP_create_os_stream"))
#endif /* SICSTUS_HIDDEN_API */
   #define SP_get_stream_user_data (GetSICStusAPIProc(API_SICSTUS_H,pSP_get_stream_user_data,nSP_get_stream_user_data,"SP_get_stream_user_data"))
   #define SP_get_stream_counts (GetSICStusAPIProc(API_SICSTUS_H,pSP_get_stream_counts,nSP_get_stream_counts,"SP_get_stream_counts"))
   #define SP_put_variable (GetSICStusAPIProc(API_SICSTUS_H,pSP_put_variable,nSP_put_variable,"SP_put_variable"))
   #define SP_put_term (GetSICStusAPIProc(API_SICSTUS_H,pSP_put_term,nSP_put_term,"SP_put_term"))
   #define SP_put_integer (GetSICStusAPIProc(API_SICSTUS_H,pSP_put_integer,nSP_put_integer,"SP_put_integer"))
   #define SP_put_float (GetSICStusAPIProc(API_SICSTUS_H,pSP_put_float,nSP_put_float,"SP_put_float"))
   #define SP_put_atom (GetSICStusAPIProc(API_SICSTUS_H,pSP_put_atom,nSP_put_atom,"SP_put_atom"))
   #define SP_put_string (GetSICStusAPIProc(API_SICSTUS_H,pSP_put_string,nSP_put_string,"SP_put_string"))
   #define SP_put_address (GetSICStusAPIProc(API_SICSTUS_H,pSP_put_address,nSP_put_address,"SP_put_address"))
   #define SP_put_list_codes (GetSICStusAPIProc(API_SICSTUS_H,pSP_put_list_codes,nSP_put_list_codes,"SP_put_list_codes"))
   #define SP_put_number_codes (GetSICStusAPIProc(API_SICSTUS_H,pSP_put_number_codes,nSP_put_number_codes,"SP_put_number_codes"))
   #define SP_put_functor (GetSICStusAPIProc(API_SICSTUS_H,pSP_put_functor,nSP_put_functor,"SP_put_functor"))
   #define SP_put_list (GetSICStusAPIProc(API_SICSTUS_H,pSP_put_list,nSP_put_list,"SP_put_list"))
   #define SP_cons_functor (GetSICStusAPIProc(API_SICSTUS_H,pSP_cons_functor,nSP_cons_functor,"SP_cons_functor"))
   #define SP_cons_list (GetSICStusAPIProc(API_SICSTUS_H,pSP_cons_list,nSP_cons_list,"SP_cons_list"))
   #define SP_read_from_string (GetSICStusAPIProc(API_SICSTUS_H,pSP_read_from_string,nSP_read_from_string,"SP_read_from_string"))
   #define SP_get_integer (GetSICStusAPIProc(API_SICSTUS_H,pSP_get_integer,nSP_get_integer,"SP_get_integer"))
   #define SP_get_float (GetSICStusAPIProc(API_SICSTUS_H,pSP_get_float,nSP_get_float,"SP_get_float"))
   #define SP_get_atom (GetSICStusAPIProc(API_SICSTUS_H,pSP_get_atom,nSP_get_atom,"SP_get_atom"))
   #define SP_get_string (GetSICStusAPIProc(API_SICSTUS_H,pSP_get_string,nSP_get_string,"SP_get_string"))
   #define SP_get_address (GetSICStusAPIProc(API_SICSTUS_H,pSP_get_address,nSP_get_address,"SP_get_address"))
   #define SP_get_list_codes (GetSICStusAPIProc(API_SICSTUS_H,pSP_get_list_codes,nSP_get_list_codes,"SP_get_list_codes"))
   #define SP_get_number_codes (GetSICStusAPIProc(API_SICSTUS_H,pSP_get_number_codes,nSP_get_number_codes,"SP_get_number_codes"))
   #define SP_get_functor (GetSICStusAPIProc(API_SICSTUS_H,pSP_get_functor,nSP_get_functor,"SP_get_functor"))
   #define SP_get_list (GetSICStusAPIProc(API_SICSTUS_H,pSP_get_list,nSP_get_list,"SP_get_list"))
   #define SP_get_arg (GetSICStusAPIProc(API_SICSTUS_H,pSP_get_arg,nSP_get_arg,"SP_get_arg"))
   #define SP_term_type (GetSICStusAPIProc(API_SICSTUS_H,pSP_term_type,nSP_term_type,"SP_term_type"))
   #define SP_is_variable (GetSICStusAPIProc(API_SICSTUS_H,pSP_is_variable,nSP_is_variable,"SP_is_variable"))
   #define SP_is_integer (GetSICStusAPIProc(API_SICSTUS_H,pSP_is_integer,nSP_is_integer,"SP_is_integer"))
   #define SP_is_float (GetSICStusAPIProc(API_SICSTUS_H,pSP_is_float,nSP_is_float,"SP_is_float"))
   #define SP_is_atom (GetSICStusAPIProc(API_SICSTUS_H,pSP_is_atom,nSP_is_atom,"SP_is_atom"))
   #define SP_is_compound (GetSICStusAPIProc(API_SICSTUS_H,pSP_is_compound,nSP_is_compound,"SP_is_compound"))
   #define SP_is_list (GetSICStusAPIProc(API_SICSTUS_H,pSP_is_list,nSP_is_list,"SP_is_list"))
   #define SP_is_atomic (GetSICStusAPIProc(API_SICSTUS_H,pSP_is_atomic,nSP_is_atomic,"SP_is_atomic"))
   #define SP_is_number (GetSICStusAPIProc(API_SICSTUS_H,pSP_is_number,nSP_is_number,"SP_is_number"))
   #define SP_atom_from_string (GetSICStusAPIProc(API_SICSTUS_H,pSP_atom_from_string,nSP_atom_from_string,"SP_atom_from_string"))
   #define SP_existing_atom_from_string (GetSICStusAPIProc(API_SICSTUS_H,pSP_existing_atom_from_string,nSP_existing_atom_from_string,"SP_existing_atom_from_string"))
   #define SP_string_from_atom (GetSICStusAPIProc(API_SICSTUS_H,pSP_string_from_atom,nSP_string_from_atom,"SP_string_from_atom"))
   #define SP_unify (GetSICStusAPIProc(API_SICSTUS_H,pSP_unify,nSP_unify,"SP_unify"))
   #define SP_compare (GetSICStusAPIProc(API_SICSTUS_H,pSP_compare,nSP_compare,"SP_compare"))
   #define SP_exception_term (GetSICStusAPIProc(API_SICSTUS_H,pSP_exception_term,nSP_exception_term,"SP_exception_term"))
   #define SP_raise_exception (GetSICStusAPIProc(API_SICSTUS_H,pSP_raise_exception,nSP_raise_exception,"SP_raise_exception"))
   #define SP_fail (GetSICStusAPIProc(API_SICSTUS_H,pSP_fail,nSP_fail,"SP_fail"))
   #define SP_error_message (GetSICStusAPIProc(API_SICSTUS_H,pSP_error_message,nSP_error_message,"SP_error_message"))
   #define SP_get_errno (GetSICStusAPIProc(API_SICSTUS_H,pSP_get_errno,nSP_get_errno,"SP_get_errno"))
   #define SP_get_stdin (GetSICStusAPIProc(API_SICSTUS_H,pSP_get_stdin,nSP_get_stdin,"SP_get_stdin"))
   #define SP_get_stdout (GetSICStusAPIProc(API_SICSTUS_H,pSP_get_stdout,nSP_get_stdout,"SP_get_stdout"))
   #define SP_get_stderr (GetSICStusAPIProc(API_SICSTUS_H,pSP_get_stderr,nSP_get_stderr,"SP_get_stderr"))
   #define SP_get_curin (GetSICStusAPIProc(API_SICSTUS_H,pSP_get_curin,nSP_get_curin,"SP_get_curin"))
   #define SP_get_curout (GetSICStusAPIProc(API_SICSTUS_H,pSP_get_curout,nSP_get_curout,"SP_get_curout"))
   #define SP_set_user_stream_hook (GetSICStusAPIProcInit(API_SICSTUS_H,pSP_set_user_stream_hook,nSP_set_user_stream_hook,"SP_set_user_stream_hook"))
   #define SP_set_user_stream_post_hook (GetSICStusAPIProcInit(API_SICSTUS_H,pSP_set_user_stream_post_hook,nSP_set_user_stream_post_hook,"SP_set_user_stream_post_hook"))
   #define SP_create_stream (GetSICStusAPIProc(API_SICSTUS_H,pSP_create_stream,nSP_create_stream,"SP_create_stream"))
   #define sp_get_byte_helper (GetSICStusAPIProc(API_SICSTUS_H,psp_get_byte_helper,nsp_get_byte_helper,"sp_get_byte_helper"))
   #define sp_put_byte_helper (GetSICStusAPIProc(API_SICSTUS_H,psp_put_byte_helper,nsp_put_byte_helper,"sp_put_byte_helper"))
   #define sp_get_code_helper (GetSICStusAPIProc(API_SICSTUS_H,psp_get_code_helper,nsp_get_code_helper,"sp_get_code_helper"))
   #define sp_put_code_helper (GetSICStusAPIProc(API_SICSTUS_H,psp_put_code_helper,nsp_put_code_helper,"sp_put_code_helper"))
   #define SP_printf (GetSICStusAPIProc(API_SICSTUS_H,pSP_printf,nSP_printf,"SP_printf"))
   #define SP_fprintf (GetSICStusAPIProc(API_SICSTUS_H,pSP_fprintf,nSP_fprintf,"SP_fprintf"))
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_sp_ttyprintf
   #define sp_ttyprintf (GetSICStusAPIProc(API_SICSTUS_H,psp_ttyprintf,nsp_ttyprintf,"sp_ttyprintf"))
#endif /* SICSTUS_HIDDEN_API */
   #define SP_put_bytes (GetSICStusAPIProc(API_SICSTUS_H,pSP_put_bytes,nSP_put_bytes,"SP_put_bytes"))
   #define SP_put_codes (GetSICStusAPIProc(API_SICSTUS_H,pSP_put_codes,nSP_put_codes,"SP_put_codes"))
   #define SP_put_encoded_string (GetSICStusAPIProc(API_SICSTUS_H,pSP_put_encoded_string,nSP_put_encoded_string,"SP_put_encoded_string"))
   #define SP_flush_output (GetSICStusAPIProc(API_SICSTUS_H,pSP_flush_output,nSP_flush_output,"SP_flush_output"))
   #define SP_fclose (GetSICStusAPIProc(API_SICSTUS_H,pSP_fclose,nSP_fclose,"SP_fclose"))
   #define SP_unget_code (GetSICStusAPIProc(API_SICSTUS_H,pSP_unget_code,nSP_unget_code,"SP_unget_code"))
   #define SP_unget_byte (GetSICStusAPIProc(API_SICSTUS_H,pSP_unget_byte,nSP_unget_byte,"SP_unget_byte"))
   #define SP_signal (GetSICStusAPIProc(API_SICSTUS_H,pSP_signal,nSP_signal,"SP_signal"))
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_sp_raise_signal
   #define sp_raise_signal (GetSICStusAPIProc(API_SICSTUS_H,psp_raise_signal,nsp_raise_signal,"sp_raise_signal"))
#endif /* SICSTUS_HIDDEN_API */
   #define SP_define_c_predicate (GetSICStusAPIProc(API_SICSTUS_H,pSP_define_c_predicate,nSP_define_c_predicate,"SP_define_c_predicate"))
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_SP_copy_environ
   #define SP_copy_environ (GetSICStusAPIProc(API_SICSTUS_H,pSP_copy_environ,nSP_copy_environ,"SP_copy_environ"))
#endif /* SICSTUS_HIDDEN_API */
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_SP_write_term
   #define SP_write_term (GetSICStusAPIProc(API_SICSTUS_H,pSP_write_term,nSP_write_term,"SP_write_term"))
#endif /* SICSTUS_HIDDEN_API */
   #define SP_malloc (GetSICStusAPIProc(API_SICSTUS_H,pSP_malloc,nSP_malloc,"SP_malloc"))
   #define SP_realloc (GetSICStusAPIProc(API_SICSTUS_H,pSP_realloc,nSP_realloc,"SP_realloc"))
   #define SP_free (GetSICStusAPIProc(API_SICSTUS_H,pSP_free,nSP_free,"SP_free"))
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_SP_save_and_raise_error
   #define SP_save_and_raise_error (GetSICStusAPIProc(API_SICSTUS_H,pSP_save_and_raise_error,nSP_save_and_raise_error,"SP_save_and_raise_error"))
#endif /* SICSTUS_HIDDEN_API */
   #define SP_schedule_async_event (GetSICStusAPIProc(API_SICSTUS_H,pSP_schedule_async_event,nSP_schedule_async_event,"SP_schedule_async_event"))
#if !SP_WIN32
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_sp_raise_errno_error
   #define sp_raise_errno_error (GetSICStusAPIProc(API_SICSTUS_H,psp_raise_errno_error,nsp_raise_errno_error,"sp_raise_errno_error"))
#endif /* SICSTUS_HIDDEN_API */
#endif /* !SP_WIN32 */
#if SP_WIN32
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_sp_raise_win32_error
   #define sp_raise_win32_error (GetSICStusAPIProc(API_SICSTUS_H,psp_raise_win32_error,nsp_raise_win32_error,"sp_raise_win32_error"))
#endif /* SICSTUS_HIDDEN_API */
#endif /* SP_WIN32 */
   #define SP_atom_length (GetSICStusAPIProc(API_SICSTUS_H,pSP_atom_length,nSP_atom_length,"SP_atom_length"))
   #define SP_put_list_n_codes (GetSICStusAPIProc(API_SICSTUS_H,pSP_put_list_n_codes,nSP_put_list_n_codes,"SP_put_list_n_codes"))
   #define SP_get_list_n_codes (GetSICStusAPIProc(API_SICSTUS_H,pSP_get_list_n_codes,nSP_get_list_n_codes,"SP_get_list_n_codes"))
   #define SP_register_atom (GetSICStusAPIProc(API_SICSTUS_H,pSP_register_atom,nSP_register_atom,"SP_register_atom"))
   #define SP_unregister_atom (GetSICStusAPIProc(API_SICSTUS_H,pSP_unregister_atom,nSP_unregister_atom,"SP_unregister_atom"))
   #define SP_cons_functor_array (GetSICStusAPIProc(API_SICSTUS_H,pSP_cons_functor_array,nSP_cons_functor_array,"SP_cons_functor_array"))
   #define SP_restore (GetSICStusAPIProc(API_SICSTUS_H,pSP_restore,nSP_restore,"SP_restore"))
   #define SP_set_current_dir (GetSICStusAPIProc(API_SICSTUS_H,pSP_set_current_dir,nSP_set_current_dir,"SP_set_current_dir"))
   #define SP_get_current_dir (GetSICStusAPIProc(API_SICSTUS_H,pSP_get_current_dir,nSP_get_current_dir,"SP_get_current_dir"))
   #define SP_raise_fault (GetSICStusAPIProc(API_SICSTUS_H,pSP_raise_fault,nSP_raise_fault,"SP_raise_fault"))
   #define sp_set_abort_env (GetSICStusAPIProc(API_SICSTUS_H,psp_set_abort_env,nsp_set_abort_env,"sp_set_abort_env"))
   #define sp_get_abort_err_ienc (GetSICStusAPIProc(API_SICSTUS_H,psp_get_abort_err_ienc,nsp_get_abort_err_ienc,"sp_get_abort_err_ienc"))
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_sp_get_boot_path
   #define sp_get_boot_path (GetSICStusAPIProc(API_SICSTUS_H,psp_get_boot_path,nsp_get_boot_path,"sp_get_boot_path"))
#endif /* SICSTUS_HIDDEN_API */
   #define SP_get_emulator_version (GetSICStusAPIProc(API_SICSTUS_H,pSP_get_emulator_version,nSP_get_emulator_version,"SP_get_emulator_version"))
   #define SP_get_emulator_dir (GetSICStusAPIProc(API_SICSTUS_H,pSP_get_emulator_dir,nSP_get_emulator_dir,"SP_get_emulator_dir"))
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_SP_set_initial_options
   #define SP_set_initial_options (GetSICStusAPIProcInit(API_SICSTUS_H,pSP_set_initial_options,nSP_set_initial_options,"SP_set_initial_options"))
#endif /* SICSTUS_HIDDEN_API */
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_SP_set_set_window_title_hook
   #define SP_set_set_window_title_hook (GetSICStusAPIProcInit(API_SICSTUS_H,pSP_set_set_window_title_hook,nSP_set_set_window_title_hook,"SP_set_set_window_title_hook"))
#endif /* SICSTUS_HIDDEN_API */
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_SP_set_get_window_title_hook
   #define SP_set_get_window_title_hook (GetSICStusAPIProcInit(API_SICSTUS_H,pSP_set_get_window_title_hook,nSP_set_get_window_title_hook,"SP_set_get_window_title_hook"))
#endif /* SICSTUS_HIDDEN_API */
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_sp_get_engine_global
   #define sp_get_engine_global (GetSICStusAPIProc(API_SICSTUS_H,psp_get_engine_global,nsp_get_engine_global,"sp_get_engine_global"))
#endif /* SICSTUS_HIDDEN_API */
   #define SP_sigaction (GetSICStusAPIProc(API_SICSTUS_H,pSP_sigaction,nSP_sigaction,"SP_sigaction"))
   #define SP_free_async_event (GetSICStusAPIProc(API_SICSTUS_H,pSP_free_async_event,nSP_free_async_event,"SP_free_async_event"))
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_sp_qload_or_restore
   #define sp_qload_or_restore (GetSICStusAPIProc(API_SICSTUS_H,psp_qload_or_restore,nsp_qload_or_restore,"sp_qload_or_restore"))
#endif /* SICSTUS_HIDDEN_API */
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_sp_variable_to_string
   #define sp_variable_to_string (GetSICStusAPIProc(API_SICSTUS_H,psp_variable_to_string,nsp_variable_to_string,"sp_variable_to_string"))
#endif /* SICSTUS_HIDDEN_API */
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_SP_install_spti_hook
   #define SP_install_spti_hook (GetSICStusAPIProc(API_SICSTUS_H,pSP_install_spti_hook,nSP_install_spti_hook,"SP_install_spti_hook"))
#endif /* SICSTUS_HIDDEN_API */
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_sp_get_classpath
   #define sp_get_classpath (GetSICStusAPIProc(API_SICSTUS_H,psp_get_classpath,nsp_get_classpath,"sp_get_classpath"))
#endif /* SICSTUS_HIDDEN_API */
   #define sp_get_failed_bootpath (GetSICStusAPIProc(API_SICSTUS_H,psp_get_failed_bootpath,nsp_get_failed_bootpath,"sp_get_failed_bootpath"))
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_sp_prolog_initialized
   #define sp_prolog_initialized (GetSICStusAPIProc(API_SICSTUS_H,psp_prolog_initialized,nsp_prolog_initialized,"sp_prolog_initialized"))
#endif /* SICSTUS_HIDDEN_API */
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_sp_is_development_system
   #define sp_is_development_system (GetSICStusAPIProc(API_SICSTUS_H,psp_is_development_system,nsp_is_development_system,"sp_is_development_system"))
#endif /* SICSTUS_HIDDEN_API */
   #define SP_calloc (GetSICStusAPIProc(API_SICSTUS_H,pSP_calloc,nSP_calloc,"SP_calloc"))
   #define SP_strdup (GetSICStusAPIProc(API_SICSTUS_H,pSP_strdup,nSP_strdup,"SP_strdup"))
   #define SP_next_stream (GetSICStusAPIProc(API_SICSTUS_H,pSP_next_stream,nSP_next_stream,"SP_next_stream"))
#if !SP_WIN32
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_SP_select
   #define SP_select (GetSICStusAPIProc(API_SICSTUS_H,pSP_select,nSP_select,"SP_select"))
#endif /* SICSTUS_HIDDEN_API */
#endif /* !SP_WIN32 */
#if SP_WIN32
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_SP_select
   #define SP_select (GetSICStusAPIProc(API_SICSTUS_H,pSP_select,nSP_select,"SP_select"))
#endif /* SICSTUS_HIDDEN_API */
#endif /* SP_WIN32 */
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_SP_open_socket_stream
   #define SP_open_socket_stream (GetSICStusAPIProc(API_SICSTUS_H,pSP_open_socket_stream,nSP_open_socket_stream,"SP_open_socket_stream"))
#endif /* SICSTUS_HIDDEN_API */
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_SP_to_os
   #define SP_to_os (GetSICStusAPIProc(API_SICSTUS_H,pSP_to_os,nSP_to_os,"SP_to_os"))
#endif /* SICSTUS_HIDDEN_API */
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_SP_from_os
   #define SP_from_os (GetSICStusAPIProc(API_SICSTUS_H,pSP_from_os,nSP_from_os,"SP_from_os"))
#endif /* SICSTUS_HIDDEN_API */
   #define SP_wci_code (GetSICStusAPIProc(API_SICSTUS_H,pSP_wci_code,nSP_wci_code,"SP_wci_code"))
   #define SP_wci_len (GetSICStusAPIProc(API_SICSTUS_H,pSP_wci_len,nSP_wci_len,"SP_wci_len"))
   #define SP_code_wci (GetSICStusAPIProc(API_SICSTUS_H,pSP_code_wci,nSP_code_wci,"SP_code_wci"))
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_SP_latin1_chartype
   #define SP_latin1_chartype (GetSICStusAPIProc(API_SICSTUS_H,pSP_latin1_chartype,nSP_latin1_chartype,"SP_latin1_chartype"))
#endif /* SICSTUS_HIDDEN_API */
   #define SP_mutex_lock (GetSICStusAPIProc(API_SICSTUS_H,pSP_mutex_lock,nSP_mutex_lock,"SP_mutex_lock"))
   #define SP_mutex_unlock (GetSICStusAPIProc(API_SICSTUS_H,pSP_mutex_unlock,nSP_mutex_unlock,"SP_mutex_unlock"))
   #define SP_mutex_destroy (GetSICStusAPIProc(API_SICSTUS_H,pSP_mutex_destroy,nSP_mutex_destroy,"SP_mutex_destroy"))
   #define SP_load_sicstus_run_time (GetSICStusAPIProc(API_SICSTUS_H,pSP_load_sicstus_run_time,nSP_load_sicstus_run_time,"SP_load_sicstus_run_time"))
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_SP_set_multi_sp_state
   #define SP_set_multi_sp_state (GetSICStusAPIProc(API_SICSTUS_H,pSP_set_multi_sp_state,nSP_set_multi_sp_state,"SP_set_multi_sp_state"))
#endif /* SICSTUS_HIDDEN_API */
   #define SP_put_external_object (GetSICStusAPIProc(API_SICSTUS_H,pSP_put_external_object,nSP_put_external_object,"SP_put_external_object"))
   #define SP_get_external_object (GetSICStusAPIProc(API_SICSTUS_H,pSP_get_external_object,nSP_get_external_object,"SP_get_external_object"))
   #define SP_external_object_default_putter_helper (GetSICStusAPIProc(API_SICSTUS_H,pSP_external_object_default_putter_helper,nSP_external_object_default_putter_helper,"SP_external_object_default_putter_helper"))
   #define SP_put_external_object_link (GetSICStusAPIProc(API_SICSTUS_H,pSP_put_external_object_link,nSP_put_external_object_link,"SP_put_external_object_link"))
   #define SP_put_weak_external_object_link (GetSICStusAPIProc(API_SICSTUS_H,pSP_put_weak_external_object_link,nSP_put_weak_external_object_link,"SP_put_weak_external_object_link"))
   #define SP_register_external_object_type (GetSICStusAPIProc(API_SICSTUS_H,pSP_register_external_object_type,nSP_register_external_object_type,"SP_register_external_object_type"))
   #define SP_register_external_object (GetSICStusAPIProc(API_SICSTUS_H,pSP_register_external_object,nSP_register_external_object,"SP_register_external_object"))
   #define SP_unlink_external_object (GetSICStusAPIProc(API_SICSTUS_H,pSP_unlink_external_object,nSP_unlink_external_object,"SP_unlink_external_object"))
   #define SP_get_external_object_data (GetSICStusAPIProc(API_SICSTUS_H,pSP_get_external_object_data,nSP_get_external_object_data,"SP_get_external_object_data"))
   #define SP_get_external_object_type (GetSICStusAPIProc(API_SICSTUS_H,pSP_get_external_object_type,nSP_get_external_object_type,"SP_get_external_object_type"))
   #define SP_finalize_external_object (GetSICStusAPIProc(API_SICSTUS_H,pSP_finalize_external_object,nSP_finalize_external_object,"SP_finalize_external_object"))
   #define SP_garbage_collect_external_objects (GetSICStusAPIProc(API_SICSTUS_H,pSP_garbage_collect_external_objects,nSP_garbage_collect_external_objects,"SP_garbage_collect_external_objects"))
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_SP_ctrlc_action
   #define SP_ctrlc_action (GetSICStusAPIProc(API_SICSTUS_H,pSP_ctrlc_action,nSP_ctrlc_action,"SP_ctrlc_action"))
#endif /* SICSTUS_HIDDEN_API */
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_SP_ctrlbreak_action
   #define SP_ctrlbreak_action (GetSICStusAPIProc(API_SICSTUS_H,pSP_ctrlbreak_action,nSP_ctrlbreak_action,"SP_ctrlbreak_action"))
#endif /* SICSTUS_HIDDEN_API */
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_sp_set_jasper_magic
   #define sp_set_jasper_magic (GetSICStusAPIProc(API_SICSTUS_H,psp_set_jasper_magic,nsp_set_jasper_magic,"sp_set_jasper_magic"))
#endif /* SICSTUS_HIDDEN_API */
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_sp_get_jasper_magic
   #define sp_get_jasper_magic (GetSICStusAPIProc(API_SICSTUS_H,psp_get_jasper_magic,nsp_get_jasper_magic,"sp_get_jasper_magic"))
#endif /* SICSTUS_HIDDEN_API */
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_sp_set_jasper_threadservermode
   #define sp_set_jasper_threadservermode (GetSICStusAPIProc(API_SICSTUS_H,psp_set_jasper_threadservermode,nsp_set_jasper_threadservermode,"sp_set_jasper_threadservermode"))
#endif /* SICSTUS_HIDDEN_API */
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_sp_get_jasper_threadservermode
   #define sp_get_jasper_threadservermode (GetSICStusAPIProc(API_SICSTUS_H,psp_get_jasper_threadservermode,nsp_get_jasper_threadservermode,"sp_get_jasper_threadservermode"))
#endif /* SICSTUS_HIDDEN_API */
   #define SP_get_integer_bytes (GetSICStusAPIProc(API_SICSTUS_H,pSP_get_integer_bytes,nSP_get_integer_bytes,"SP_get_integer_bytes"))
   #define SP_put_integer_bytes (GetSICStusAPIProc(API_SICSTUS_H,pSP_put_integer_bytes,nSP_put_integer_bytes,"SP_put_integer_bytes"))
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_SP_setenv
   #define SP_setenv (GetSICStusAPIProc(API_SICSTUS_H,pSP_setenv,nSP_setenv,"SP_setenv"))
#endif /* SICSTUS_HIDDEN_API */
   #define SP_getenv (GetSICStusAPIProc(API_SICSTUS_H,pSP_getenv,nSP_getenv,"SP_getenv"))
   #define SP_expand_file_name (GetSICStusAPIProc(API_SICSTUS_H,pSP_expand_file_name,nSP_expand_file_name,"SP_expand_file_name"))
   #define sp_spio_assert_failure (GetSICStusAPIProc(API_SICSTUS_H,psp_spio_assert_failure,nsp_spio_assert_failure,"sp_spio_assert_failure"))
   #define sp_spio_debug_break (GetSICStusAPIProc(API_SICSTUS_H,psp_spio_debug_break,nsp_spio_debug_break,"sp_spio_debug_break"))
   #define sp_spio_error_name (GetSICStusAPIProc(API_SICSTUS_H,psp_spio_error_name,nsp_spio_error_name,"sp_spio_error_name"))
   #define sp_spio_trace_line (GetSICStusAPIProc(API_SICSTUS_H,psp_spio_trace_line,nsp_spio_trace_line,"sp_spio_trace_line"))
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_SP_get_encoding
   #define SP_get_encoding (GetSICStusAPIProc(API_SICSTUS_H,pSP_get_encoding,nSP_get_encoding,"SP_get_encoding"))
#endif /* SICSTUS_HIDDEN_API */
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_SP_encoding_release
   #define SP_encoding_release (GetSICStusAPIProc(API_SICSTUS_H,pSP_encoding_release,nSP_encoding_release,"SP_encoding_release"))
#endif /* SICSTUS_HIDDEN_API */
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_SP_encoding_open
   #define SP_encoding_open (GetSICStusAPIProc(API_SICSTUS_H,pSP_encoding_open,nSP_encoding_open,"SP_encoding_open"))
#endif /* SICSTUS_HIDDEN_API */
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_SP_encode_from_codes
   #define SP_encode_from_codes (GetSICStusAPIProc(API_SICSTUS_H,pSP_encode_from_codes,nSP_encode_from_codes,"SP_encode_from_codes"))
#endif /* SICSTUS_HIDDEN_API */
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_SP_encode_to_codes
   #define SP_encode_to_codes (GetSICStusAPIProc(API_SICSTUS_H,pSP_encode_to_codes,nSP_encode_to_codes,"SP_encode_to_codes"))
#endif /* SICSTUS_HIDDEN_API */
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_sp_ttyflush
   #define sp_ttyflush (GetSICStusAPIProc(API_SICSTUS_H,psp_ttyflush,nsp_ttyflush,"sp_ttyflush"))
#endif /* SICSTUS_HIDDEN_API */
   #define sp_memory_fault (GetSICStusAPIProc(API_SICSTUS_H,psp_memory_fault,nsp_memory_fault,"sp_memory_fault"))
   #define SP_decode_reserved_exception (GetSICStusAPIProc(API_SICSTUS_H,pSP_decode_reserved_exception,nSP_decode_reserved_exception,"SP_decode_reserved_exception"))
   #define SP_install_idle_hook (GetSICStusAPIProc(API_SICSTUS_H,pSP_install_idle_hook,nSP_install_idle_hook,"SP_install_idle_hook"))
   #define SP_put_list_n_bytes (GetSICStusAPIProc(API_SICSTUS_H,pSP_put_list_n_bytes,nSP_put_list_n_bytes,"SP_put_list_n_bytes"))
   #define SP_get_list_n_bytes (GetSICStusAPIProc(API_SICSTUS_H,pSP_get_list_n_bytes,nSP_get_list_n_bytes,"SP_get_list_n_bytes"))
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_SP_stream_from_string
   #define SP_stream_from_string (GetSICStusAPIProc(API_SICSTUS_H,pSP_stream_from_string,nSP_stream_from_string,"SP_stream_from_string"))
#endif /* SICSTUS_HIDDEN_API */
   #define SP_set_argv (GetSICStusAPIProc(API_SICSTUS_H,pSP_set_argv,nSP_set_argv,"SP_set_argv"))
   #define SP_alloc_async_event (GetSICStusAPIProc(API_SICSTUS_H,pSP_alloc_async_event,nSP_alloc_async_event,"SP_alloc_async_event"))
   #define SP_system_properties (GetSICStusAPIProc(API_SICSTUS_H,pSP_system_properties,nSP_system_properties,"SP_system_properties"))
   #define SP_get_system_property (GetSICStusAPIProc(API_SICSTUS_H,pSP_get_system_property,nSP_get_system_property,"SP_get_system_property"))
   #define SP_set_system_property (GetSICStusAPIProc(API_SICSTUS_H,pSP_set_system_property,nSP_set_system_property,"SP_set_system_property"))
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_SP_codes_to_multi_bytes
   #define SP_codes_to_multi_bytes (GetSICStusAPIProc(API_SICSTUS_H,pSP_codes_to_multi_bytes,nSP_codes_to_multi_bytes,"SP_codes_to_multi_bytes"))
#endif /* SICSTUS_HIDDEN_API */
#endif /* !INCLUDED_FROM_RUNTIME */

#endif /* (defined(INCLUDED_SICSTUS_H) && !defined(INCLUDED_SICSTUS_H_AUX_H)) Dispatch wrappers for API exported from sicstus.h */


/**** Dispatch wrappers for API exported from support.h ****/
#if (defined(INCLUDED_SUPPORT_H) && !defined(INCLUDED_SUPPORT_H_AUX_H))
#define INCLUDED_SUPPORT_H_AUX_H 1 /* Define the wrappers only once */
typedef struct mod_def * (SPCDECL tfind_module) PROTOTYPE((TAGGED name, SP_BOOL insertp));
typedef struct definition * (SPCDECL tfind_definition) PROTOTYPE((struct mod_def * module, TAGGED term, TAGGED * * argl, SP_BOOL insertp));
typedef void (SPCDECL tcall_overflow) PROTOTYPE((Argtype Arg, SP_WORD pad, SP_WORD live));
typedef struct definition * (SPCDECL tfind_def_in_module) PROTOTYPE((TAGGED head, TAGGED module));
typedef void (SPCDECL tnumstack_overflow) PROTOTYPE((Argtype));
typedef TAGGED (SPCDECL tsp_make_integer) PROTOTYPE((Argtype Arg, SP_WORD i));
typedef SP_BOOL (SPCDECL tcunify) PROTOTYPE((Argtype Arg, TAGGED u, TAGGED v));
typedef spio_t_error_code (SPCDECL tsp_init_ds) PROTOTYPE((struct init_ds_arg * args, spio_t_bits options));
typedef struct sw_on_key_node * (SPCDECL tincore_gethash) PROTOTYPE((struct sw_on_key * sw, TAGGED k));
typedef void (SPCDECL tsp_choice_overflow) PROTOTYPE((Argdecl, int pad));
typedef struct worker * (SPCDECL tget_current_worker) PROTOTYPE((void));
typedef TAGGED * (SPCDECL tsp_checkalloc) PROTOTYPE((size_t, SP_BOOL gc));
typedef void (SPCDECL tsp_checkdealloc) PROTOTYPE((TAGGED *, size_t, SP_BOOL gc));
typedef TAGGED * (SPCDECL tsp_checkrealloc) PROTOTYPE((TAGGED *, size_t, size_t, SP_BOOL gc));
typedef struct sw_on_key_node * (SPCDECL tdyn_puthash) PROTOTYPE((struct sw_on_key * * swp, TAGGED k));
typedef struct sw_on_key * (SPCDECL tnew_switch_on_key) PROTOTYPE((SP_WORD size, struct try_node * otherwise));
typedef void (SPCDECL tdispose_switch_on_key) PROTOTYPE((struct sw_on_key * htab));
typedef struct definition * (SPCDECL tparse_definition) PROTOTYPE((TAGGED complex, struct mod_def * module));
typedef int (SPCDECL tSP_install_fd_hooks) PROTOTYPE((SP_HOOKS_COOKIE, SP_FD_ManagerFun *, SP_FD_DestructorFun *, int));
typedef int (SPCDECL tGetSmall_int_range_checked) PROTOTYPE((TAGGED, int, int));
typedef void (SPCDECL tintoRelocationChain) PROTOTYPE((Argtype Arg, TAGGED * chain, TAGGED * elem));
typedef void (SPCDECL tupdate_exports) PROTOTYPE((struct definition * f, unsigned int predtyp));
typedef int (SPCDECL tlarge_insn_offset) PROTOTYPE((INSN *, INSN *));
typedef void (SPCDECL tsp_exitmsg) PROTOTYPE((int));
typedef unsigned int (SPCDECL tGetSmall_uint_checked) PROTOTYPE((TAGGED));
typedef int (SPCDECL terrprintf) PROTOTYPE((int flags, const char * fmt, ...)) SPEXP_ATTRIBUTE__FORMAT_2_3;
typedef TAGGED (SPCDECL tdelete_attributes) PROTOTYPE((TAGGED, struct mod_def *, SP_BOOL propagating, int live));
typedef TAGGED (SPCDECL tget_attributes) PROTOTYPE((TAGGED, struct mod_def *));
typedef void (SPCDECL tput_attributes) PROTOTYPE((TAGGED, TAGGED, struct mod_def *));
typedef SP_WORD (SPCDECL tGetSmall_checked) PROTOTYPE((TAGGED));
typedef void (SPCDECL tmarkTerm) PROTOTYPE((TAGGED term));
typedef int (SPCDECL tGetSmall_int_checked) PROTOTYPE((TAGGED));
#if SP_WIN32
typedef char * (SPCDECL tsp_widechar_to_ienc) PROTOTYPE((wchar_t const * ws));
#endif /* SP_WIN32 */
#if SP_WIN32
typedef wchar_t * (SPCDECL tsp_ienc_to_widechar) PROTOTYPE((char const * s));
#endif /* SP_WIN32 */
typedef SP_ErrprintfHook * (SPCDECL tSP_set_errprintf_hook) PROTOTYPE((SP_ErrprintfHook *, void *));
typedef void (SPCDECL tnumstack_trim) PROTOTYPE((Argtype, TAGGED * top));
typedef SP_BOOL (SPCDECL tpure_attributes) PROTOTYPE((TAGGED, struct mod_def *));
typedef TAGGED (SPCDECL tMakeSmall_checked) PROTOTYPE((SP_WORD));
typedef SP_globref (SPCDECL tsp_get_globref_checked) PROTOTYPE((SP_term_ref tr, Argdecl));
typedef int (SPCDECL tsp_action) PROTOTYPE((int, void *));
typedef SP_BOOL (SPCDECL tsingle_attribute) PROTOTYPE((TAGGED, struct mod_def *));
typedef SP_WORD (SPCDECL tLargeArity_checked) PROTOTYPE((TAGGED x));
typedef TAGGED * (SPCDECL tTermToPointer_checked) PROTOTYPE((TAGGED x));

typedef struct DISPATCH_TABLE_STRUCT_SUPPORT_H {
   unsigned long size; /* sizeof DISPATCH_TABLE_STRUCT_SUPPORT_H ([PM] 4.2.3 unsigned long is correct here) */
   const char *name;   /* "support.h" */
   int version;        /* 0x30100+XX  Major: 3, Minor: 1 */
   const char *nfind_module; tfind_module *pfind_module; /* API #1 */
   const char *nfind_definition; tfind_definition *pfind_definition; /* API #2 */
   const char *ncall_overflow; tcall_overflow *pcall_overflow; /* API #3 */
   const char *nfind_def_in_module; tfind_def_in_module *pfind_def_in_module; /* API #4 */
   const char *nnumstack_overflow; tnumstack_overflow *pnumstack_overflow; /* API #5 */
   const char *nsp_make_integer; tsp_make_integer *psp_make_integer; /* API #6 */
   const char *ncunify; tcunify *pcunify; /* API #7 */
   const char *nsp_init_ds; tsp_init_ds *psp_init_ds; /* API #8 */
   const char *nincore_gethash; tincore_gethash *pincore_gethash; /* API #9 */
   const char *nsp_choice_overflow; tsp_choice_overflow *psp_choice_overflow; /* API #10 */
   const char *nget_current_worker; tget_current_worker *pget_current_worker; /* API #11 */
   const char *nsp_checkalloc; tsp_checkalloc *psp_checkalloc; /* API #12 */
   const char *nsp_checkdealloc; tsp_checkdealloc *psp_checkdealloc; /* API #13 */
   const char *nsp_checkrealloc; tsp_checkrealloc *psp_checkrealloc; /* API #14 */
   const char *ndyn_puthash; tdyn_puthash *pdyn_puthash; /* API #15 */
   const char *nnew_switch_on_key; tnew_switch_on_key *pnew_switch_on_key; /* API #16 */
   const char *ndispose_switch_on_key; tdispose_switch_on_key *pdispose_switch_on_key; /* API #17 */
   const char *nparse_definition; tparse_definition *pparse_definition; /* API #18 */
   const char *nSP_install_fd_hooks; tSP_install_fd_hooks *pSP_install_fd_hooks; /* API #19 */
   const char *nGetSmall_int_range_checked; tGetSmall_int_range_checked *pGetSmall_int_range_checked; /* API #20 */
   const char *nintoRelocationChain; tintoRelocationChain *pintoRelocationChain; /* API #21 */
   const char *nupdate_exports; tupdate_exports *pupdate_exports; /* API #22 */
   const char *nlarge_insn_offset; tlarge_insn_offset *plarge_insn_offset; /* API #23 */
   const char *nsp_exitmsg; tsp_exitmsg *psp_exitmsg; /* API #24 */
   const char *nGetSmall_uint_checked; tGetSmall_uint_checked *pGetSmall_uint_checked; /* API #25 */
   const char *nerrprintf; terrprintf *perrprintf; /* API #26 */
   const char *ndelete_attributes; tdelete_attributes *pdelete_attributes; /* API #27 */
   const char *nget_attributes; tget_attributes *pget_attributes; /* API #28 */
   const char *nput_attributes; tput_attributes *pput_attributes; /* API #29 */
   const char *nGetSmall_checked; tGetSmall_checked *pGetSmall_checked; /* API #30 */
   const char *nmarkTerm; tmarkTerm *pmarkTerm; /* API #31 */
   const char *nGetSmall_int_checked; tGetSmall_int_checked *pGetSmall_int_checked; /* API #32 */
#if SP_WIN32
   const char *nsp_widechar_to_ienc; tsp_widechar_to_ienc *psp_widechar_to_ienc; /* API #33 */
#endif /* SP_WIN32 */
#if !SP_WIN32
   const char *nunavailable_api_33; void *unavailable_api_33; /* API #33 */
#endif /* !SP_WIN32 */
#if SP_WIN32
   const char *nsp_ienc_to_widechar; tsp_ienc_to_widechar *psp_ienc_to_widechar; /* API #34 */
#endif /* SP_WIN32 */
#if !SP_WIN32
   const char *nunavailable_api_34; void *unavailable_api_34; /* API #34 */
#endif /* !SP_WIN32 */
   const char *nSP_set_errprintf_hook; tSP_set_errprintf_hook *pSP_set_errprintf_hook; /* API #35 */
   const char *nnumstack_trim; tnumstack_trim *pnumstack_trim; /* API #36 */
   const char *npure_attributes; tpure_attributes *ppure_attributes; /* API #37 */
   const char *nMakeSmall_checked; tMakeSmall_checked *pMakeSmall_checked; /* API #38 */
   const char *nsp_get_globref_checked; tsp_get_globref_checked *psp_get_globref_checked; /* API #39 */
   const char *nsp_action; tsp_action *psp_action; /* API #40 */
   const char *nsingle_attribute; tsingle_attribute *psingle_attribute; /* API #41 */
   const char *nLargeArity_checked; tLargeArity_checked *pLargeArity_checked; /* API #42 */
   const char *nTermToPointer_checked; tTermToPointer_checked *pTermToPointer_checked; /* API #43 */
   const char *nNULL; void (*pNULL)(void); /* NULL terminator */
} DISPATCH_TABLE_SUPPORT_H;

#define SP_API_SUPPORT_H_NUMBER_OF_ENTRIES 43
#if (INCLUDED_FROM_RUNTIME || ECLIPSE_CDT) /* No indirection within SP runtime (or when indexing from CDT) */
extern tfind_module  find_module;
extern tfind_definition  find_definition;
extern tcall_overflow  call_overflow;
extern tfind_def_in_module  find_def_in_module;
extern tnumstack_overflow  numstack_overflow;
extern tsp_make_integer  sp_make_integer;
extern tcunify  cunify;
extern tsp_init_ds  sp_init_ds;
extern tincore_gethash  incore_gethash;
extern tsp_choice_overflow  sp_choice_overflow;
extern tget_current_worker  get_current_worker;
extern tsp_checkalloc  sp_checkalloc;
extern tsp_checkdealloc  sp_checkdealloc;
extern tsp_checkrealloc  sp_checkrealloc;
extern tdyn_puthash  dyn_puthash;
extern tnew_switch_on_key  new_switch_on_key;
extern tdispose_switch_on_key  dispose_switch_on_key;
extern tparse_definition  parse_definition;
extern tSP_install_fd_hooks  SP_install_fd_hooks;
extern tGetSmall_int_range_checked  GetSmall_int_range_checked;
extern tintoRelocationChain  intoRelocationChain;
extern tupdate_exports  update_exports;
extern tlarge_insn_offset  large_insn_offset;
extern tsp_exitmsg  sp_exitmsg;
extern tGetSmall_uint_checked  GetSmall_uint_checked;
extern terrprintf  errprintf;
extern tdelete_attributes  delete_attributes;
extern tget_attributes  get_attributes;
extern tput_attributes  put_attributes;
extern tGetSmall_checked  GetSmall_checked;
extern tmarkTerm  markTerm;
extern tGetSmall_int_checked  GetSmall_int_checked;
#if SP_WIN32
extern tsp_widechar_to_ienc  sp_widechar_to_ienc;
#endif /* SP_WIN32 */
#if SP_WIN32
extern tsp_ienc_to_widechar  sp_ienc_to_widechar;
#endif /* SP_WIN32 */
extern tSP_set_errprintf_hook  SP_set_errprintf_hook;
extern tnumstack_trim  numstack_trim;
extern tpure_attributes  pure_attributes;
extern tMakeSmall_checked  MakeSmall_checked;
extern tsp_get_globref_checked  sp_get_globref_checked;
extern tsp_action  sp_action;
extern tsingle_attribute  single_attribute;
extern tLargeArity_checked  LargeArity_checked;
extern tTermToPointer_checked  TermToPointer_checked;
#else /* !INCLUDED_FROM_RUNTIME Dispatch based API */

   #define find_module (GetSICStusAPIProc(API_SUPPORT_H,pfind_module,nfind_module,"find_module"))
   #define find_definition (GetSICStusAPIProc(API_SUPPORT_H,pfind_definition,nfind_definition,"find_definition"))
   #define call_overflow (GetSICStusAPIProc(API_SUPPORT_H,pcall_overflow,ncall_overflow,"call_overflow"))
   #define find_def_in_module (GetSICStusAPIProc(API_SUPPORT_H,pfind_def_in_module,nfind_def_in_module,"find_def_in_module"))
   #define numstack_overflow (GetSICStusAPIProc(API_SUPPORT_H,pnumstack_overflow,nnumstack_overflow,"numstack_overflow"))
   #define sp_make_integer (GetSICStusAPIProc(API_SUPPORT_H,psp_make_integer,nsp_make_integer,"sp_make_integer"))
   #define cunify (GetSICStusAPIProc(API_SUPPORT_H,pcunify,ncunify,"cunify"))
   #define sp_init_ds (GetSICStusAPIProc(API_SUPPORT_H,psp_init_ds,nsp_init_ds,"sp_init_ds"))
   #define incore_gethash (GetSICStusAPIProc(API_SUPPORT_H,pincore_gethash,nincore_gethash,"incore_gethash"))
   #define sp_choice_overflow (GetSICStusAPIProc(API_SUPPORT_H,psp_choice_overflow,nsp_choice_overflow,"sp_choice_overflow"))
   #define get_current_worker (GetSICStusAPIProc(API_SUPPORT_H,pget_current_worker,nget_current_worker,"get_current_worker"))
   #define sp_checkalloc (GetSICStusAPIProc(API_SUPPORT_H,psp_checkalloc,nsp_checkalloc,"sp_checkalloc"))
   #define sp_checkdealloc (GetSICStusAPIProc(API_SUPPORT_H,psp_checkdealloc,nsp_checkdealloc,"sp_checkdealloc"))
   #define sp_checkrealloc (GetSICStusAPIProc(API_SUPPORT_H,psp_checkrealloc,nsp_checkrealloc,"sp_checkrealloc"))
   #define dyn_puthash (GetSICStusAPIProc(API_SUPPORT_H,pdyn_puthash,ndyn_puthash,"dyn_puthash"))
   #define new_switch_on_key (GetSICStusAPIProc(API_SUPPORT_H,pnew_switch_on_key,nnew_switch_on_key,"new_switch_on_key"))
   #define dispose_switch_on_key (GetSICStusAPIProc(API_SUPPORT_H,pdispose_switch_on_key,ndispose_switch_on_key,"dispose_switch_on_key"))
   #define parse_definition (GetSICStusAPIProc(API_SUPPORT_H,pparse_definition,nparse_definition,"parse_definition"))
   #define SP_install_fd_hooks (GetSICStusAPIProc(API_SUPPORT_H,pSP_install_fd_hooks,nSP_install_fd_hooks,"SP_install_fd_hooks"))
   #define GetSmall_int_range_checked (GetSICStusAPIProc(API_SUPPORT_H,pGetSmall_int_range_checked,nGetSmall_int_range_checked,"GetSmall_int_range_checked"))
   #define intoRelocationChain (GetSICStusAPIProc(API_SUPPORT_H,pintoRelocationChain,nintoRelocationChain,"intoRelocationChain"))
   #define update_exports (GetSICStusAPIProc(API_SUPPORT_H,pupdate_exports,nupdate_exports,"update_exports"))
   #define large_insn_offset (GetSICStusAPIProc(API_SUPPORT_H,plarge_insn_offset,nlarge_insn_offset,"large_insn_offset"))
   #define sp_exitmsg (GetSICStusAPIProc(API_SUPPORT_H,psp_exitmsg,nsp_exitmsg,"sp_exitmsg"))
   #define GetSmall_uint_checked (GetSICStusAPIProc(API_SUPPORT_H,pGetSmall_uint_checked,nGetSmall_uint_checked,"GetSmall_uint_checked"))
   #define errprintf (GetSICStusAPIProc(API_SUPPORT_H,perrprintf,nerrprintf,"errprintf"))
   #define delete_attributes (GetSICStusAPIProc(API_SUPPORT_H,pdelete_attributes,ndelete_attributes,"delete_attributes"))
   #define get_attributes (GetSICStusAPIProc(API_SUPPORT_H,pget_attributes,nget_attributes,"get_attributes"))
   #define put_attributes (GetSICStusAPIProc(API_SUPPORT_H,pput_attributes,nput_attributes,"put_attributes"))
   #define GetSmall_checked (GetSICStusAPIProc(API_SUPPORT_H,pGetSmall_checked,nGetSmall_checked,"GetSmall_checked"))
   #define markTerm (GetSICStusAPIProc(API_SUPPORT_H,pmarkTerm,nmarkTerm,"markTerm"))
   #define GetSmall_int_checked (GetSICStusAPIProc(API_SUPPORT_H,pGetSmall_int_checked,nGetSmall_int_checked,"GetSmall_int_checked"))
#if SP_WIN32
   #define sp_widechar_to_ienc (GetSICStusAPIProc(API_SUPPORT_H,psp_widechar_to_ienc,nsp_widechar_to_ienc,"sp_widechar_to_ienc"))
#endif /* SP_WIN32 */
#if SP_WIN32
   #define sp_ienc_to_widechar (GetSICStusAPIProc(API_SUPPORT_H,psp_ienc_to_widechar,nsp_ienc_to_widechar,"sp_ienc_to_widechar"))
#endif /* SP_WIN32 */
#if SICSTUS_HIDDEN_API || SICSTUS_UNHIDE_SP_set_errprintf_hook
   #define SP_set_errprintf_hook (GetSICStusAPIProcInit(API_SUPPORT_H,pSP_set_errprintf_hook,nSP_set_errprintf_hook,"SP_set_errprintf_hook"))
#endif /* SICSTUS_HIDDEN_API */
   #define numstack_trim (GetSICStusAPIProc(API_SUPPORT_H,pnumstack_trim,nnumstack_trim,"numstack_trim"))
   #define pure_attributes (GetSICStusAPIProc(API_SUPPORT_H,ppure_attributes,npure_attributes,"pure_attributes"))
   #define MakeSmall_checked (GetSICStusAPIProc(API_SUPPORT_H,pMakeSmall_checked,nMakeSmall_checked,"MakeSmall_checked"))
   #define sp_get_globref_checked (GetSICStusAPIProc(API_SUPPORT_H,psp_get_globref_checked,nsp_get_globref_checked,"sp_get_globref_checked"))
   #define sp_action (GetSICStusAPIProc(API_SUPPORT_H,psp_action,nsp_action,"sp_action"))
   #define single_attribute (GetSICStusAPIProc(API_SUPPORT_H,psingle_attribute,nsingle_attribute,"single_attribute"))
   #define LargeArity_checked (GetSICStusAPIProc(API_SUPPORT_H,pLargeArity_checked,nLargeArity_checked,"LargeArity_checked"))
   #define TermToPointer_checked (GetSICStusAPIProc(API_SUPPORT_H,pTermToPointer_checked,nTermToPointer_checked,"TermToPointer_checked"))
#endif /* !INCLUDED_FROM_RUNTIME */

#endif /* (defined(INCLUDED_SUPPORT_H) && !defined(INCLUDED_SUPPORT_H_AUX_H)) Dispatch wrappers for API exported from support.h */



/* END OF transhdr.pl generated definitions */

#ifndef SPAUX_H_ /* Protect the common parts from multiple inclusion */
typedef DISPATCH_TABLE_SICSTUS_H SICSTUS_DISPATCH_TABLE; /* A sane name */

/* forward declarations */
struct DISPATCH_TABLE_STRUCT_SICSTUS_H;
struct DISPATCH_TABLE_STRUCT_SUPPORT_H;
#ifndef SICSTUS_API_STRUCT_DBG_MEMBERS
#if SICSTUS_DBG
/* [PM] 3.11.2 whether the debug fields 'name' and 'mainfunc' should be available */
#define SICSTUS_API_STRUCT_DBG_MEMBERS 1
#else  /* !SICSTUS_DBG */
#define SICSTUS_API_STRUCT_DBG_MEMBERS 0
#endif /* SICSTUS_DBG */
#endif /* SICSTUS_API_STRUCT_DBG_MEMBERS */



struct SICSTUS_API_STRUCT {
#if 0 /* [PM] It was decided that it was more important to be able to
         mix debug and non-debug code (e.g. when debugging customers
         non-debug foreign resources (xref transhdr.pl)) */

#if SICSTUS_API_STRUCT_DBG_MEMBERS
        void *dummy; /* Catch any code that thinks SICSTUS_API_STRUCT starts with SICSTUS_H dispatch table */
#endif  /* SICSTUS_API_STRUCT_DBG_MEMBERS */
#endif  /* 0 */

	struct DISPATCH_TABLE_STRUCT_SICSTUS_H *dispatch_API_SICSTUS_H;
	struct DISPATCH_TABLE_STRUCT_SUPPORT_H *dispatch_API_SUPPORT_H;
	void *stash;
	struct sp_fli_info  **fli_data; /* Actually a struct worker * */
#if SICSTUS_API_STRUCT_DBG_MEMBERS
        const char* name;	/* Name of foreign resource */
        SP_MainFun * mainfunc;  /* glue main func, only for consistency check. */
#endif /* SICSTUS_API_STRUCT_DBG_MEMBERS */

}; /* SICSTUS_API_STRUCT */
#define SICSTUS_API_STRUCT_TYPE struct SICSTUS_API_STRUCT


#ifndef GetSICStusDISPATCH_At
#define GetSICStusDISPATCH_At(WHERE, API) ((*(WHERE)). dispatch_ ## API)
#endif /* GetSICStusDISPATCH_At */

#ifndef GetSICStusDISPATCH
#define GetSICStusDISPATCH(API) GetSICStusDISPATCH_At((SICStusDISPATCHVAR), API)
#endif /* GetSICStusDISPATCH */

#if SPDLL || SP_DYNAMIC_FOREIGN_RESOURCE || (MULTI_SP_AWARE && SP_ALLOW_MULTI_STATIC)
#ifndef GetSICStusForeignStash
#define GetSICStusForeignStash() (&(*(SICStusDISPATCHVAR)).stash)
#endif /* GetSICStusForeignStash */
#endif /* SPDLL || SP_DYNAMIC_FOREIGN_RESOURCE */

/* void** SP_foreign_stash(void); */
#if SPDLL || SP_DYNAMIC_FOREIGN_RESOURCE || (MULTI_SP_AWARE && SP_ALLOW_MULTI_STATIC)
#define SP_foreign_stash() GetSICStusForeignStash()
#endif /* SPDLL || SP_DYNAMIC_FOREIGN_RESOURCE */

#ifndef SICStusDISPATCHVAR
#define SICStusDISPATCHVAR sp_GlobalSICStus
#endif /* SICStusDISPATCHVAR */

#ifndef GetSICStusDISPATCHAddress
#define GetSICStusDISPATCHAddress() (&(SICStusDISPATCHVAR))
#endif /* GetSICStusDISPATCHAddress */

#if MULTI_SP_AWARE
/* We do not necessarily link against sprt library if MULTI_SP_AWARE so
   we cannot refer to SP_get_dispatch. Instead the embedder must
   ensure that *GetSICStusDISPATCHAddress() is never NULL */
/* [PM] 4.0.2+ SetupAndGetSICStusDISPATCH() should now always return the (non-NULL) value of *GetSICStusDISPATCHAddress() */
#define SetupAndGetSICStusDISPATCH() (*GetSICStusDISPATCHAddress())
#else  /* !MULTI_SP_AWARE */
#ifndef SetupAndGetSICStusDISPATCH
/* [PM] 4.0.2+ SetupAndGetSICStusDISPATCH() should now always return the (non-NULL) value of *GetSICStusDISPATCHAddress() */
#define SetupAndGetSICStusDISPATCH() (((*GetSICStusDISPATCHAddress()) == 0) ? (*(GetSICStusDISPATCHAddress())) = SP_get_dispatch(NULL) : (*GetSICStusDISPATCHAddress()))
#endif /* SetupAndGetSICStusDISPATCH */
#endif /* !MULTI_SP_AWARE */

/* [PM] 4.0.2+ For sideeffect only (avoid cl.exe C6269: Possibly incorrect order of operations: dereference ignored ) */
#define SetupSICStusDISPATCH() do { (void) SetupAndGetSICStusDISPATCH(); } while (0)
#define SP_setup_dispatch() SetupAndGetSICStusDISPATCH()  /* [PM] 4.0.3 documented, sane name */

#define GetSICStusAPIProcAt(WHERE, API, PTRFIELD_NAME, NAMEFIELD_NAME/*IGNORED*/, NAME_AS_STRING/*IGNORED*/) (*((GetSICStusDISPATCH_At((WHERE),API))->PTRFIELD_NAME))

#ifndef GetSICStusAPIProc
#define GetSICStusAPIProc(API, PTRFIELD_NAME, NAMEFIELD_NAME/*IGNORED*/, NAME_AS_STRING/*IGNORED*/) GetSICStusAPIProcAt((SICStusDISPATCHVAR), API, PTRFIELD_NAME, NAMEFIELD_NAME/*IGNORED*/, NAME_AS_STRING/*IGNORED*/)
#endif /* GetSICStusAPIProc */

#if __GNUC__
#define SP_AVOID_WARNING_ABOUT_UNUSED_LEFT_HAND_ARG_TO_COMMA(X) ((void)(X))
#else
#define SP_AVOID_WARNING_ABOUT_UNUSED_LEFT_HAND_ARG_TO_COMMA(X) (X)
#endif /* __GNUC__ */

#ifndef GetSICStusAPIProcInit
/* There should be no parens around the args to GetSICStusAPIProc! */
#if (SP_DYNAMIC_FOREIGN_RESOURCE || SPDLL || SP_INHIBIT_IMPLICIT_APIPROCINIT)
#define GetSICStusAPIProcInit(API, PTRFIELD_NAME, NAMEFIELD_NAME, NAME_AS_STRING) GetSICStusAPIProc(API, PTRFIELD_NAME, NAMEFIELD_NAME, NAME_AS_STRING)
#else
#define GetSICStusAPIProcInit(API, PTRFIELD_NAME, NAMEFIELD_NAME, NAME_AS_STRING) \
  GetSICStusAPIProcAt(SetupAndGetSICStusDISPATCH(), API, PTRFIELD_NAME, NAMEFIELD_NAME, NAME_AS_STRING)
#endif
#endif /* GetSICStusAPIProcInit */

/* */

/* [PM] The name mangling of sp_GlobalSICStus is performed in three
      contexts. There are two copies, one in spaux.h.in (the
      original), one in <RESNAME>_glue.h (i.e., generated by
      flids.c). Keep them synchronized!.
      
   1. (old) Code that does not include <RESNAME>_glue.h but is
      compiled by splfr will work. (backward compatibility). splfr
      will pass -DSP_RESNAME=<RESNAME> to the C compiler.

   2. (new) Code that does include the <RESNAME>_glue.h should not
      need to pass -DSP_RESNAME=<RESNAME> since that define can be
      done in <RESNAME>_glue.h.

   3. sp_GlobalSICStus is extern declared in sicstus.h but at that
      time <RESNAME>_glue.h. has not been seen yet so, in case (2),
      <RESNAME>_glue.h need to redeclare the mangled version of
      sp_GlobalSICStus. Thus <RESNAME>_glue.h need to duplicate the
      mangling defines and the extern declaration of sp_GlobalSICStus
      done below (and will thus use the correct, mangled name).
      
      On the other hand, in case (1), <RESNAME>_glue.h is never seen
      so sicstus.h (by including spaux.h) will need to do the name
      mangling (as it can, since SP_RESNAME will be defined).

   4. The glue code generated by splfr that actually defines
      sp_GlobalSICStus needs to perform the name mangling. Luckily
      this code is compiled by splfr so it falls under case (1).
*/

#if ((SP_DYNAMIC_FOREIGN_RESOURCE || SPDLL) && !MULTI_SP_AWARE) && !SP_NO_MANGLE_sp_GlobalSICStus
   /* A dynamic foreign resource that uses a global dispatch vector
      (i.e., !MULTI_SP_AWARE) */

#ifndef SP_RESNAME_CATENATE1
#define SP_RESNAME_CATENATE1(X,Y) X ## _ ## Y
#endif /* SP_RESNAME_CATENATE1 */

#ifndef SP_RESNAME_CATENATE
#define SP_RESNAME_CATENATE(X,Y) SP_RESNAME_CATENATE1(X,Y)
#endif /* SP_RESNAME_CATENATE */

   /* Name mangle sp_GlobalSICStus to give it a resource specific name in
      dynamic foreign resources.  This is needed on most versions of U**X
      to ensure different dynamic foreign resources does not share
      sp_GlobalSICStus (we could use ld -B symbolic to get a similar
      effect but that has other side effects). Name mangling like this
      does not hurt on platforms where it is not needed.
   */
#ifndef sp_GlobalSICStus        /* not already mangled */
#ifdef SP_RESNAME               /* need the resource name to construct the mangled name */

   /* e.g., sp_GlobalSICStus_system for foreign resource "system" */
#define sp_GlobalSICStus SP_RESNAME_CATENATE(sp_GlobalSICStus,SP_RESNAME)
#endif /* SP_RESNAME */
#endif /* sp_GlobalSICStus */
#endif /* ((SP_DYNAMIC_FOREIGN_RESOURCE || SPDLL) && !MULTI_SP_AWARE) */


#if (MULTI_SP_AWARE && (SP_DYNAMIC_FOREIGN_RESOURCE || SPDLL)) || (MULTI_SP_AWARE && SP_ALLOW_MULTI_STATIC)
/* A multi-sp resource passes around the API, no global variable used.
   By suppressing this declaration we detect incorrect compiler flags early */
#else /* !(MULTI_SP_AWARE && (SP_DYNAMIC_FOREIGN_RESOURCE || SPDLL))*/
#if !SPAUX_H_DO_NOT_DECLARE_sp_GlobalSICStus
extern SICSTUS_API_STRUCT_TYPE *sp_GlobalSICStus;
#define sp_GlobalSICStus_declared 1
#endif  /* !SPAUX_H_DO_NOT_DECLARE_sp_GlobalSICStus */
#endif /* !(MULTI_SP_AWARE && (SP_DYNAMIC_FOREIGN_RESOURCE || SPDLL))*/

#endif /* SPAUX_H_ */

#ifndef SPAUX_H_
/* done last in file to ensure all protected segments are seen first time */
#define SPAUX_H_ 1
#endif /* SPAUX_H_ */

/* Things that belong in ptrspfun.h */

#if FAKE_PTRSPFUN_H
#ifndef PTRSPFUN_H_
#define PTRSPFUN_H_ 1
extern struct SICSTUS_API_STRUCT default_sicstus_api_struct; /* in ptrspfun.c */
#endif /* PTRSPFUN_H_ */

#endif /* FAKE_PTRSPFUN_H */
